var require = function (file, cwd) {
    var resolved = require.resolve(file, cwd || '/');
    var mod = require.modules[resolved];
    if (!mod) throw new Error(
        'Failed to resolve module ' + file + ', tried ' + resolved
    );
    var cached = require.cache[resolved];
    var res = cached? cached.exports : mod();
    return res;
};

require.paths = [];
require.modules = {};
require.cache = {};
require.extensions = [".js",".coffee",".json"];

require._core = {
    'assert': true,
    'events': true,
    'fs': true,
    'path': true,
    'vm': true
};

require.resolve = (function () {
    return function (x, cwd) {
        if (!cwd) cwd = '/';

        if (require._core[x]) return x;
        var path = require.modules.path();
        cwd = path.resolve('/', cwd);
        var y = cwd || '/';

        if (x.match(/^(?:\.\.?\/|\/)/)) {
            var m = loadAsFileSync(path.resolve(y, x))
                || loadAsDirectorySync(path.resolve(y, x));
            if (m) return m;
        }

        var n = loadNodeModulesSync(x, y);
        if (n) return n;

        throw new Error("Cannot find module '" + x + "'");

        function loadAsFileSync (x) {
            x = path.normalize(x);
            if (require.modules[x]) {
                return x;
            }

            for (var i = 0; i < require.extensions.length; i++) {
                var ext = require.extensions[i];
                if (require.modules[x + ext]) return x + ext;
            }
        }

        function loadAsDirectorySync (x) {
            x = x.replace(/\/+$/, '');
            var pkgfile = path.normalize(x + '/package.json');
            if (require.modules[pkgfile]) {
                var pkg = require.modules[pkgfile]();
                var b = pkg.browserify;
                if (typeof b === 'object' && b.main) {
                    var m = loadAsFileSync(path.resolve(x, b.main));
                    if (m) return m;
                }
                else if (typeof b === 'string') {
                    var m = loadAsFileSync(path.resolve(x, b));
                    if (m) return m;
                }
                else if (pkg.main) {
                    var m = loadAsFileSync(path.resolve(x, pkg.main));
                    if (m) return m;
                }
            }

            return loadAsFileSync(x + '/index');
        }

        function loadNodeModulesSync (x, start) {
            var dirs = nodeModulesPathsSync(start);
            for (var i = 0; i < dirs.length; i++) {
                var dir = dirs[i];
                var m = loadAsFileSync(dir + '/' + x);
                if (m) return m;
                var n = loadAsDirectorySync(dir + '/' + x);
                if (n) return n;
            }

            var m = loadAsFileSync(x);
            if (m) return m;
        }

        function nodeModulesPathsSync (start) {
            var parts;
            if (start === '/') parts = [ '' ];
            else parts = path.normalize(start).split('/');

            var dirs = [];
            for (var i = parts.length - 1; i >= 0; i--) {
                if (parts[i] === 'node_modules') continue;
                var dir = parts.slice(0, i + 1).join('/') + '/node_modules';
                dirs.push(dir);
            }

            return dirs;
        }
    };
})();

require.alias = function (from, to) {
    var path = require.modules.path();
    var res = null;
    try {
        res = require.resolve(from + '/package.json', '/');
    }
    catch (err) {
        res = require.resolve(from, '/');
    }
    var basedir = path.dirname(res);

    var keys = (Object.keys || function (obj) {
        var res = [];
        for (var key in obj) res.push(key);
        return res;
    })(require.modules);

    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key.slice(0, basedir.length + 1) === basedir + '/') {
            var f = key.slice(basedir.length);
            require.modules[to + f] = require.modules[basedir + f];
        }
        else if (key === basedir) {
            require.modules[to] = require.modules[basedir];
        }
    }
};

(function () {
    var process = {};
    var global = typeof window !== 'undefined' ? window : {};
    var definedProcess = false;

    require.define = function (filename, fn) {
        if (!definedProcess && require.modules.__browserify_process) {
            process = require.modules.__browserify_process();
            definedProcess = true;
        }

        var dirname = require._core[filename]
            ? ''
            : require.modules.path().dirname(filename)
        ;

        var require_ = function (file) {
            var requiredModule = require(file, dirname);
            var cached = require.cache[require.resolve(file, dirname)];

            if (cached && cached.parent === null) {
                cached.parent = module_;
            }

            return requiredModule;
        };
        require_.resolve = function (name) {
            return require.resolve(name, dirname);
        };
        require_.modules = require.modules;
        require_.define = require.define;
        require_.cache = require.cache;
        var module_ = {
            id : filename,
            filename: filename,
            exports : {},
            loaded : false,
            parent: null
        };

        require.modules[filename] = function () {
            require.cache[filename] = module_;
            fn.call(
                module_.exports,
                require_,
                module_,
                module_.exports,
                dirname,
                filename,
                process,
                global
            );
            module_.loaded = true;
            return module_.exports;
        };
    };
})();


require.define("path",function(require,module,exports,__dirname,__filename,process,global){function filter (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (fn(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length; i >= 0; i--) {
    var last = parts[i];
    if (last == '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Regex to split a filename into [*, dir, basename, ext]
// posix version
var splitPathRe = /^(.+\/(?!$)|\/)?((?:.+?)?(\.[^.]*)?)$/;

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
var resolvedPath = '',
    resolvedAbsolute = false;

for (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {
  var path = (i >= 0)
      ? arguments[i]
      : process.cwd();

  // Skip empty and invalid entries
  if (typeof path !== 'string' || !path) {
    continue;
  }

  resolvedPath = path + '/' + resolvedPath;
  resolvedAbsolute = path.charAt(0) === '/';
}

// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)

// Normalize the path
resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
var isAbsolute = path.charAt(0) === '/',
    trailingSlash = path.slice(-1) === '/';

// Normalize the path
path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};


// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    return p && typeof p === 'string';
  }).join('/'));
};


exports.dirname = function(path) {
  var dir = splitPathRe.exec(path)[1] || '';
  var isWindows = false;
  if (!dir) {
    // No dirname
    return '.';
  } else if (dir.length === 1 ||
      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) {
    // It is just a slash or a drive letter with a slash
    return dir;
  } else {
    // It is a full dirname, strip trailing slash
    return dir.substring(0, dir.length - 1);
  }
};


exports.basename = function(path, ext) {
  var f = splitPathRe.exec(path)[2] || '';
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPathRe.exec(path)[3] || '';
};

exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

});

require.define("__browserify_process",function(require,module,exports,__dirname,__filename,process,global){var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
        && window.setImmediate;
    var canPost = typeof window !== 'undefined'
        && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'browserify-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('browserify-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    if (name === 'evals') return (require)('vm')
    else throw new Error('No such module. (Possibly not yet loaded)')
};

(function () {
    var cwd = '/';
    var path;
    process.cwd = function () { return cwd };
    process.chdir = function (dir) {
        if (!path) path = require('path');
        cwd = path.resolve(dir, cwd);
    };
})();

});

require.define("/node_modules/request/package.json",function(require,module,exports,__dirname,__filename,process,global){module.exports = {"main":"./main"}
});

require.define("/node_modules/request/main.js",function(require,module,exports,__dirname,__filename,process,global){// Copyright 2010-2011 Mikeal Rogers
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

var http = require('http')
  , https = false
  , tls = false
  , url = require('url')
  , util = require('util')
  , stream = require('stream')
  , qs = require('querystring')
  ;

try {
    https = require('https');
} catch (e) {}

try {
    tls = require('tls');
} catch (e) {}

var toBase64 = function(str) {
  return (new Buffer(str || "", "ascii")).toString("base64");
};

// Hacky fix for pre-0.4.4 https
if (https && !https.Agent) {
  https.Agent = function (options) {
    http.Agent.call(this, options);
  }
  util.inherits(https.Agent, http.Agent);

  https.Agent.prototype._getConnection = function(host, port, cb) {
    var s = tls.connect(port, host, this.options, function() {
      // do other checks here?
      if (cb) cb();
    });

    return s;
  };
}

var isUrl = /^https?:/;

var globalPool = {};

var Request = function (options) {
  stream.Stream.call(this);
  this.readable = true;
  this.writable = true;

  for (i in options) {
    this[i] = options[i];
  }
  if (!this.pool) this.pool = globalPool;
  this.dests = [];
}
util.inherits(Request, stream.Stream);
Request.prototype.getAgent = function (host, port) {
  if (!this.pool[host+':'+port]) {
    this.pool[host+':'+port] = new this.httpModule.Agent({host:host, port:port});
  }
  return this.pool[host+':'+port];
}
Request.prototype.request = function () {
  var options = this;
  if (options.url) {
    // People use this property instead all the time so why not just support it.
    options.uri = options.url;
    delete options.url;
  }

  if (!options.uri) {
    throw new Error("options.uri is a required argument");
  } else {
    if (typeof options.uri == "string") options.uri = url.parse(options.uri);
  }
  if (options.proxy) {
    if (typeof options.proxy == 'string') options.proxy = url.parse(options.proxy);
  }

  options._redirectsFollowed = options._redirectsFollowed || 0;
  options.maxRedirects = (options.maxRedirects !== undefined) ? options.maxRedirects : 10;
  options.followRedirect = (options.followRedirect !== undefined) ? options.followRedirect : true;

  options.method = options.method || 'GET';
  options.headers = options.headers || {};

  var setHost = false;
  if (!options.headers.host) {
    options.headers.host = options.uri.hostname;
    if (options.uri.port) {
      if ( !(options.uri.port === 80 && options.uri.protocol === 'http:') &&
           !(options.uri.port === 443 && options.uri.protocol === 'https:') )
      options.headers.host += (':'+options.uri.port);
    }
    setHost = true;
  }

  if (!options.uri.pathname) {options.uri.pathname = '/';}
  if (!options.uri.port) {
    if (options.uri.protocol == 'http:') {options.uri.port = 80;}
    else if (options.uri.protocol == 'https:') {options.uri.port = 443;}
  }

  if (options.bodyStream || options.responseBodyStream) {
    console.error('options.bodyStream and options.responseBodyStream is deprecated. You should now send the request object to stream.pipe()');
    this.pipe(options.responseBodyStream || options.bodyStream)
  }

  if (options.proxy) {
    options.port = options.proxy.port;
    options.host = options.proxy.hostname;
  } else {
    options.port = options.uri.port;
    options.host = options.uri.hostname;
  }

  if (options.onResponse === true) {
    options.onResponse = options.callback;
    delete options.callback;
  }

  var clientErrorHandler = function (error) {
    if (setHost) delete options.headers.host;
    options.emit('error', error);
  };
  if (options.onResponse) options.on('error', function (e) {options.onResponse(e)});
  if (options.callback) options.on('error', function (e) {options.callback(e)});


  if (options.uri.auth && !options.headers.authorization) {
    options.headers.authorization = "Basic " + toBase64(options.uri.auth.split(':').map(qs.unescape).join(':'));
  }
  if (options.proxy && options.proxy.auth && !options.headers['proxy-authorization']) {
    options.headers['proxy-authorization'] = "Basic " + toBase64(options.proxy.auth.split(':').map(qs.unescape).join(':'));
  }

  options.path = options.uri.href.replace(options.uri.protocol + '//' + options.uri.host, '');
  if (options.path.length === 0) options.path = '/';

  if (options.proxy) options.path = (options.uri.protocol + '//' + options.uri.host + options.path);

  if (options.json) {
    options.headers['content-type'] = 'application/json';
    options.body = JSON.stringify(options.json);
  } else if (options.multipart) {
    options.body = '';
    options.headers['content-type'] = 'multipart/related;boundary="frontier"';

    if (!options.multipart.forEach) throw new Error('Argument error, options.multipart.');
    options.multipart.forEach(function (part) {
      var body = part.body;
      if(!body) throw Error('Body attribute missing in multipart.');
      delete part.body;
      options.body += '--frontier\r\n';
      Object.keys(part).forEach(function(key){
        options.body += key + ': ' + part[key] + '\r\n'
      })
      options.body += '\r\n' + body + '\r\n';
    })
    options.body += '--frontier--'
  }

  if (options.body) {
    if (!Buffer.isBuffer(options.body)) {
      options.body = new Buffer(options.body);
    }
    if (options.body.length) {
      options.headers['content-length'] = options.body.length;
    } else {
      throw new Error('Argument error, options.body.');
    }
  }

  options.httpModule =
    {"http:":http, "https:":https}[options.proxy ? options.proxy.protocol : options.uri.protocol]

  if (!options.httpModule) throw new Error("Invalid protocol");

  if (options.pool === false) {
    options.agent = false;
  } else {
    if (options.maxSockets) {
      options.agent = options.getAgent(options.host, options.port);
      options.agent.maxSockets = options.maxSockets;
    }
    if (options.pool.maxSockets) {
      options.agent = options.getAgent(options.host, options.port);
      options.agent.maxSockets = options.pool.maxSockets;
    }
  }

  options.req = options.httpModule.request(options, function (response) {
    options.response = response;
    if (setHost) delete options.headers.host;

    if (response.statusCode >= 300 &&
        response.statusCode < 400  &&
        options.followRedirect     &&
        options.method !== 'PUT' &&
        options.method !== 'POST' &&
        response.headers.location) {
      if (options._redirectsFollowed >= options.maxRedirects) {
        options.emit('error', new Error("Exceeded maxRedirects. Probably stuck in a redirect loop."));
      }
      options._redirectsFollowed += 1;
      if (!isUrl.test(response.headers.location)) {
        response.headers.location = url.resolve(options.uri.href, response.headers.location);
      }
      options.uri = response.headers.location;
      delete options.req;
      delete options.agent;
      if (options.headers) {
        delete options.headers.host;
      }
      request(options, options.callback);
      return; // Ignore the rest of the response
    } else {
      options._redirectsFollowed = 0;
      // Be a good stream and emit end when the response is finished.
      // Hack to emit end on close becuase of a core bug that never fires end
      response.on('close', function () {options.emit('end')})

      if (options.encoding) {
        if (options.dests.length !== 0) {
          console.error("Ingoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.");
        } else {
          response.setEncoding(options.encoding);
        }
      }

      if (options.dests.length !== 0) {
        options.dests.forEach(function (dest) {
          response.pipe(dest);
        })
        if (options.onResponse) options.onResponse(null, response);
        if (options.callback) options.callback(null, response, options.responseBodyStream);

      } else {
        if (options.onResponse) {
          options.onResponse(null, response);
        }
        if (options.callback) {
          var buffer = '';
          response.on("data", function (chunk) {
            buffer += chunk;
          })
          response.on("end", function () {
            options.callback(null, response, buffer);
          })
          ;
        }
      }
    }
  })

  options.req.on('error', clientErrorHandler);

  options.once('pipe', function (src) {
    if (options.ntick) throw new Error("You cannot pipe to this stream after the first nextTick() after creation of the request stream.")
    options.src = src;
    options.on('pipe', function () {
      console.error("You have already piped to this stream. Pipeing twice is likely to break the request.")
    })
  })

  process.nextTick(function () {
    if (options.body) {
      options.req.write(options.body);
      options.req.end();
    } else if (options.requestBodyStream) {
      console.warn("options.requestBodyStream is deprecated, please pass the request object to stream.pipe.")
      options.requestBodyStream.pipe(options);
    } else if (!options.src) {
      options.req.end();
    }
    options.ntick = true;
  })
}
Request.prototype.pipe = function (dest) {
  if (this.response) throw new Error("You cannot pipe after the response event.")
  this.dests.push(dest);
}
Request.prototype.write = function () {
  if (!this.req) throw new Error("This request has been piped before http.request() was called.");
  this.req.write.apply(this.req, arguments);
}
Request.prototype.end = function () {
  if (!this.req) throw new Error("This request has been piped before http.request() was called.");
  this.req.end.apply(this.req, arguments);
}
Request.prototype.pause = function () {
  if (!this.req) throw new Error("This request has been piped before http.request() was called.");
  this.req.pause.apply(this.req, arguments);
}
Request.prototype.resume = function () {
  if (!this.req) throw new Error("This request has been piped before http.request() was called.");
  this.req.resume.apply(this.req, arguments);
}

function request (options, callback) {
  if (callback) options.callback = callback;
  var r = new Request(options);
  r.request();
  return r;
}

module.exports = request;

request.defaults = function (options) {
  var def = function (method) {
    var d = function (opts, callback) {
      for (i in options) {
        if (!opts[i]) opts[i] = options[i];
        return method(opts, callback);
      }
    }
    return d;
  }
  de = def(request);
  de.get = def(request.get);
  de.post = def(request.post);
  de.put = def(request.put);
  de.head = def(request.head);
  de.del = def(request.del);
  return d;
}

request.get = request;
request.post = function (options, callback) {
  options.method = 'POST';
  return request(options, callback);
};
request.put = function (options, callback) {
  options.method = 'PUT';
  return request(options, callback);
};
request.head = function (options, callback) {
  options.method = 'HEAD';
  if (options.body || options.requestBodyStream || options.json || options.multipart) {
    throw new Error("HTTP HEAD requests MUST NOT include a request body.");
  }
  return request(options, callback);
};
request.del = function (options, callback) {
  options.method = 'DELETE';
  return request(options, callback);
}

});

require.define("http",function(require,module,exports,__dirname,__filename,process,global){module.exports = require("http-browserify")
});

require.define("/node_modules/http-browserify/package.json",function(require,module,exports,__dirname,__filename,process,global){module.exports = {"main":"index.js","browserify":"index.js"}
});

require.define("/node_modules/http-browserify/index.js",function(require,module,exports,__dirname,__filename,process,global){var http = module.exports;
var EventEmitter = require('events').EventEmitter;
var Request = require('./lib/request');

http.request = function (params, cb) {
    if (!params) params = {};
    if (!params.host) params.host = window.location.host.split(':')[0];
    if (!params.port) params.port = window.location.port;

    var req = new Request(new xhrHttp, params);
    if (cb) req.on('response', cb);
    return req;
};

http.get = function (params, cb) {
    params.method = 'GET';
    var req = http.request(params, cb);
    req.end();
    return req;
};

http.Agent = function () {};
http.Agent.defaultMaxSockets = 4;

var xhrHttp = (function () {
    if (typeof window === 'undefined') {
        throw new Error('no window object present');
    }
    else if (window.XMLHttpRequest) {
        return window.XMLHttpRequest;
    }
    else if (window.ActiveXObject) {
        var axs = [
            'Msxml2.XMLHTTP.6.0',
            'Msxml2.XMLHTTP.3.0',
            'Microsoft.XMLHTTP'
        ];
        for (var i = 0; i < axs.length; i++) {
            try {
                var ax = new(window.ActiveXObject)(axs[i]);
                return function () {
                    if (ax) {
                        var ax_ = ax;
                        ax = null;
                        return ax_;
                    }
                    else {
                        return new(window.ActiveXObject)(axs[i]);
                    }
                };
            }
            catch (e) {}
        }
        throw new Error('ajax not supported in this browser')
    }
    else {
        throw new Error('ajax not supported in this browser');
    }
})();

});

require.define("events",function(require,module,exports,__dirname,__filename,process,global){if (!process.EventEmitter) process.EventEmitter = function () {};

var EventEmitter = exports.EventEmitter = process.EventEmitter;
var isArray = typeof Array.isArray === 'function'
    ? Array.isArray
    : function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]'
    }
;
function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (x === xs[i]) return i;
    }
    return -1;
}

// By default EventEmitters will print a warning if more than
// 10 listeners are added to it. This is a useful default which
// helps finding memory leaks.
//
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
var defaultMaxListeners = 10;
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!this._events) this._events = {};
  this._events.maxListeners = n;
};


EventEmitter.prototype.emit = function(type) {
  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events || !this._events.error ||
        (isArray(this._events.error) && !this._events.error.length))
    {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
      return false;
    }
  }

  if (!this._events) return false;
  var handler = this._events[type];
  if (!handler) return false;

  if (typeof handler == 'function') {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        var args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
    return true;

  } else if (isArray(handler)) {
    var args = Array.prototype.slice.call(arguments, 1);

    var listeners = handler.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
    return true;

  } else {
    return false;
  }
};

// EventEmitter is defined in src/node_events.cc
// EventEmitter.prototype.emit() is also defined there.
EventEmitter.prototype.addListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('addListener only takes instances of Function');
  }

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type == "newListeners"! Before
  // adding it to the listeners, first emit "newListeners".
  this.emit('newListener', type, listener);

  if (!this._events[type]) {
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  } else if (isArray(this._events[type])) {

    // Check for listener leak
    if (!this._events[type].warned) {
      var m;
      if (this._events.maxListeners !== undefined) {
        m = this._events.maxListeners;
      } else {
        m = defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        console.trace();
      }
    }

    // If we've already got an array, just append.
    this._events[type].push(listener);
  } else {
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  var self = this;
  self.on(type, function g() {
    self.removeListener(type, g);
    listener.apply(this, arguments);
  });

  return this;
};

EventEmitter.prototype.removeListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('removeListener only takes instances of Function');
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (!this._events || !this._events[type]) return this;

  var list = this._events[type];

  if (isArray(list)) {
    var i = indexOf(list, listener);
    if (i < 0) return this;
    list.splice(i, 1);
    if (list.length == 0)
      delete this._events[type];
  } else if (this._events[type] === listener) {
    delete this._events[type];
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  // does not use listeners(), so no side effect of creating _events[type]
  if (type && this._events && this._events[type]) this._events[type] = null;
  return this;
};

EventEmitter.prototype.listeners = function(type) {
  if (!this._events) this._events = {};
  if (!this._events[type]) this._events[type] = [];
  if (!isArray(this._events[type])) {
    this._events[type] = [this._events[type]];
  }
  return this._events[type];
};

});

require.define("/node_modules/http-browserify/lib/request.js",function(require,module,exports,__dirname,__filename,process,global){var Stream = require('stream');
var Response = require('./response');
var concatStream = require('concat-stream')

var Request = module.exports = function (xhr, params) {
    var self = this;
    self.writable = true;
    self.xhr = xhr;
    self.body = concatStream()

    var uri = params.host + ':' + params.port + (params.path || '/');

    xhr.open(
        params.method || 'GET',
        (params.scheme || 'http') + '://' + uri,
        true
    );

    if (params.headers) {
        var keys = objectKeys(params.headers);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!self.isSafeRequestHeader(key)) return;
            var value = params.headers[key];
            if (isArray(value)) {
                for (var j = 0; j < value.length; j++) {
                    xhr.setRequestHeader(key, value[j]);
                }
            }
            else xhr.setRequestHeader(key, value)
        }
    }

    var res = new Response;
    res.on('close', function () {
        self.emit('close');
    });

    res.on('ready', function () {
        self.emit('response', res);
    });

    xhr.onreadystatechange = function () {
        res.handle(xhr);
    };
};

Request.prototype = new Stream;

Request.prototype.setHeader = function (key, value) {
    if (isArray(value)) {
        for (var i = 0; i < value.length; i++) {
            this.xhr.setRequestHeader(key, value[i]);
        }
    }
    else {
        this.xhr.setRequestHeader(key, value);
    }
};

Request.prototype.write = function (s) {
    this.body.write(s);
};

Request.prototype.destroy = function (s) {
    this.xhr.abort();
    this.emit('close');
};

Request.prototype.end = function (s) {
    if (s !== undefined) this.body.write(s);
    this.body.end()
    this.xhr.send(this.body.getBody());
};

// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
Request.unsafeHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "cookie",
    "cookie2",
    "content-transfer-encoding",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "user-agent",
    "via"
];

Request.prototype.isSafeRequestHeader = function (headerName) {
    if (!headerName) return false;
    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
};

var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var indexOf = function (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
};

});

require.define("stream",function(require,module,exports,__dirname,__filename,process,global){var events = require('events');
var util = require('util');

function Stream() {
  events.EventEmitter.call(this);
}
util.inherits(Stream, events.EventEmitter);
module.exports = Stream;
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once, and
  // only when all sources have ended.
  if (!dest._isStdio && (!options || options.end !== false)) {
    dest._pipeCount = dest._pipeCount || 0;
    dest._pipeCount++;

    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest._pipeCount--;

    // remove the listeners
    cleanup();

    if (dest._pipeCount > 0) {
      // waiting for other incoming streams to end.
      return;
    }

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest._pipeCount--;

    // remove the listeners
    cleanup();

    if (dest._pipeCount > 0) {
      // waiting for other incoming streams to end.
      return;
    }

    dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (this.listeners('error').length === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('end', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('end', cleanup);
  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

});

require.define("util",function(require,module,exports,__dirname,__filename,process,global){var events = require('events');

exports.isArray = isArray;
exports.isDate = function(obj){return Object.prototype.toString.call(obj) === '[object Date]'};
exports.isRegExp = function(obj){return Object.prototype.toString.call(obj) === '[object RegExp]'};


exports.print = function () {};
exports.puts = function () {};
exports.debug = function() {};

exports.inspect = function(obj, showHidden, depth, colors) {
  var seen = [];

  var stylize = function(str, styleType) {
    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    var styles =
        { 'bold' : [1, 22],
          'italic' : [3, 23],
          'underline' : [4, 24],
          'inverse' : [7, 27],
          'white' : [37, 39],
          'grey' : [90, 39],
          'black' : [30, 39],
          'blue' : [34, 39],
          'cyan' : [36, 39],
          'green' : [32, 39],
          'magenta' : [35, 39],
          'red' : [31, 39],
          'yellow' : [33, 39] };

    var style =
        { 'special': 'cyan',
          'number': 'blue',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red' }[styleType];

    if (style) {
      return '\033[' + styles[style][0] + 'm' + str +
             '\033[' + styles[style][1] + 'm';
    } else {
      return str;
    }
  };
  if (! colors) {
    stylize = function(str, styleType) { return str; };
  }

  function format(value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (value && typeof value.inspect === 'function' &&
        // Filter out the util module, it's inspect function is special
        value !== exports &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      return value.inspect(recurseTimes);
    }

    // Primitive types cannot have properties
    switch (typeof value) {
      case 'undefined':
        return stylize('undefined', 'undefined');

      case 'string':
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return stylize(simple, 'string');

      case 'number':
        return stylize('' + value, 'number');

      case 'boolean':
        return stylize('' + value, 'boolean');
    }
    // For some reason typeof null is "object", so special case here.
    if (value === null) {
      return stylize('null', 'null');
    }

    // Look up the keys of the object.
    var visible_keys = Object_keys(value);
    var keys = showHidden ? Object_getOwnPropertyNames(value) : visible_keys;

    // Functions without properties can be shortcutted.
    if (typeof value === 'function' && keys.length === 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        var name = value.name ? ': ' + value.name : '';
        return stylize('[Function' + name + ']', 'special');
      }
    }

    // Dates without properties can be shortcutted
    if (isDate(value) && keys.length === 0) {
      return stylize(value.toUTCString(), 'date');
    }

    var base, type, braces;
    // Determine the object type
    if (isArray(value)) {
      type = 'Array';
      braces = ['[', ']'];
    } else {
      type = 'Object';
      braces = ['{', '}'];
    }

    // Make functions say that they are functions
    if (typeof value === 'function') {
      var n = value.name ? ': ' + value.name : '';
      base = (isRegExp(value)) ? ' ' + value : ' [Function' + n + ']';
    } else {
      base = '';
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + value.toUTCString();
    }

    if (keys.length === 0) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        return stylize('[Object]', 'special');
      }
    }

    seen.push(value);

    var output = keys.map(function(key) {
      var name, str;
      if (value.__lookupGetter__) {
        if (value.__lookupGetter__(key)) {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Getter/Setter]', 'special');
          } else {
            str = stylize('[Getter]', 'special');
          }
        } else {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Setter]', 'special');
          }
        }
      }
      if (visible_keys.indexOf(key) < 0) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (seen.indexOf(value[key]) < 0) {
          if (recurseTimes === null) {
            str = format(value[key]);
          } else {
            str = format(value[key], recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (isArray(value)) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = stylize('[Circular]', 'special');
        }
      }
      if (typeof name === 'undefined') {
        if (type === 'Array' && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    });

    seen.pop();

    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.length + 1;
    }, 0);

    if (length > 50) {
      output = braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];

    } else {
      output = braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    return output;
  }
  return format(obj, (typeof depth === 'undefined' ? 2 : depth));
};


function isArray(ar) {
  return ar instanceof Array ||
         Array.isArray(ar) ||
         (ar && ar !== Object.prototype && isArray(ar.__proto__));
}


function isRegExp(re) {
  return re instanceof RegExp ||
    (typeof re === 'object' && Object.prototype.toString.call(re) === '[object RegExp]');
}


function isDate(d) {
  if (d instanceof Date) return true;
  if (typeof d !== 'object') return false;
  var properties = Date.prototype && Object_getOwnPropertyNames(Date.prototype);
  var proto = d.__proto__ && Object_getOwnPropertyNames(d.__proto__);
  return JSON.stringify(proto) === JSON.stringify(properties);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

exports.log = function (msg) {};

exports.pump = null;

var Object_keys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) res.push(key);
    return res;
};

var Object_getOwnPropertyNames = Object.getOwnPropertyNames || function (obj) {
    var res = [];
    for (var key in obj) {
        if (Object.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
};

var Object_create = Object.create || function (prototype, properties) {
    // from es5-shim
    var object;
    if (prototype === null) {
        object = { '__proto__' : null };
    }
    else {
        if (typeof prototype !== 'object') {
            throw new TypeError(
                'typeof prototype[' + (typeof prototype) + '] != \'object\''
            );
        }
        var Type = function () {};
        Type.prototype = prototype;
        object = new Type();
        object.__proto__ = prototype;
    }
    if (typeof properties !== 'undefined' && Object.defineProperties) {
        Object.defineProperties(object, properties);
    }
    return object;
};

exports.inherits = function(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = Object_create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (typeof f !== 'string') {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(exports.inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j': return JSON.stringify(args[i++]);
      default:
        return x;
    }
  });
  for(var x = args[i]; i < len; x = args[++i]){
    if (x === null || typeof x !== 'object') {
      str += ' ' + x;
    } else {
      str += ' ' + exports.inspect(x);
    }
  }
  return str;
};

});

require.define("/node_modules/http-browserify/lib/response.js",function(require,module,exports,__dirname,__filename,process,global){var Stream = require('stream');

var Response = module.exports = function (res) {
    this.offset = 0;
    this.readable = true;
};

Response.prototype = new Stream;

var capable = {
    streaming : true,
    status2 : true
};

function parseHeaders (res) {
    var lines = res.getAllResponseHeaders().split(/\r?\n/);
    var headers = {};
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        if (line === '') continue;

        var m = line.match(/^([^:]+):\s*(.*)/);
        if (m) {
            var key = m[1].toLowerCase(), value = m[2];

            if (headers[key] !== undefined) {

                if (isArray(headers[key])) {
                    headers[key].push(value);
                }
                else {
                    headers[key] = [ headers[key], value ];
                }
            }
            else {
                headers[key] = value;
            }
        }
        else {
            headers[line] = true;
        }
    }
    return headers;
}

Response.prototype.getResponse = function (xhr) {
    var respType = String(xhr.responseType).toLowerCase();
    if (respType === 'blob') return xhr.responseBlob;
    if (respType === 'arraybuffer') return xhr.response;
    return xhr.responseText;
}

Response.prototype.getHeader = function (key) {
    return this.headers[key.toLowerCase()];
};

Response.prototype.handle = function (res) {
    if (res.readyState === 2 && capable.status2) {
        try {
            this.statusCode = res.status;
            this.headers = parseHeaders(res);
        }
        catch (err) {
            capable.status2 = false;
        }

        if (capable.status2) {
            this.emit('ready');
        }
    }
    else if (capable.streaming && res.readyState === 3) {
        try {
            if (!this.statusCode) {
                this.statusCode = res.status;
                this.headers = parseHeaders(res);
                this.emit('ready');
            }
        }
        catch (err) {}

        try {
            this._emitData(res);
        }
        catch (err) {
            capable.streaming = false;
        }
    }
    else if (res.readyState === 4) {
        if (!this.statusCode) {
            this.statusCode = res.status;
            this.emit('ready');
        }
        this._emitData(res);

        if (res.error) {
            this.emit('error', this.getResponse(res));
        }
        else this.emit('end');

        this.emit('close');
    }
};

Response.prototype._emitData = function (res) {
    var respBody = this.getResponse(res);
    if (respBody.toString().match(/ArrayBuffer/)) {
        this.emit('data', new Uint8Array(respBody, this.offset));
        this.offset = respBody.byteLength;
        return;
    }
    if (respBody.length > this.offset) {
        this.emit('data', respBody.slice(this.offset));
        this.offset = respBody.length;
    }
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

});

require.define("/node_modules/http-browserify/node_modules/concat-stream/package.json",function(require,module,exports,__dirname,__filename,process,global){module.exports = {}
});

require.define("/node_modules/http-browserify/node_modules/concat-stream/index.js",function(require,module,exports,__dirname,__filename,process,global){var stream = require('stream')
var util = require('util')

function ConcatStream(cb) {
  stream.Stream.call(this)
  this.writable = true
  if (cb) this.cb = cb
  this.body = []
  if (this.cb) this.on('error', cb)
}

util.inherits(ConcatStream, stream.Stream)

ConcatStream.prototype.write = function(chunk) {
  this.body.push(chunk)
}

ConcatStream.prototype.arrayConcat = function(arrs) {
  if (arrs.length === 0) return []
  if (arrs.length === 1) return arrs[0]
  return arrs.reduce(function (a, b) { return a.concat(b) })
}

ConcatStream.prototype.isArray = function(arr) {
  var isArray = Array.isArray(arr)
  var isTypedArray = arr.toString().match(/Array/)
  return isArray || isTypedArray
}

ConcatStream.prototype.getBody = function () {
  if (this.body.length === 0) return
  if (typeof(this.body[0]) === "string") return this.body.join('')
  if (this.isArray(this.body[0])) return this.arrayConcat(this.body)
  if (typeof(Buffer) !== "undefined" && Buffer.isBuffer(this.body[0])) {
    return Buffer.concat(this.body)
  }
  return this.body
}

ConcatStream.prototype.end = function() {
  if (this.cb) this.cb(false, this.getBody())
}

module.exports = function(cb) {
  return new ConcatStream(cb)
}

module.exports.ConcatStream = ConcatStream

});

require.define("url",function(require,module,exports,__dirname,__filename,process,global){var punycode = { encode : function (s) { return s } };

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

function arrayIndexOf(array, subject) {
    for (var i = 0, j = array.length; i < j; i++) {
        if(array[i] == subject) return i;
    }
    return -1;
}

var objectKeys = Object.keys || function objectKeys(object) {
    if (object !== Object(object)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in object) if (object.hasOwnProperty(key)) keys[keys.length] = key;
    return keys;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]+$/,
    // RFC 2396: characters reserved for delimiting URLs.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '~', '[', ']', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''],
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#']
      .concat(unwise).concat(autoEscape),
    nonAuthChars = ['/', '@', '?', '#'].concat(delims),
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-zA-Z0-9][a-z0-9A-Z_-]{0,62}$/,
    hostnamePartStart = /^([a-zA-Z0-9][a-z0-9A-Z_-]{0,62})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always have a path component.
    pathedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && typeof(url) === 'object' && url.href) return url;

  if (typeof url !== 'string') {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var out = {},
      rest = url;

  // cut off any delimiters.
  // This is to support parse stuff like "<http://foo.com>"
  for (var i = 0, l = rest.length; i < l; i++) {
    if (arrayIndexOf(delims, rest.charAt(i)) === -1) break;
  }
  if (i !== 0) rest = rest.substr(i);


  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    out.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      out.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    // don't enforce full RFC correctness, just be unstupid about it.

    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the first @ sign, unless some non-auth character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    var atSign = arrayIndexOf(rest, '@');
    if (atSign !== -1) {
      // there *may be* an auth
      var hasAuth = true;
      for (var i = 0, l = nonAuthChars.length; i < l; i++) {
        var index = arrayIndexOf(rest, nonAuthChars[i]);
        if (index !== -1 && index < atSign) {
          // not a valid auth.  Something like http://foo.com/bar@baz/
          hasAuth = false;
          break;
        }
      }
      if (hasAuth) {
        // pluck off the auth portion.
        out.auth = rest.substr(0, atSign);
        rest = rest.substr(atSign + 1);
      }
    }

    var firstNonHost = -1;
    for (var i = 0, l = nonHostChars.length; i < l; i++) {
      var index = arrayIndexOf(rest, nonHostChars[i]);
      if (index !== -1 &&
          (firstNonHost < 0 || index < firstNonHost)) firstNonHost = index;
    }

    if (firstNonHost !== -1) {
      out.host = rest.substr(0, firstNonHost);
      rest = rest.substr(firstNonHost);
    } else {
      out.host = rest;
      rest = '';
    }

    // pull out port.
    var p = parseHost(out.host);
    var keys = objectKeys(p);
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      out[key] = p[key];
    }

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    out.hostname = out.hostname || '';

    // validate a little.
    if (out.hostname.length > hostnameMaxLen) {
      out.hostname = '';
    } else {
      var hostparts = out.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            out.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    // hostnames are always lower case.
    out.hostname = out.hostname.toLowerCase();

    // IDNA Support: Returns a puny coded representation of "domain".
    // It only converts the part of the domain name that
    // has non ASCII characters. I.e. it dosent matter if
    // you call it with a domain that already is in ASCII.
    var domainArray = out.hostname.split('.');
    var newOut = [];
    for (var i = 0; i < domainArray.length; ++i) {
      var s = domainArray[i];
      newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
          'xn--' + punycode.encode(s) : s);
    }
    out.hostname = newOut.join('.');

    out.host = (out.hostname || '') +
        ((out.port) ? ':' + out.port : '');
    out.href += out.host;
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }

    // Now make sure that delims never appear in a url.
    var chop = rest.length;
    for (var i = 0, l = delims.length; i < l; i++) {
      var c = arrayIndexOf(rest, delims[i]);
      if (c !== -1) {
        chop = Math.min(c, chop);
      }
    }
    rest = rest.substr(0, chop);
  }


  // chop off from the tail first.
  var hash = arrayIndexOf(rest, '#');
  if (hash !== -1) {
    // got a fragment string.
    out.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = arrayIndexOf(rest, '?');
  if (qm !== -1) {
    out.search = rest.substr(qm);
    out.query = rest.substr(qm + 1);
    if (parseQueryString) {
      out.query = querystring.parse(out.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    out.search = '';
    out.query = {};
  }
  if (rest) out.pathname = rest;
  if (slashedProtocol[proto] &&
      out.hostname && !out.pathname) {
    out.pathname = '/';
  }

  //to support http.request
  if (out.pathname || out.search) {
    out.path = (out.pathname ? out.pathname : '') +
               (out.search ? out.search : '');
  }

  // finally, reconstruct the href based on what has been validated.
  out.href = urlFormat(out);
  return out;
}

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (typeof(obj) === 'string') obj = urlParse(obj);

  var auth = obj.auth || '';
  if (auth) {
    auth = auth.split('@').join('%40');
    for (var i = 0, l = nonAuthChars.length; i < l; i++) {
      var nAC = nonAuthChars[i];
      auth = auth.split(nAC).join(encodeURIComponent(nAC));
    }
    auth += '@';
  }

  var protocol = obj.protocol || '',
      host = (obj.host !== undefined) ? auth + obj.host :
          obj.hostname !== undefined ? (
              auth + obj.hostname +
              (obj.port ? ':' + obj.port : '')
          ) :
          false,
      pathname = obj.pathname || '',
      query = obj.query &&
              ((typeof obj.query === 'object' &&
                objectKeys(obj.query).length) ?
                 querystring.stringify(obj.query) :
                 '') || '',
      search = obj.search || (query && ('?' + query)) || '',
      hash = obj.hash || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (obj.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  return protocol + host + pathname + search + hash;
}

function urlResolve(source, relative) {
  return urlFormat(urlResolveObject(source, relative));
}

function urlResolveObject(source, relative) {
  if (!source) return relative;

  source = urlParse(urlFormat(source), false, true);
  relative = urlParse(urlFormat(relative), false, true);

  // hash is always overridden, no matter what.
  source.hash = relative.hash;

  if (relative.href === '') {
    source.href = urlFormat(source);
    return source;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    relative.protocol = source.protocol;
    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[relative.protocol] &&
        relative.hostname && !relative.pathname) {
      relative.path = relative.pathname = '/';
    }
    relative.href = urlFormat(relative);
    return relative;
  }

  if (relative.protocol && relative.protocol !== source.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      relative.href = urlFormat(relative);
      return relative;
    }
    source.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      relative.pathname = relPath.join('/');
    }
    source.pathname = relative.pathname;
    source.search = relative.search;
    source.query = relative.query;
    source.host = relative.host || '';
    source.auth = relative.auth;
    source.hostname = relative.hostname || relative.host;
    source.port = relative.port;
    //to support http.request
    if (source.pathname !== undefined || source.search !== undefined) {
      source.path = (source.pathname ? source.pathname : '') +
                    (source.search ? source.search : '');
    }
    source.slashes = source.slashes || relative.slashes;
    source.href = urlFormat(source);
    return source;
  }

  var isSourceAbs = (source.pathname && source.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host !== undefined ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (source.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = source.pathname && source.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = source.protocol &&
          !slashedProtocol[source.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // source.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {

    delete source.hostname;
    delete source.port;
    if (source.host) {
      if (srcPath[0] === '') srcPath[0] = source.host;
      else srcPath.unshift(source.host);
    }
    delete source.host;
    if (relative.protocol) {
      delete relative.hostname;
      delete relative.port;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      delete relative.host;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    source.host = (relative.host || relative.host === '') ?
                      relative.host : source.host;
    source.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : source.hostname;
    source.search = relative.search;
    source.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    source.search = relative.search;
    source.query = relative.query;
  } else if ('search' in relative) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      source.hostname = source.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = source.host && arrayIndexOf(source.host, '@') > 0 ?
                       source.host.split('@') : false;
      if (authInHost) {
        source.auth = authInHost.shift();
        source.host = source.hostname = authInHost.shift();
      }
    }
    source.search = relative.search;
    source.query = relative.query;
    //to support http.request
    if (source.pathname !== undefined || source.search !== undefined) {
      source.path = (source.pathname ? source.pathname : '') +
                    (source.search ? source.search : '');
    }
    source.href = urlFormat(source);
    return source;
  }
  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    delete source.pathname;
    //to support http.request
    if (!source.search) {
      source.path = '/' + source.search;
    } else {
      delete source.path;
    }
    source.href = urlFormat(source);
    return source;
  }
  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (source.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    source.hostname = source.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = source.host && arrayIndexOf(source.host, '@') > 0 ?
                     source.host.split('@') : false;
    if (authInHost) {
      source.auth = authInHost.shift();
      source.host = source.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (source.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  source.pathname = srcPath.join('/');
  //to support request.http
  if (source.pathname !== undefined || source.search !== undefined) {
    source.path = (source.pathname ? source.pathname : '') +
                  (source.search ? source.search : '');
  }
  source.auth = relative.auth || source.auth;
  source.slashes = source.slashes || relative.slashes;
  source.href = urlFormat(source);
  return source;
}

function parseHost(host) {
  var out = {};
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    out.port = port.substr(1);
    host = host.substr(0, host.length - port.length);
  }
  if (host) out.hostname = host;
  return out;
}

});

require.define("querystring",function(require,module,exports,__dirname,__filename,process,global){var isArray = typeof Array.isArray === 'function'
    ? Array.isArray
    : function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]'
    };

var objectKeys = Object.keys || function objectKeys(object) {
    if (object !== Object(object)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in object) if (object.hasOwnProperty(key)) keys[keys.length] = key;
    return keys;
}


/*!
 * querystring
 * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */

/**
 * Library version.
 */

exports.version = '0.3.1';

/**
 * Object#toString() ref for stringify().
 */

var toString = Object.prototype.toString;

/**
 * Cache non-integer test regexp.
 */

var notint = /[^0-9]/;

/**
 * Parse the given query `str`, returning an object.
 *
 * @param {String} str
 * @return {Object}
 * @api public
 */

exports.parse = function(str){
  if (null == str || '' == str) return {};

  function promote(parent, key) {
    if (parent[key].length == 0) return parent[key] = {};
    var t = {};
    for (var i in parent[key]) t[i] = parent[key][i];
    parent[key] = t;
    return t;
  }

  return String(str)
    .split('&')
    .reduce(function(ret, pair){
      try{
        pair = decodeURIComponent(pair.replace(/\+/g, ' '));
      } catch(e) {
        // ignore
      }

      var eql = pair.indexOf('=')
        , brace = lastBraceInKey(pair)
        , key = pair.substr(0, brace || eql)
        , val = pair.substr(brace || eql, pair.length)
        , val = val.substr(val.indexOf('=') + 1, val.length)
        , parent = ret;

      // ?foo
      if ('' == key) key = pair, val = '';

      // nested
      if (~key.indexOf(']')) {
        var parts = key.split('[')
          , len = parts.length
          , last = len - 1;

        function parse(parts, parent, key) {
          var part = parts.shift();

          // end
          if (!part) {
            if (isArray(parent[key])) {
              parent[key].push(val);
            } else if ('object' == typeof parent[key]) {
              parent[key] = val;
            } else if ('undefined' == typeof parent[key]) {
              parent[key] = val;
            } else {
              parent[key] = [parent[key], val];
            }
          // array
          } else {
            obj = parent[key] = parent[key] || [];
            if (']' == part) {
              if (isArray(obj)) {
                if ('' != val) obj.push(val);
              } else if ('object' == typeof obj) {
                obj[objectKeys(obj).length] = val;
              } else {
                obj = parent[key] = [parent[key], val];
              }
            // prop
            } else if (~part.indexOf(']')) {
              part = part.substr(0, part.length - 1);
              if(notint.test(part) && isArray(obj)) obj = promote(parent, key);
              parse(parts, obj, part);
            // key
            } else {
              if(notint.test(part) && isArray(obj)) obj = promote(parent, key);
              parse(parts, obj, part);
            }
          }
        }

        parse(parts, parent, 'base');
      // optimize
      } else {
        if (notint.test(key) && isArray(parent.base)) {
          var t = {};
          for(var k in parent.base) t[k] = parent.base[k];
          parent.base = t;
        }
        set(parent.base, key, val);
      }

      return ret;
    }, {base: {}}).base;
};

/**
 * Turn the given `obj` into a query string
 *
 * @param {Object} obj
 * @return {String}
 * @api public
 */

var stringify = exports.stringify = function(obj, prefix) {
  if (isArray(obj)) {
    return stringifyArray(obj, prefix);
  } else if ('[object Object]' == toString.call(obj)) {
    return stringifyObject(obj, prefix);
  } else if ('string' == typeof obj) {
    return stringifyString(obj, prefix);
  } else {
    return prefix;
  }
};

/**
 * Stringify the given `str`.
 *
 * @param {String} str
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyString(str, prefix) {
  if (!prefix) throw new TypeError('stringify expects an object');
  return prefix + '=' + encodeURIComponent(str);
}

/**
 * Stringify the given `arr`.
 *
 * @param {Array} arr
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyArray(arr, prefix) {
  var ret = [];
  if (!prefix) throw new TypeError('stringify expects an object');
  for (var i = 0; i < arr.length; i++) {
    ret.push(stringify(arr[i], prefix + '[]'));
  }
  return ret.join('&');
}

/**
 * Stringify the given `obj`.
 *
 * @param {Object} obj
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyObject(obj, prefix) {
  var ret = []
    , keys = objectKeys(obj)
    , key;
  for (var i = 0, len = keys.length; i < len; ++i) {
    key = keys[i];
    ret.push(stringify(obj[key], prefix
      ? prefix + '[' + encodeURIComponent(key) + ']'
      : encodeURIComponent(key)));
  }
  return ret.join('&');
}

/**
 * Set `obj`'s `key` to `val` respecting
 * the weird and wonderful syntax of a qs,
 * where "foo=bar&foo=baz" becomes an array.
 *
 * @param {Object} obj
 * @param {String} key
 * @param {String} val
 * @api private
 */

function set(obj, key, val) {
  var v = obj[key];
  if (undefined === v) {
    obj[key] = val;
  } else if (isArray(v)) {
    v.push(val);
  } else {
    obj[key] = [v, val];
  }
}

/**
 * Locate last brace in `str` within the key.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function lastBraceInKey(str) {
  var len = str.length
    , brace
    , c;
  for (var i = 0; i < len; ++i) {
    c = str[i];
    if (']' == c) brace = false;
    if ('[' == c) brace = true;
    if ('=' == c && !brace) return i;
  }
}

});

require.define("https",function(require,module,exports,__dirname,__filename,process,global){module.exports = require('http');

});

require.define("tls",function(require,module,exports,__dirname,__filename,process,global){// todo

});

require.define("/node_modules/async/package.json",function(require,module,exports,__dirname,__filename,process,global){module.exports = {"main":"./index"}
});

require.define("/node_modules/async/index.js",function(require,module,exports,__dirname,__filename,process,global){// This file is just added for convenience so this repository can be
// directly checked out into a project's deps folder
module.exports = require('./lib/async');

});

require.define("/node_modules/async/lib/async.js",function(require,module,exports,__dirname,__filename,process,global){/*global setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root = this,
        previous_async = root.async;

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = async;
    }
    else {
        root.async = async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    //// cross-browser compatiblity functions ////

    var _forEach = function (arr, iterator) {
        if (arr.forEach) {
            return arr.forEach(iterator);
        }
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function (arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _forEach(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function (arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _forEach(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function (obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !(process.nextTick)) {
        async.nextTick = function (fn) {
            setTimeout(fn, 0);
        };
    }
    else {
        async.nextTick = process.nextTick;
    }

    async.forEach = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _forEach(arr, function (x) {
            iterator(x, function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed === arr.length) {
                        callback(null);
                    }
                }
            });
        });
    };

    async.forEachSeries = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function () {
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed === arr.length) {
                        callback(null);
                    }
                    else {
                        iterate();
                    }
                }
            });
        };
        iterate();
    };

    async.forEachLimit = function (arr, limit, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length || limit <= 0) {
            return callback();
        }
        var completed = 0;
        var started = 0;
        var running = 0;

        (function replenish () {
            if (completed === arr.length) {
                return callback();
            }

            while (running < limit && started < arr.length) {
                started += 1;
                running += 1;
                iterator(arr[started - 1], function (err) {
                    if (err) {
                        callback(err);
                        callback = function () {};
                    }
                    else {
                        completed += 1;
                        running -= 1;
                        if (completed === arr.length) {
                            callback();
                        }
                        else {
                            replenish();
                        }
                    }
                });
            }
        })();
    };


    var doParallel = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.forEach].concat(args));
        };
    };
    var doSeries = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.forEachSeries].concat(args));
        };
    };


    var _asyncMap = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (err, v) {
                results[x.index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);


    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.forEachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function (eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function () {};
                }
                else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.forEach(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.forEach(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                var fn = function (left, right) {
                    var a = left.criteria, b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {};
        var keys = _keys(tasks);
        if (!keys.length) {
            return callback(null);
        }

        var results = {};

        var listeners = [];
        var addListener = function (fn) {
            listeners.unshift(fn);
        };
        var removeListener = function (fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function () {
            _forEach(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (_keys(results).length === keys.length) {
                callback(null, results);
                callback = function () {};
            }
        });

        _forEach(keys, function (k) {
            var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];
            var taskCallback = function (err) {
                if (err) {
                    callback(err);
                    // stop subsequent errors hitting callback multiple times
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    taskComplete();
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function () {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                var listener = function () {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {};
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function (iterator) {
            return function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    async.nextTick(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    async.parallel = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            async.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.forEach(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.forEachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function (index) {
            var fn = function () {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(
                null, args.concat(Array.prototype.slice.call(arguments))
            );
        };
    };

    var _concat = function (eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.whilst(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.until(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.queue = function (worker, concurrency) {
        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            push: function (data, callback) {
                if(data.constructor !== Array) {
                    data = [data];
                }
                _forEach(data, function(task) {
                    q.tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    if (q.saturated && q.tasks.length == concurrency) {
                        q.saturated();
                    }
                    async.nextTick(q.process);
                });
            },
            process: function () {
                if (workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if(q.empty && q.tasks.length == 0) q.empty();
                    workers += 1;
                    worker(task.data, function () {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if(q.drain && q.tasks.length + workers == 0) q.drain();
                        q.process();
                    });
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            }
        };
        return q;
    };

    var _console_fn = function (name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _forEach(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                callback.apply(null, memo[key]);
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
      return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    };

}());

});

require.define("/node_modules/underscore/package.json",function(require,module,exports,__dirname,__filename,process,global){module.exports = {"main":"underscore.js"}
});

require.define("/node_modules/underscore/underscore.js",function(require,module,exports,__dirname,__filename,process,global){//     Underscore.js 1.4.2
//     http://underscorejs.org
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      unshift          = ArrayProto.unshift,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root['_'] = _;
  }

  // Current version.
  _.VERSION = '1.4.2';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    return results;
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return arguments.length > 2 ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    each(obj, function(value, index, list) {
      if (!iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    var found = false;
    if (obj == null) return found;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    found = any(obj, function(value) {
      return value === target;
    });
    return found;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    return _.map(obj, function(value) {
      return (_.isFunction(method) ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // with specific `key:value` pairs.
  _.where = function(obj, attrs) {
    if (_.isEmpty(attrs)) return [];
    return _.filter(obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (obj.length === +obj.length) return slice.call(obj);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, function(value){ return !!value; });
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Binding with arguments is also known as `curry`.
  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.
  // We check for `func.bind` first, to fail fast when `func` is undefined.
  _.bind = function bind(func, context) {
    var bound, args;
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length == 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, throttling, more, result;
    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);
    return function() {
      context = this; args = arguments;
      var later = function() {
        timeout = null;
        if (more) {
          result = func.apply(context, args);
        }
        whenDone();
      };
      if (!timeout) timeout = setTimeout(later, wait);
      if (throttling) {
        more = true;
      } else {
        throttling = true;
        result = func.apply(context, args);
      }
      whenDone();
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        if (obj[prop] == null) obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent, but `Object`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return _.isNumber(obj) && isFinite(obj);
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    for (var i = 0; i < n; i++) iterator.call(context, i);
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + (0 | Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = idCounter++;
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });
      source +=
        escape ? "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'" :
        interpolate ? "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'" :
        evaluate ? "';\n" + evaluate + "\n__p+='" : '';
      index = offset + match.length;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);

});

require.define("/lib/helpers.js",function(require,module,exports,__dirname,__filename,process,global){var request = require('request');
var async = require('async');
var _ =require('underscore');
var async_max=10;//the hardest we will ever concurrently hit freebase


//non-front-facing methods that are used for the freebase javascript package

var fns={}


  //originally by david huynh 2010, http://www.freebase.com/appeditor/#!path=//cubed.dfhuynh.user.dev/index
  //Algorithm is adopted from
  //http://www.csse.monash.edu.au/~damian/papers/HTML/Plurals.html
  fns.singularize= function(text) {
    if(text.match(' ')) { //multiple words
      var words = text.split(' ');
      var last = words[words.length - 1];
      var firsts = words.slice(0, -1);
      return firsts.join(" ") + ' ' + fns.singularize(last);
    }
    var prepositions = {
      "about": 1,
      "above": 1,
      "across": 1,
      "after": 1,
      "against": 1,
      "along": 1,
      "among": 1,
      "around": 1,
      "at": 1,
      "before": 1,
      "behind": 1,
      "below": 1,
      "beneath": 1,
      "beside": 1,
      "between": 1,
      "beyond": 1,
      "but": 1,
      "by": 1,
      "despite": 1,
      "down": 1,
      "during": 1,
      "except": 1,
      "for": 1,
      "from": 1,
      "in": 1,
      "inside": 1,
      "into": 1,
      "like": 1,
      "near": 1,
      "of": 1,
      "off": 1,
      "on": 1,
      "onto": 1,
      "out": 1,
      "outside": 1,
      "over": 1,
      "past": 1,
      "since": 1,
      "through": 1,
      "throughout": 1,
      "till": 1,
      "to": 1,
      "toward": 1,
      "under": 1,
      "underneath": 1,
      "until": 1,
      "up": 1,
      "upon": 1,
      "with": 1,
      "within": 1,
      "without": 1
    };
    var userDefinedNouns = [{
      "p": "people",
      "s": "person"
    }, {
      "p": "tornadoes",
      "s": "tornado"
    }, {
      "p": "churches",
      "s": "church"
    }, {
      "p": "countries",
      "s": "country"
    }, {
      "p": "cities",
      "s": "city"
    }, {
      "p": "companies",
      "s": "company"
    }, {
      "p": "monkies",
      "s": "monkey"
    }, {
      "p": "donkies",
      "s": "donkey"
    }, {
      "p": "mysteries",
      "s": "mystery"
    }, {
      "p": "authors",
      "s": "author"
    }];

    // Table A.1
    var irregularNouns = {
      "beef": {
        anglicized: "beefs",
        classical: "beeves"
      },
      "brother": {
        anglicized: "brothers",
        classical: "brethren"
      },
      "child": {
        anglicized: null,
        classical: "children"
      },
      "cow": {
        anglicized: null,
        classical: "kine"
      },
      "ephemeris": {
        anglicized: null,
        classical: "ephemerides"
      },
      "genie": {
        anglicized: null,
        classical: "genii"
      },
      "money": {
        anglicized: "moneys",
        classical: "monies"
      },
      "mongoose": {
        anglicized: "mongooses",
        classical: null
      },
      "mythos": {
        anglicized: null,
        classical: "mythoi"
      },
      "octopus": {
        anglicized: "octopuses",
        classical: "octopodes"
      },
      "ox": {
        anglicized: null,
        classical: "oxen"
      },
      "soliloquy": {
        anglicized: "soliloquies",
        classical: null
      },
      "trilby": {
        anglicized: "trilbys",
        classical: null
      }
    };

    var uninflectedSuffixes = ["fish", "ois", "sheep", "deer", "pox", "itis"];

    // Table A.2
    var uninflectedNouns = {
      "bison": 1,
      "flounder": 1,
      "pliers": 1,
      "bream": 1,
      "gallows": 1,
      "proceedings": 1,
      "breeches": 1,
      "graffiti": 1,
      "rabies": 1,
      "britches": 1,
      "headquarters": 1,
      "salmon": 1,
      "carp": 1,
      "herpes": 1,
      "scissors": 1,
      "chassis": 1,
      "high-jinks": 1,
      "sea-bass": 1,
      "seabass": 1,
      "clippers": 1,
      "homework": 1,
      "series": 1,
      "cod": 1,
      "innings": 1,
      "shears": 1,
      "contretemps": 1,
      "jackanapes": 1,
      "species": 1,
      "corps": 1,
      "mackerel": 1,
      "swine": 1,
      "debris": 1,
      "measles": 1,
      "trout": 1,
      "diabetes": 1,
      "mews": 1,
      "tuna": 1,
      "djinn": 1,
      "mumps": 1,
      "whiting": 1,
      "eland": 1,
      "news": 1,
      "wildebeest": 1,
      "elk": 1,
      "pincers": 1,

      "moose": 1,
      "shrimp": 1,
      "hoi polloi": 1,
      "riffraff": 1,
      "rabble": 1
    };
    var inflectionCategories = [{ // Table A.10
      from: "a",
      to: "ae",
      words: ["alumna", "alga", "vertebra"]
    }, {
      // Table A.11
      from: "a",
      anglicized: "as",
      classical: "ae",
      words: ["abscissa", "amoeba", "antenna", "aurora", "formula", "hydra", "hyperbola", "lacuna", "medusa", "nebula", "nova", "parabola"]
    }, {
      // Table A.12
      from: "a",
      anglicized: "as",
      classical: "ata",
      words: ["anathema", "bema", "carcinoma", "charisma", "diploma", "dogma", "drama", "edema", "enema", "enigma", "gumma", "lemma", "lymphoma", "magma", "melisma", "miasma", "oedema", "sarcoma", "schema", "soma", "stigma", "stoma", "trauma"]
    }, {
      // Table A.13
      from: "en",
      anglicized: "ens",
      classical: "ina",
      words: ["stamen", "foramen", "lumen"]
    }, {
      // Table A.14
      from: "ex",
      to: "ices",
      words: ["codex", "murex", "silex"]
    }, {
      // Table A.15
      from: "ex",
      anglicized: "exes",
      classical: "ices",
      words: ["apex", "cortex", "index", "latex", "pontifex", "simplex", "vertex", "vortex"]
    }, {
      // Table A.16
      from: "is",
      anglicized: "ises",
      classical: "ides",
      words: ["iris", "clitoris"]
    }, {
      // Table A.17
      from: "o",
      to: "os",
      words: ["albino", "archipelago", "armadillo", "commando", "ditto", "dynamo", "embryo", "fiasco", "generalissimo", "ghetto", "guano", "inferno", "jumbo", "lingo", "lumbago", "magneto", "manifesto", "medico", "octavo", "photo", "pro", "quarto", "rhino", "stylo"]
    }, {
      // Table A.18
      from: "o",
      anglicized: "os",
      classical: "i",
      words: ["alto", "basso", "canto", "contralto", "crescendo", "solo", "soprano", "tempo"]
    }, {
      // Table A.19
      from: "on",
      to: "a",
      words: ["aphelion", "asyndeton", "criterion", "hyperbaton", "noumenon", "organon", "perihelion", "phenomenon", "prolegomenon"]
    }, {
      // Table A.20
      from: "um",
      to: "a",
      words: ["agendum", "bacterium", "candelabrum", "datum", "desideratum", "erratum", "extremum", "stratum", "ovum"]
    }, {
      // Table A.21
      from: "um",
      anglicized: "ums",
      classical: "a",
      words: ["aquarium", "compendium", "consortium", "cranium", "curriculum", "dictum", "emporium", "enconium", "gymnasium", "honorarium", "interregnum", "lustrum", "maximum", "medium", "memorandum", "millenium", "minimum", "momentum", "optimum", "phylum", "quantum", "rostrum", "spectrum", "speculum", "stadium", "trapezium", "ultimatum", "vacuum", "velum"]
    }, {
      // Table A.22
      from: "us",
      anglicized: "uses",
      classical: "i",
      words: ["focus", "fungus", "genius", "incubus", "nimbus", "nucleolus", "radius", "stylus", "succubus", "torus", "umbilicus", "uterus"]
    }, {
      // Table A.23
      from: "us",
      anglicized: "uses",
      classical: "us",
      words: ["apparatus", "cantus", "coitus", "hiatus", "impetus", "nexus", "plexus", "prospectus", "sinus", "status"]
    }, {
      // Table A.24
      from: "",
      to: "i",
      words: ["afreet", "afrit", "efreet"]
    }, {
      // Table A.25
      from: "",
      to: "im",
      words: ["cherub", "goy", "geraph"]
    }];

    function suffix(text, s) {
      return text.length >= s.length && text.substring(text.length - s.length) == s;
    }

    function capIfCap(s, s2) {
      if(typeof s == "string") {
        var isCap = s2.charAt(0).toLowerCase() != s2.charAt(0);
        return isCap ? (s.charAt(0).toUpperCase() + s.substr(1)) : s;
      } else {
        var a = [];
        for(var i in s) {
          var s3 = s[i];
          a.push(capIfCap(s3, s2));
        }
        return a;
      }
    }
    function inflection(text, from, to) {
      return text.substring(0, text.length - from.length) + to;
    }
    function isOneOf(c, chars) {
      return chars.indexOf(c) >= 0;
    }
    function isVowel(c) {
      return isOneOf(c, "aeiou");
    }
    var text2 = text.toLowerCase();
    for(var o in userDefinedNouns) {
      if(userDefinedNouns[o].p == text) {
        return userDefinedNouns[o].s;
      }
    }
    for(var singular in irregularNouns) {
      var entry = irregularNouns[singular];
      if(entry.anglicized === text2 || entry.classical === text2) {
        return capIfCap(singular, text);
      }
    }
    for(var s in uninflectedSuffixes) {
      if(suffix(text2, s)) {
        return text;
      }
    }
    if(uninflectedNouns && uninflectedNouns[text2]) {
      return text;
    }
    var checkWords = function(from, to, words) {
      if(suffix(text, to)) {
        var prefix = text.substring(text.length - to.length);
        var text3 = prefix + entry.from;
        for(var word in words) {
          if(text3 === word) {
            return capIfCap(text3, text);
          }
        }
      }
      return null;
    }
    for(var e in inflectionCategories) {
      var entry = inflectionCategories[e];
      var text3 = ("to" in entry && checkWords(entry.from, entry.to, entry.words)) || ("anglicized" in entry && checkWords(entry.from, entry.anglicized, entry.words)) || ("classical" in entry && checkWords(entry.from, entry.classical, entry.words));

      if(text3 != null && typeof text3 == "string") {
        return text3;
      }
    }
    for(var prep in prepositions) {
      var n = text.indexOf(" " + prep + " ");
      if(n > 0) {
        var prefix = text.substring(0, n);
        var r = singularize(prefix);
        if(r != null) {
          return r + " " + prep + " " + text.substr(n + prep.length + 2);
        } else {
          return null;
        }
      }
      n = text.indexOf("-" + prep + "-");
      if(n > 0) {
        var prefix = text.substring(0, n);
        var r = singularize(prefix);
        if(r != null) {
          return r + "-" + prep + "-" + text.substr(n + prep.length + 2);
        } else {
          return null;
        }
      }
    }
    var j = text.lastIndexOf(" ");
    if(j > 0) {
      var r = singularize(text.substring(j + 1));
      if(r != null) {
        return text.substring(0, j + 1) + r;
      } else {
        return null;
      }
    }
    if(suffix(text, "xes") || suffix(text, "ses")) {
      return text.substring(0, text.length - 2);
    }
    if(suffix(text, "s") && !suffix(text, "ss")) {
      return text.substring(0, text.length - 1);
    }
    return text;
  }
  //console.log(fns.singularize("george soros"));
  //console.log(fns.singularize("mama cass"));


  //by spencer kelly (@spencermountain)
  fns.sentenceparser= function(text) {
    var tmp = text.split(/(\S.+?[.])(?=\s+|$)/g);
    var sentences = [];
    //join acronyms, titles
    for(var i in tmp) {
      if(tmp[i]) {
        tmp[i] = tmp[i].replace(/^\s+|\s+$/g, ''); //trim extra whitespace
        //join common abbreviations + acronyms
        if(tmp[i].match(/(^| )(mr|dr|llb|md|bl|phd|ma|ba|mrs|miss|misses|mister|sir|esq|mstr|jr|sr|st|lit|inc|fl|ex|eg|jan|feb|mar|apr|jun|aug|sept?|oct|nov|dec)\. ?$/i) || tmp[i].match(/[ |\.][a-z]\.?$/i)) {
          tmp[parseInt(i) + 1] = tmp[i] + ' ' + tmp[parseInt(i) + 1];
        } else {
          sentences.push(tmp[i]);
          tmp[i] = '';
        }
      }
    }
    //cleanup afterwards
    var clean = [];
    for(var i in sentences) {
      sentences[i] = sentences[i].replace(/^\s+|\s+$/g, ''); //trim extra whitespace
      if(sentences[i]) {
        clean.push(sentences[i]);
      }
    }
    return clean;
  }
  //console.log(fns.sentenceparser('Dr. calm is me. lkj'))

  //remove objects with a duplicate field from json
  fns.json_unique= function(x, field) {
    var newArray = new Array();
    label: for(var i = 0; i < x.length; i++) {
      for(var j = 0; j < newArray.length; j++) {
        if(newArray[j] && x[i] && newArray[j][field] == x[i][field]) continue label;
      }
      newArray[newArray.length] = x[i];
    }
    return newArray;
  }



  //handle rate-limited asynchronous freebase calls with a ending callback
  fns.doit_async= function(arr, fn, options, done) {
    //wrap them all in functions
    var function_list = arr.map(function(r,i) {
      return function(callback) {
        fn(r, options, function(r) {
          if(options.each_time){
            options.each_time(r, i)
          }
          callback(null, r);
        })
      }
    })
    //groups of async tasks in a synchonous task
    var all = fns.groups_of(function_list, async_max).map(function(f_group) {
      return function(callback) {
        async.parallel(f_group, callback);
      }
    })
    async.series(all, function(err, result) {
      //flatten it one level
      result=result.reduce(function(a, b) {
          return a.concat(b);
      });
      done(result)
    });
  }







  //turn freebase's silly $00 encoding into unicode
  fns.mql_unencode= function(x) {
    x = x.replace(/\$([0-9A-Fa-f]{4})/g, function(a, b) {
      return String.fromCharCode(parseInt(b, 16));
    });
    return x;
  }
  //console.log(fns.mql_unencode("K$00F6ppen_climate_classification"))


  //turn an array into smaller groups of arrays
  fns.groups_of= function(arr, group_length) {
    var all = []
    for(var i in arr) {
      if(i % group_length == 0) {
        all.push([arr[i]])
      } else {
        all[all.length - 1].push(arr[i])
      }
    }
    return all
  }

  fns.parseurl= function(str) {
    var o = {
      strictMode: false,
      key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
      q: {
        name: "queryKey",
        parser: /(?:^|&)([^&=]*)=?([^&]*)/g
      },
      parser: {
        strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
        loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
      }
    },
    m = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
    uri = {},
    i = 14;
    while(i--) uri[o.key[i]] = m[i] || "";
    uri[o.q.name] = {};
    uri[o.key[12]].replace(o.q.parser, function($0, $1, $2) {
      if($1) uri[o.q.name][$1] = $2;
    });
    return uri;
  }

  //turn options object into get paramaters
  fns.set_params= function(o) {
    var options=o;
    if(!options) {
      return ''
    }
    return Object.keys(options).map(function(v) {
      var val=options[v];
      if(_.isArray(options[v]) || _.isObject(options[v])) {
        val = encodeURIComponent(JSON.stringify(options[v]));
      }
      return v + '=' + val
    }).join('&')
  }



  fns.http= function(url, callback) {
    if(!url) {
      return callback({
        error: "bad url"
      })
    }
    request({
      uri: url,
      headers: {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:10.0) Gecko/20100101 Firefox/10.0"
      }
    }, function(error, response, body) {
      try {
        body = JSON.parse(body)
      } catch(e) {
        console.log(e)
        process.exit(0)
      }
      if(error || response.statusCode != 200) {
        console.log(error)
        process.exit(0)
        return callback({
          error: error
        })
      }
      return callback(body);
    })
  }

  fns.isin= function(word, arr) {
    return arr.some(function(v) {
      return v == word
    })
  }

module.exports=fns;
});

require.define("/lib/data.js",function(require,module,exports,__dirname,__filename,process,global){exports.data={
  "boring": [
    "/type/object/attribution",
    "/type/object/key",
    "/type/object/mid",
    "/common/topic/notable_properties",
    "/type/object/guid",
    "/type/object/type",
    "/type/object/id",
    "/type/object/creator",
    "/type/object/timestamp",
    "/type/object/permission",
    "/common/topic/alias",
    "/common/topic/article",
    "/common/topic/image",
    "/common/topic/notable_for",
    "/common/topic/notable_types",
    "/common/topic/official_website",
    "/common/topic/topic_equivalent_webpage",
    "/common/topic/topical_webpage",
    "/travel/travel_destination_monthly_climate/month",
    "/location/religion_percentage/religion"
  ],
  "sentence_grammars": [
    {
      "property": "/book/book_subject/works",
      "sentence form": "obj is about subj"
    },
    {
      "property": "/food/food/nutrients/food/nutrition_fact/nutrient",
      "sentence form": "obj is found in subj"
    },
    {
      "property": "/food/ingredient/dishes",
      "sentence form": "obj contains subj"
    },
    {
      "property": "/food/ingredient/incompatible_with_dietary_restrictions",
      "sentence form": "obj does not allow subj"
    },
    {
      "property": "/food/ingredient/more_specific_ingredient",
      "sentence form": "obj is in subj"
    },
    {
      "property": "/media_common/quotation_subject/quotations_about_this_subject",
      "sentence form": "obj is a riddle in subj"
    },
    {
      "property": "/medicine/drug_dosage_flavor/drugs_with_this_flavor",
      "sentence form": "obj has the flavour of subj"
    },
    {
      "property": "/award/award_nominee/award_nominations/award/award_nomination/award",
      "sentence form": "subj won the obj"
    },
    {
      "property": "/award/award_nominee/award_nominations/award/award_nomination/nominated_for",
      "sentence form": "subj received an award nomination for obj"
    },
    {
      "property": "/award/award_winner/awards_won/award/award_honor/award",
      "sentence form": "subj won the obj"
    },
    {
      "property": "/award/award_winner/awards_won/award/award_honor/award_winner",
      "sentence form": "obj won an award for subj"
    },
    {
      "property": "/celebrities/celebrity/celebrity_friends/celebrities/friendship/friend",
      "sentence form": "obj is a friend of subj"
    },
    {
      "property": "/film/actor/film/film/performance/film",
      "sentence form": "subj acted in obj"
    },
    {
      "property": "/film/person_or_entity_appearing_in_film/films/film/personal_film_appearance/film",
      "sentence form": "subj appeared in obj"
    },
    {
      "property": "/food/diet_follower/follows_diet",
      "sentence form": "subj is into subj"
    },
    {
      "property": "/music/artist/album",
      "sentence form": "obj is by subj"
    },
    {
      "property": "/music/artist/genre",
      "sentence form": "subj makes obj"
    },
    {
      "property": "/music/artist/label",
      "sentence form": "subj is signed onto obj"
    },
    {
      "property": "/music/artist/origin",
      "sentence form": "subj is from obj"
    },
    {
      "property": "/music/artist/track",
      "sentence form": "obj is by subj"
    },
    {
      "property": "/music/artist/track_contributions/music/track_contribution/role",
      "sentence form": "subj contributed to obj"
    },
    {
      "property": "/music/artist/track_contributions/music/track_contribution/track",
      "sentence form": "obj is by subj"
    },
    {
      "property": "/music/group_member/instruments_played",
      "sentence form": "subj plays obj"
    },
    {
      "property": "/music/group_member/membership/music/group_membership/group",
      "sentence form": "subj was in obj"
    },
    {
      "property": "/music/group_member/membership/music/group_membership/role",
      "sentence form": "subj plays obj"
    },
    {
      "property": "/people/person/children",
      "sentence form": "subj is parent to obj"
    },
    {
      "property": "/people/person/education/education/education/institution",
      "sentence form": "subj attended obj"
    },
    {
      "property": "/people/person/gender",
      "sentence form": "subj is obj"
    },
    {
      "property": "/people/person/nationality",
      "sentence form": "subj is from obj"
    },
    {
      "property": "/people/person/place_of_birth",
      "sentence form": "subj was born in obj"
    },
    {
      "property": "/people/person/places_lived/people/place_lived/location",
      "sentence form": "subj lived in obj"
    },
    {
      "property": "/people/person/profession",
      "sentence form": "subj is a obj"
    },
    {
      "property": "/people/person/sibling_s/people/sibling_relationship/sibling",
      "sentence form": "obj is a sibling of subj"
    },
    {
      "property": "/people/person/spouse_s/people/marriage/spouse",
      "sentence form": "obj is married to subj"
    },
    {
      "property": "/people/person/spouse_s/people/marriage/type_of_union",
      "sentence form": "subj is in a obj"
    },
    {
      "property": "/tv/tv_actor/guest_roles/tv/tv_guest_role/episodes_appeared_in",
      "sentence form": "subj appeared in obj"
    },
    {
      "property": "/architecture/building/building_function",
      "sentence form": "subj is a obj"
    },
    {
      "property": "/architecture/structure/address/location/mailing_address/citytown",
      "sentence form": "subj is in obj"
    },
    {
      "property": "/architecture/structure/architect",
      "sentence form": "subj was designed by obj"
    },
    {
      "property": "/architecture/structure/architectural_style",
      "sentence form": "subj is an example of obj"
    },
    {
      "property": "/architecture/structure/architecture_firm",
      "sentence form": "subj was designed by obj"
    },
    {
      "property": "/architecture/structure/owner/architecture/ownership/owner",
      "sentence form": "obj owns subj"
    },
    {
      "property": "/award/award_winning_work/awards_won/award/award_honor/award",
      "sentence form": "subj has won the obj"
    },
    {
      "property": "/location/location/containedby",
      "sentence form": "subj is in obj"
    },
    {
      "property": "/projects/project_focus/projects",
      "sentence form": "obj was part of subj"
    },
    {
      "property": "/travel/tourist_attraction/near_travel_destination",
      "sentence form": "subj is a destination in or near obj"
    },
    {
      "property": "/book/written_work/subjects",
      "sentence form": "subj books are about obj"
    },
    {
      "property": "/film/film_subject/films",
      "sentence form": "subj has been in obj"
    },
    {
      "property": "/film/music_contributor/film",
      "sentence form": "subj was featured in obj"
    },
    {
      "property": "/film/person_or_entity_appearing_in_film/films/film/personal_film_appearance/type_of_appearance",
      "sentence form": "subj has appeared in films about obj"
    },
    {
      "property": "/influence/influence_node/influenced",
      "sentence form": "subj influenced obj"
    },
    {
      "property": "/influence/influence_node/influenced_by",
      "sentence form": "subj was influenced by obj"
    },
    {
      "property": "/music/artist/concert_tours",
      "sentence form": "subj went on the obj"
    },
    {
      "property": "/music/composer/compositions",
      "sentence form": "obj is a composition by subj"
    },
    {
      "property": "/music/lyricist/lyrics_written",
      "sentence form": "obj contains lyrics by obj"
    },
    {
      "property": "/music/musical_group/member/music/group_membership/member",
      "sentence form": "obj is a member of subj"
    },
    {
      "property": "/music/producer/releases_produced",
      "sentence form": "subj produced obj"
    },
    {
      "property": "/music/producer/tracks_produced",
      "sentence form": "subj produced obj"
    },
    {
      "property": "/tv/tv_program_guest/appeared_on/tv/tv_guest_personal_appearance/episode",
      "sentence form": "subj appeared in obj"
    },
    {
      "property": "/film/film_location/featured_in_films",
      "sentence form": "subj was featured in obj"
    },
    {
      "property": "/location/location/contains",
      "sentence form": "obj is in subj"
    },
    {
      "property": "/location/location/events",
      "sentence form": "obj happened in subj"
    },
    {
      "property": "/location/location/nearby_airports",
      "sentence form": "obj is an airport in subj"
    },
    {
      "property": "/location/location/people_born_here",
      "sentence form": "obj was born in subj"
    },
    {
      "property": "/location/location/time_zones",
      "sentence form": "subj in the obj"
    },
    {
      "property": "/location/place_with_neighborhoods/neighborhoods",
      "sentence form": "obj is a neighbourhood in subj"
    },
    {
      "property": "/olympics/olympic_bidding_city/olympics_bid_on/olympics/olympic_city_bid/olympic_games",
      "sentence form": "subj was a bidder for the obj"
    },
    {
      "property": "/olympics/olympic_host_city/olympics_hosted",
      "sentence form": "subj hosted the obj"
    },
    {
      "property": "/organization/organization_scope/organizations_with_this_scope",
      "sentence form": "obj is an organisation in subj"
    },
    {
      "property": "/periodicals/newspaper_circulation_area/newspapers",
      "sentence form": "obj is popular in subj"
    },
    {
      "property": "/sports/sports_team_location/teams",
      "sentence form": "obj is a team from subj"
    },
    {
      "property": "/symbols/flag_referent/flag/symbols/flag_use/flag",
      "sentence form": "subj displays the obj"
    },
    {
      "property": "/travel/travel_destination/how_to_get_here/travel/transportation/mode_of_transportation",
      "sentence form": "You can reach subj by obj"
    },
    {
      "property": "/travel/travel_destination/how_to_get_here/travel/transportation/transport_terminus",
      "sentence form": "obj is an airport in subj"
    },
    {
      "property": "/travel/travel_destination/how_to_get_here/travel/transportation/transport_operator",
      "sentence form": "obj is tranport operator in subj"
    },
    {
      "property": "/travel/travel_destination/local_transportation",
      "sentence form": "obj is a mode of local transport in subj"
    },
    {
      "property": "/travel/travel_destination/tourist_attractions",
      "sentence form": "obj is a tourist attraction in subj"
    },
    {
      "property": "/award/hall_of_fame_inductee/hall_of_fame_inductions/award/hall_of_fame_induction/hall_of_fame",
      "sentence form": "subj was induced into the obj"
    },
    {
      "property": "/fictional_universe/fictional_character_creator/fictional_characters_created",
      "sentence form": "subj has played obj"
    },
    {
      "property": "/film/actor/film/film/performance/character",
      "sentence form": "subj has played obj"
    },
    {
      "property": "/film/actor/film/film/performance/special_performance_type",
      "sentence form": "obj is a special talent of subj"
    },
    {
      "property": "/film/film_story_contributor/film_story_credits",
      "sentence form": "subj appeared in obj"
    },
    {
      "property": "/film/producer/film",
      "sentence form": "subj produced obj"
    },
    {
      "property": "/film/writer/film",
      "sentence form": "subj wrote obj"
    },
    {
      "property": "/people/person/ethnicity",
      "sentence form": "subj is obj"
    },
    {
      "property": "/people/person/parents",
      "sentence form": "obj is a parent of subj"
    },
    {
      "property": "/tv/tv_actor/starring_roles/tv/regular_tv_appearance/character",
      "sentence form": "obj is a character played by subj"
    },
    {
      "property": "/tv/tv_actor/starring_roles/tv/regular_tv_appearance/special_performance_type",
      "sentence form": "subj is obj"
    },
    {
      "property": "/tv/tv_actor/starring_roles/tv/regular_tv_appearance/series",
      "sentence form": "subj appeared in obj"
    },
    {
      "property": "/tv/tv_personality/tv_regular_appearances/tv/tv_regular_personal_appearance/appearance_type",
      "sentence form": "subj has appeared as obj"
    },
    {
      "property": "/tv/tv_personality/tv_regular_appearances/tv/tv_regular_personal_appearance/program",
      "sentence form": "subj appeared in obj"
    },
    {
      "property": "/tv/tv_program_guest/appeared_on/tv/tv_guest_personal_appearance/appearance_type",
      "sentence form": "subj has appeared as obj"
    },
    {
      "property": "/tv/tv_writer/tv_programs/tv/tv_program_writer_relationship/tv_program",
      "sentence form": "subj was part of obj"
    },
    {
      "property": "/award/award_nominated_work/award_nominations/award/award_nomination/award",
      "sentence form": "subj was nominated for obj"
    },
    {
      "property": "/award/award_nominated_work/award_nominations/award/award_nomination/award_nominee",
      "sentence form": "obj had a leading role in subj"
    },
    {
      "property": "/award/award_winning_work/awards_won/award/award_honor/award_winner",
      "sentence form": "obj has been awarded for subj"
    },
    {
      "property": "/award/ranked_item/appears_in_ranked_lists/award/ranking/list",
      "sentence form": "subj is a top rated in obj"
    },
    {
      "property": "/film/film/cinematography",
      "sentence form": "obj worked on subj"
    },
    {
      "property": "/film/film/costume_design_by",
      "sentence form": "obj designed costumes for subj"
    },
    {
      "property": "/film/film/country",
      "sentence form": "obj is the country of origin of subj"
    },
    {
      "property": "/film/film/directed_by",
      "sentence form": "subj was directed by obj"
    },
    {
      "property": "/film/film/distributors/film/film_film_distributor_relationship/distributor",
      "sentence form": "obj distributed subj"
    },
    {
      "property": "/film/film/distributors/film/film_film_distributor_relationship/film_distribution_medium",
      "sentence form": "obj was a distribution stream for subj"
    },
    {
      "property": "/film/film/edited_by",
      "sentence form": "subj was edited by obj"
    },
    {
      "property": "/film/film/executive_produced_by",
      "sentence form": "subj was executive produced by obj"
    },
    {
      "property": "/film/film/featured_film_locations",
      "sentence form": "subj was set in obj"
    },
    {
      "property": "/film/film/film_art_direction_by",
      "sentence form": "subj was art directed by obj"
    },
    {
      "property": "/film/film/film_casting_director",
      "sentence form": "obj was the casting director for subj"
    },
    {
      "property": "/film/film/film_collections",
      "sentence form": "subj is part of obj"
    },
    {
      "property": "/film/film/film_festivals",
      "sentence form": "subj appeared in obj"
    },
    {
      "property": "/film/film/film_production_design_by",
      "sentence form": "obj was the production designer for subj"
    },
    {
      "property": "/film/film/film_set_decoration_by",
      "sentence form": "obj was the set decorator for "
    },
    {
      "property": "/film/film/genre",
      "sentence form": "the genre for subj is obj"
    },
    {
      "property": "/film/film/language",
      "sentence form": "subj is in obj"
    },
    {
      "property": "/film/film/other_crew/film/film_crew_gig/crewmember",
      "sentence form": "obj was a crew member in subj"
    },
    {
      "property": "/film/film/produced_by",
      "sentence form": "subj was produced by obj"
    },
    {
      "property": "/film/film/rating",
      "sentence form": "subj is rated obj"
    },
    {
      "property": "/film/film/release_date_s/film/film_regional_release_date/film_regional_debut_venue",
      "sentence form": "subj debuted in obj"
    },
    {
      "property": "/film/film/release_date_s/film/film_regional_release_date/film_release_region",
      "sentence form": "subj was first shown in obj"
    },
    {
      "property": "/film/film/release_date_s/film/film_regional_release_date/film_release_distribution_medium",
      "sentence form": "the distribution for subj was obj"
    },
    {
      "property": "/film/film/runtime/film/film_cut/film_release_region",
      "sentence form": "subj was released in obj"
    },
    {
      "property": "/film/film/runtime/film/film_cut/type_of_film_cut",
      "sentence form": "there is a obj of subj"
    },
    {
      "property": "/film/film/soundtrack",
      "sentence form": "obj is the soundtrack of subj"
    },
    {
      "property": "/film/film/starring/film/performance/actor",
      "sentence form": "obj acted in subj"
    },
    {
      "property": "/film/film/starring/film/performance/character",
      "sentence form": "obj acted in subj"
    },
    {
      "property": "/film/film/story_by",
      "sentence form": "subj is a story by obj"
    },
    {
      "property": "/film/film/written_by",
      "sentence form": "subj was written by obj"
    },
    {
      "property": "/media_common/netflix_title/netflix_genres",
      "sentence form": "subj is in the Netflix genre of obj"
    },
    {
      "property": "/biology/animal_owner/animals_owned/biology/animal_ownership/animal",
      "sentence form": "subj has a pet named obj"
    },
    {
      "property": "/book/author/works_written",
      "sentence form": "subj is the author of obj"
    },
    {
      "property": "/celebrities/celebrity/celebrity_rivals/celebrities/rivalry/rival",
      "sentence form": "obj is a rival of subj"
    },
    {
      "property": "/celebrities/celebrity/net_worth/measurement_unit/dated_money_value/currency",
      "sentence form": "obj is the currency subj gets paid in"
    },
    {
      "property": "/celebrities/celebrity/sexual_relationships/celebrities/romantic_relationship/celebrity",
      "sentence form": "obj has been in a relationship with subj"
    },
    {
      "property": "/celebrities/celebrity/sexual_relationships/celebrities/romantic_relationship/relationship_type",
      "sentence form": "obj is a type of relationship for obj"
    },
    {
      "property": "/fictional_universe/person_in_fiction/representations_in_fiction",
      "sentence form": "obj represents subj"
    },
    {
      "property": "/medicine/notable_person_with_medical_condition/condition",
      "sentence form": "obj is a condition subj has"
    },
    {
      "property": "/people/person/employment_history/business/employment_tenure/company",
      "sentence form": "subj has been managed by obj"
    },
    {
      "property": "/people/person/quotations",
      "sentence form": "obj is a famous quotation by subj"
    },
    {
      "property": "/people/person/religion",
      "sentence form": "obj is a subj"
    },
    {
      "property": "/symbols/name_source/namesakes",
      "sentence form": "obj is subj"
    },
    {
      "property": "/symbols/namesake/named_after",
      "sentence form": "subj was named after obj"
    },
    {
      "property": "/tv/tv_actor/guest_roles/tv/tv_guest_role/character",
      "sentence form": "obj was a guest role character by subj"
    },
    {
      "property": "/tv/tv_subject/tv_episodes",
      "sentence form": "obj has been in many tv episodes by subj"
    },
    {
      "property": "/business/business_location/parent_company",
      "sentence form": "obj has a branch in subj"
    },
    {
      "property": "/fictional_universe/fictional_setting/characters_that_have_lived_here",
      "sentence form": "obj has lived in subj"
    },
    {
      "property": "/fictional_universe/fictional_setting/fictional_characters_born_here",
      "sentence form": "obj was born in subj"
    },
    {
      "property": "/fictional_universe/fictional_setting/universe",
      "sentence form": "obj was set in subj"
    },
    {
      "property": "/government/governmental_jurisdiction/government_bodies",
      "sentence form": "obj is a government body of subj"
    },
    {
      "property": "/location/capital_of_administrative_division/capital_of/location/administrative_division_capital_relationship/administrative_division",
      "sentence form": "subj is in obj"
    },
    {
      "property": "/location/citytown/postal_codes",
      "sentence form": "obj is a postal code in subj"
    },
    {
      "property": "/location/location/adjoin_s/location/adjoining_relationship/adjoins",
      "sentence form": "obj is near subj"
    },
    {
      "property": "/location/location/partially_containedby",
      "sentence form": "obj is in subj"
    },
    {
      "property": "/tv/tv_location/tv_shows_filmed_here",
      "sentence form": "obj was filmed in subj"
    },
    {
      "property": "/government/politician/government_positions_held/government/government_position_held/basic_title",
      "sentence form": "subj is obj"
    },
    {
      "property": "/government/politician/government_positions_held/government/government_position_held/office_position_or_title",
      "sentence form": "subj is obj"
    },
    {
      "property": "/organization/organization_member/member_of/organization/organization_membership/organization",
      "sentence form": "subj is a member of obj"
    },
    {
      "property": "/people/person/education/education/education/degree",
      "sentence form": "subj has a obj degree"
    },
    {
      "property": "/people/person/education/education/education/major_field_of_study",
      "sentence form": "subj studied obj"
    },
    {
      "property": "/people/person/employment_history/business/employment_tenure/title",
      "sentence form": "obj is the title of subj"
    },
    {
      "property": "/architecture/building_occupant/buildings_occupied/architecture/occupancy/building",
      "sentence form": "subj is a resident of obj"
    },
    {
      "property": "/book/author/book_editions_published",
      "sentence form": "subj published obj"
    },
    {
      "property": "/book/book_character/appears_in_book",
      "sentence form": "subj appears in the book obj"
    },
    {
      "property": "/broadcast/producer/location",
      "sentence form": "subj was a producer in obj"
    },
    {
      "property": "/broadcast/producer/produces",
      "sentence form": "subj has produced obj"
    },
    {
      "property": "/business/employer/employees/business/employment_tenure/person",
      "sentence form": "obj has worked with subj"
    },
    {
      "property": "/celebrities/celebrity/sexual_orientation/celebrities/sexual_orientation_phase/sexual_orientation",
      "sentence form": "the sexual orientation of subj is obj"
    },
    {
      "property": "/common/topic/subject_of",
      "sentence form": "subj is the subject of obj"
    },
    {
      "property": "/event/public_speaker/speeches_or_presentations/event/speech_or_presentation/presented_work",
      "sentence form": "subj participated in the obj"
    },
    {
      "property": "/event/public_speaker/speeches_or_presentations/event/speech_or_presentation/type_or_format_of_presentation",
      "sentence form": "subj gave a obj"
    },
    {
      "property": "/event/public_speaker/speeches_or_presentations/event/speech_or_presentation/event",
      "sentence form": "subj delivered the obj"
    },
    {
      "property": "/event/public_speaker/speeches_or_presentations/event/speech_or_presentation/speech_topic",
      "sentence form": "subj is pushing obj"
    },
    {
      "property": "/government/political_appointer/appointees/government/government_position_held/governmental_body",
      "sentence form": "subj is the obj"
    },
    {
      "property": "/government/political_appointer/appointees/government/government_position_held/office_holder",
      "sentence form": "subj works with obj"
    },
    {
      "property": "/government/political_appointer/appointees/government/government_position_held/office_position_or_title",
      "sentence form": "subj works with obj"
    },
    {
      "property": "/government/political_appointer/appointees/government/government_position_held/basic_title",
      "sentence form": "obj is a basic title for subj"
    },
    {
      "property": "/government/politician/election_campaigns",
      "sentence form": "subj went on the obj"
    },
    {
      "property": "/government/politician/government_positions_held/government/government_position_held/governmental_body",
      "sentence form": "subj held a position in the obj"
    },
    {
      "property": "/government/politician/government_positions_held/government/government_position_held/jurisdiction_of_office",
      "sentence form": "subj held a position in obj"
    },
    {
      "property": "/government/politician/government_positions_held/government/government_position_held/district_represented",
      "sentence form": "subj held a position in obj"
    },
    {
      "property": "/government/politician/government_positions_held/government/government_position_held/legislative_sessions",
      "sentence form": "subj was a member of obj"
    },
    {
      "property": "/government/politician/legislative_committees_served_on/government/legislative_committee_membership/committee",
      "sentence form": "subj was part of obj"
    },
    {
      "property": "/government/politician/legislative_committees_served_on/government/legislative_committee_membership/session",
      "sentence form": "subj was a member of obj"
    },
    {
      "property": "/government/politician/party/government/political_party_tenure/party",
      "sentence form": "subj is a member of obj"
    },
    {
      "property": "/government/polled_entity/poll_scores/government/election_poll_score/poll",
      "sentence form": "subj appeared in the obj"
    },
    {
      "property": "/government/us_president/vice_president",
      "sentence form": "obj is vice president to obj"
    },
    {
      "property": "/people/appointer/appointment_made/people/appointment/appointed_role",
      "sentence form": "subj appointed the subj"
    },
    {
      "property": "/people/appointer/appointment_made/people/appointment/appointee",
      "sentence form": "subj appointed subj"
    },
    {
      "property": "/people/person/education/education/education/specialization",
      "sentence form": "subj is a specialist in obj"
    },
    {
      "property": "/visual_art/art_subject/artwork_on_the_subject",
      "sentence form": "obj is art about subj"
    },
    {
      "property": "/amusement_parks/ride_theme/rides",
      "sentence form": "obj is a ride about subj"
    },
    {
      "property": "/biology/breed_origin/breeds_originating_here",
      "sentence form": "the breed obj originated in subj"
    },
    {
      "property": "/cvg/computer_game_region/versions_released_in_this_region",
      "sentence form": "obj was released in subj"
    },
    {
      "property": "/cvg/cvg_publisher/games_published",
      "sentence form": "obj was published in subj"
    },
    {
      "property": "/exhibitions/exhibition_sponsor/exhibitions_sponsored/exhibitions/exhibition_run/exhibition",
      "sentence form": "obj was an exhibition in subj"
    },
    {
      "property": "/exhibitions/exhibition_sponsor/exhibitions_sponsored/exhibitions/exhibition_run/venue",
      "sentence form": "obj is a venue in subj"
    },
    {
      "property": "/food/beer_country_region/beers_from_here",
      "sentence form": "subj is where obj is from"
    },
    {
      "property": "/government/governmental_jurisdiction/agencies",
      "sentence form": "obj is an agency in subj"
    },
    {
      "property": "/government/governmental_jurisdiction/governing_officials/government/government_position_held/basic_title",
      "sentence form": "subj has a obj"
    },
    {
      "property": "/government/governmental_jurisdiction/governing_officials/government/government_position_held/office_holder",
      "sentence form": "subj is the monarch of obj"
    },
    {
      "property": "/government/governmental_jurisdiction/governing_officials/government/government_position_held/office_position_or_title",
      "sentence form": "obj is an important position in subj"
    },
    {
      "property": "/government/governmental_jurisdiction/governing_officials/government/government_position_held/governmental_body",
      "sentence form": "subj has a obj"
    },
    {
      "property": "/government/governmental_jurisdiction/government",
      "sentence form": "subj has a obj"
    },
    {
      "property": "/government/governmental_jurisdiction/government_positions",
      "sentence form": "subj has a obj"
    },
    {
      "property": "/law/court_jurisdiction_area/courts",
      "sentence form": "subj has a obj"
    },
    {
      "property": "/location/country/administrative_divisions",
      "sentence form": "obj is in subj"
    },
    {
      "property": "/location/country/capital",
      "sentence form": "obj is in subj"
    },
    {
      "property": "/location/country/currency_used",
      "sentence form": "obj is the currency of subj"
    },
    {
      "property": "/location/country/form_of_government",
      "sentence form": "subj has a obj"
    },
    {
      "property": "/location/country/internet_tld",
      "sentence form": "obj is the internet ID of subj"
    },
    {
      "property": "/location/country/languages_spoken",
      "sentence form": "obj is spoken in subj"
    },
    {
      "property": "/location/country/national_anthem/government/national_anthem_of_a_country/anthem",
      "sentence form": "obj is the national anthem of subj"
    },
    {
      "property": "/location/country/official_language",
      "sentence form": "obj is spoken in subj"
    },
    {
      "property": "/location/location/partially_contains",
      "sentence form": "obj are in subj"
    },
    {
      "property": "/location/statistical_region/fertility_rate/measurement_unit/dated_float/source",
      "sentence form": "subj appears in obj"
    },
    {
      "property": "/location/statistical_region/gdp_growth_rate/measurement_unit/dated_percentage/source",
      "sentence form": "subj appears in obj"
    },
    {
      "property": "/location/statistical_region/gdp_nominal/measurement_unit/dated_money_value/source",
      "sentence form": "subj appears in obj"
    },
    {
      "property": "/location/statistical_region/internet_users_percent_population/measurement_unit/dated_percentage/source",
      "sentence form": "subj appears in obj"
    },
    {
      "property": "/location/statistical_region/life_expectancy/measurement_unit/dated_float/source",
      "sentence form": "subj appears in obj"
    },
    {
      "property": "/location/statistical_region/major_exports/location/imports_exports_by_industry/industry",
      "sentence form": "subj appears in obj"
    },
    {
      "property": "/location/statistical_region/military_expenditure_percent_gdp/measurement_unit/dated_percentage/source",
      "sentence form": "subj appears in obj"
    },
    {
      "property": "/location/statistical_region/places_exported_to/location/imports_and_exports/currency",
      "sentence form": "subj appears in obj"
    },
    {
      "property": "/location/statistical_region/places_exported_to/location/imports_and_exports/exported_to",
      "sentence form": "subj exports to obj"
    },
    {
      "property": "/location/statistical_region/places_imported_from/location/imports_and_exports/currency",
      "sentence form": "obj is the currency of subj"
    },
    {
      "property": "/location/statistical_region/places_imported_from/location/imports_and_exports/imported_from",
      "sentence form": "subj imports from subj"
    },
    {
      "property": "/location/statistical_region/population/measurement_unit/dated_integer/source",
      "sentence form": "subj appears in obj"
    },
    {
      "property": "/military/military_combatant/armed_forces",
      "sentence form": "obj are the armed forces of subj"
    },
    {
      "property": "/military/military_combatant/casualties/military/casualties/combatant",
      "sentence form": "obj features in the military history of subj"
    },
    {
      "property": "/military/military_combatant/casualties/military/casualties/military_conflict",
      "sentence form": "obj features in the military history of subj"
    },
    {
      "property": "/military/military_combatant/casualties/military/casualties/type_of_casualties",
      "sentence form": "obj features in the military history of subj"
    },
    {
      "property": "/military/military_combatant/force_deployments/military/force_strength/military_conflict",
      "sentence form": "obj features in the military history of subj"
    },
    {
      "property": "/military/military_combatant/military_commanders/military/military_command/military_commander",
      "sentence form": "obj features in the military history of subj"
    },
    {
      "property": "/military/military_combatant/military_commanders/military/military_command/military_conflict",
      "sentence form": "obj features in the military history of subj"
    },
    {
      "property": "/military/military_combatant/military_conflicts/military/military_combatant_group/combatants",
      "sentence form": "obj features in the military history of subj"
    },
    {
      "property": "/military/military_combatant/military_conflicts/military/military_combatant_group/conflict",
      "sentence form": "obj features in the military history of subj"
    },
    {
      "property": "/olympics/olympic_athlete_affiliation/athlete",
      "sentence form": "obj is from subj"
    },
    {
      "property": "/olympics/olympic_participating_country/athletes/olympics/olympic_athlete_affiliation/athlete",
      "sentence form": "obj is from subj"
    },
    {
      "property": "/olympics/olympic_participating_country/athletes/olympics/olympic_athlete_affiliation/olympics",
      "sentence form": "subj participated in obj"
    },
    {
      "property": "/olympics/olympic_participating_country/athletes/olympics/olympic_athlete_affiliation/sport",
      "sentence form": "obj is practiced in subj"
    },
    {
      "property": "/olympics/olympic_participating_country/demonstration_medals_won/olympics/olympic_demonstration_medal_honor/event",
      "sentence form": "obj was part of subj"
    },
    {
      "property": "/olympics/olympic_participating_country/demonstration_medals_won/olympics/olympic_demonstration_medal_honor/medal",
      "sentence form": "obj was part of subj"
    },
    {
      "property": "/olympics/olympic_participating_country/demonstration_medals_won/olympics/olympic_demonstration_medal_honor/medalist",
      "sentence form": "obj was part of subj"
    },
    {
      "property": "/olympics/olympic_participating_country/demonstration_medals_won/olympics/olympic_demonstration_medal_honor/olympics",
      "sentence form": "subj appeared in obj"
    },
    {
      "property": "/olympics/olympic_participating_country/medals_won/olympics/olympic_medal_honor/event",
      "sentence form": "obj was part of subj"
    },
    {
      "property": "/olympics/olympic_participating_country/medals_won/olympics/olympic_medal_honor/medal",
      "sentence form": "obj was part of subj"
    },
    {
      "property": "/olympics/olympic_participating_country/medals_won/olympics/olympic_medal_honor/medalist",
      "sentence form": "obj is from subj"
    },
    {
      "property": "/olympics/olympic_participating_country/medals_won/olympics/olympic_medal_honor/olympics",
      "sentence form": "subj participated in obj"
    },
    {
      "property": "/olympics/olympic_participating_country/olympics_participated_in",
      "sentence form": "subj participated in obj"
    },
    {
      "property": "/royalty/kingdom/rulers",
      "sentence form": "obj was a ruler of subj"
    },
    {
      "property": "/sports/sport_country/athletes/sports/competitor_country_relationship/competitor",
      "sentence form": "obj was a competitor from subj"
    },
    {
      "property": "/sports/sport_country/athletes/sports/competitor_country_relationship/sports",
      "sentence form": "obj is a sport played in subj"
    },
    {
      "property": "/sports/sport_country/athletes/sports/competitor_country_relationship/tournament",
      "sentence form": "subj participated in obj"
    },
    {
      "property": "/sports/sport_country/athletic_performances/sports/competitor_competition_relationship/competition",
      "sentence form": "subj participated in obj"
    },
    {
      "property": "/sports/sport_country/athletic_performances/sports/competitor_competition_relationship/competitors",
      "sentence form": "obj was a competitor from subj"
    },
    {
      "property": "/sports/sport_country/athletic_performances/sports/competitor_competition_relationship/medal",
      "sentence form": "obj was a prize awarded to subj"
    },
    {
      "property": "/sports/sport_country/athletic_performances/sports/competitor_competition_relationship/tournament",
      "sentence form": "subj participated in obj"
    },
    {
      "property": "/sports/sport_country/multi_event_tournaments_participated_in",
      "sentence form": "subj participated in obj"
    },
    {
      "property": "/symbols/coat_of_arms_bearer/coat_of_arms_used/symbols/armorial_grant/coat_of_arms",
      "sentence form": "obj is s symbol in subj"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/astronomy/meteor_shower/source_of_meteor_shower",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/astronomy/meteorite/source_celestial_body",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/biology/animal_breed/place_of_origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/biology/fossil_specimen/found_at_site",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/biology/organism/place_of_birth",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/boats/ship/place_built",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/book/book_edition/place_of_publication",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/book/technical_report/place_of_publication",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/dining/cuisine/region_of_origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/education/fraternity_sorority/founded_location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/film/film/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/food/beer/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/food/beer/from_region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/food/bottled_water/source",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/food/cheese/country_of_origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/food/cheese/region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/food/tea/regions_where_grown",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/food/wine_style/place_of_origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/games/game/origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/geography/lake/inflow",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/martial_arts/martial_art/origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/military/military_unit/place_of_origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/music/artist/origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/music/composition/place_composed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/music/recording/place",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/organization/organization/place_founded",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/people/family/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/people/person/place_of_birth",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/royalty/system_of_nobility/country_of_origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/spaceflight/rocket/country_of_origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/theater/play/country_of_origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/tv/tv_program/country_of_origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/wine/wine/appellation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/wine/wine/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/wine/wine/region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/wine/wine/vineyard",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/wine/wine/wine_sub_region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/book/journal/place_of_publication/book/place_of_publication_period/place_of_publication",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/book/magazine/place_of_publication/book/place_of_publication_period/place_of_publication",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/freebase/user_profile/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/freebase/user_profile/hometown",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "subj is from obj",
      "property": "/organization/organization/headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/astronomy/comet/meteor_shower_spawned",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/astronomy/meteorite_source/meteorites",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/biology/breed_origin/breeds_originating_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/biology/fossil_site/specimens_found_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/food/beer_country_region/beers_from_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/wine/wine_region/wine_styles",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/military/military_unit_place_of_origin/military_units",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/location/location/people_born_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/wine/appellation/wines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/wine/wine_region/wines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/wine/vineyard/wines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/wine/wine_sub_region/wines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "obj is from subj",
      "property": "/spaceflight/rocket_launch_site/missions_launched_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/placeoforiginof"
    },
    {
      "sentence form": "subj portrayed obj",
      "property": "/cvg/game_voice_actor/computer_game_voice_performances/cvg/game_performance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayed"
    },
    {
      "sentence form": "subj portrayed obj",
      "property": "/film/actor/dubbing_performances/film/dubbing_performance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayed"
    },
    {
      "sentence form": "subj portrayed obj",
      "property": "/film/actor/film/film/performance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayed"
    },
    {
      "sentence form": "subj portrayed obj",
      "property": "/music/opera_singer/opera_roles/opera/opera_role/role",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayed"
    },
    {
      "sentence form": "subj portrayed obj",
      "property": "/theater/theater_actor/theater_roles/theater/theater_role/role",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayed"
    },
    {
      "sentence form": "subj portrayed obj",
      "property": "/tv/tv_actor/starring_roles/tv/regular_tv_appearance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayed"
    },
    {
      "sentence form": "subj portrayed obj",
      "property": "/tv/tv_actor/guest_roles/tv/tv_guest_role/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayed"
    },
    {
      "sentence form": "subj portrayed obj",
      "property": "/tv/tv_actor/tv_segment_performances/tv/tv_segment_performance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayed"
    },
    {
      "sentence form": "subj portrayed obj",
      "property": "/music/music_video_performer/music_video_performances/music/music_video_performance/music_video_character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayed"
    },
    {
      "sentence form": "obj was portrayed by subj",
      "property": "/cvg/game_character/games/cvg/game_performance/voice_actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayedby"
    },
    {
      "sentence form": "obj was portrayed by subj",
      "property": "/film/film_character/portrayed_in_films_dubbed/film/dubbing_performance/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayedby"
    },
    {
      "sentence form": "obj was portrayed by subj",
      "property": "/film/film_character/portrayed_in_films/film/performance/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayedby"
    },
    {
      "sentence form": "obj was portrayed by subj",
      "property": "/opera/opera_character/portrayed_by/opera/opera_role/performer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayedby"
    },
    {
      "sentence form": "obj was portrayed by subj",
      "property": "/theater/theater_character/portrayed_by/theater/theater_role/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayedby"
    },
    {
      "sentence form": "obj was portrayed by subj",
      "property": "/tv/tv_character/appeared_in_tv_program/tv/regular_tv_appearance/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayedby"
    },
    {
      "sentence form": "obj was portrayed by subj",
      "property": "/tv/tv_character/appeared_in_tv_episodes/tv/tv_guest_role/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayedby"
    },
    {
      "sentence form": "obj was portrayed by subj",
      "property": "/tv/tv_character/appeared_in_tv_episode_segments/tv/tv_segment_performance/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayedby"
    },
    {
      "sentence form": "obj was portrayed by subj",
      "property": "/music/music_video_character/portrayed_in_music_videos/music/music_video_performance/music_video_performer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/portrayedby"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/book/book_edition/dewey_decimal_number",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/food/bottled_water/water_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/rail/locomotive_class/uic_classification",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/galactic_interaction/interaction_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/celebrities/romantic_relationship/relationship_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/cvg/game_performance/performance_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/film/film_cut/type_of_film_cut",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/film/performance/special_performance_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/film/personal_film_appearance/type_of_appearance",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/interests/collection/category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/military/casualties/type_of_casualties",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/people/marriage/type_of_union",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/spaceflight/satellite_orbit_asynchronous/orbit_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/spaceflight/satellite_orbit_synchronous/orbit_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/tennis/tennis_match/match_format",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/tv/regular_tv_appearance/special_performance_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/tv/tv_guest_role/special_performance_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/tv/tv_segment_performance/special_performance_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/tv/tv_segment_personal_appearance/appearance_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/tv/video/video_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/amusement_parks/ride/ride_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/amusement_parks/roller_coaster/propulsion",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/amusement_parks/roller_coaster/train_configuration",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/architecture/building/building_function",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/architecture/museum/type_of_museum",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/asteroid/spectral_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/celestial_object/category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/star/spectral_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/extraterrestrial_location/type_of_planetographic_feature",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/galaxy_classification_code/galaxy_shape",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/galaxy/galaxy_classification_hubble",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/near_earth_object/near_earth_object_classification",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/orbital_relationship/orbit_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/telescope/type_of_telescope",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/automotive/model/automotive_class",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/automotive/transmission/classification",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/aviation/aircraft_model/aircraft_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/aviation/airliner_accident/accident_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/aviation/airport/airport_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/aviation/aviation_waypoint/waypoint_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/award/competition/type_of_competition",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/bicycles/bicycle_model/bicycle_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/biology/pedigreed_animal/breed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/biology/fossil_specimen/organism",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/biology/gene_ontology_group/group_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/biology/organism_classification/rank",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/biology/organism/organism_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/biology/organism/sex",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/boats/ship_class/ship_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/boats/ship/ship_class",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/book/book_edition/binding",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/book/poem/verse_form",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/book/short_non_fiction/mode_of_writing",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/business/issue/type_of_issue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/chemistry/chemical_compound/classifications",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/chemistry/chemical_element/periodic_table_block",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/chemistry/chemical_element/chemical_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/computer/computer_peripheral/peripheral_class",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/computer/file_format/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/conferences/conference_series/type_of_conference",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/cricket/cricket_match/match_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/cvg/computer_videogame/gameplay_modes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/digicams/digital_camera/format",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/distilled_spirits/blended_spirit/style",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/distilled_spirits/distilled_spirit/spirit_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/distilled_spirits/infused_spirit/infusion_style",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/education/educational_institution/school_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/education/fraternity_sorority/fraternity_sorority_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/battery_size/shape_format",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/battery/cell_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/battery/size",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/engine/category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/piston_engine/cooling_method",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/piston_engine/fuel_delivery_method",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/piston_engine/piston_configuration",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/piston_engine/valvetrain_configuration",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/power_plug_standard/plug_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/event/disaster/type_of_disaster",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/fashion/textile/weave",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/fictional_universe/fictional_setting/setting_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/film/film/film_format",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/food/beer_style/bjcp_style_category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/food/beer/beer_style",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/food/cheese/texture",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/food/drinking_establishment/drinking_establishment_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/food/tea/tea_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/food/dish/type_of_dish1",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/wine/wine/wine_style",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/geography/geographical_feature/category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/geography/glacier/glacier_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/geography/lake/lake_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/geography/mountain/listings",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/geography/mountain/mountain_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/geography/waterfall/waterfall_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/interests/collectable_item/collection_category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/internet/top_level_domain/domain_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/language/conlang/conlang_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/language/language_writing_system/type_of_writing",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/law/us_patent/international_classification",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/law/us_patent/us_classification_category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategory"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/galactic_interaction_type/galaxy_s_interacting_this_way",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/cvg/computer_game_performance_type/performances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/film/special_film_performance_type/film_performance_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/film/personal_film_appearance_type/film_appearances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/interests/collection_category/collectors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/military/casualties_type/conflicts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/people/marriage_union_type/unions_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/spaceflight/satellite_orbit_type/asynchronous_satellites",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/spaceflight/satellite_orbit_type/synchronous_satellites",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/tv/special_tv_performance_type/starring_performances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/tv/special_tv_performance_type/episode_performances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/tv/special_tv_performance_type/segment_performances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/tv/non_character_role/episode_segment_appearances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/amusement_parks/ride_type/rides",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/amusement_parks/roller_coaster_propulsion_system/roller_coasters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/amusement_parks/roller_coaster_train_configuration/roller_coasters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/architecture/building_function/buildings",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/architecture/type_of_museum/museums",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/asteroid_spectral_type/asteroids_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/celestial_object_category/objects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/spectral_type/celestial_objects_of_this_spectral_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/type_of_planetographic_feature/planetographic_features_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/galactic_shape/galaxies_of_this_shape",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/galaxy_classification_code/galaxies_of_this_code",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/near_earth_object_classification/near_earth_objects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/orbit_type/orbiting_bodies",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/astronomy/telescope_type/telescopes_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/automotive/automotive_class/examples",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/automotive/transmission_type/transmissions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/aviation/aircraft_type/aircraft_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/aviation/accident_type/aircraft_accidents_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/aviation/airport_type/airports_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/aviation/waypoint_type/waypoints_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/award/competition_type/competitions_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/bicycles/bicycle_type/bicycle_models_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/biology/animal_breed/examples",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/biology/organism_classification/fossil_specimens",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/biology/gene_ontology_group_type/group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/biology/organism_classification_rank/organism_classifications",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/biology/organism_classification/organisms_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/boats/ship_type/ship_class",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/boats/ship_class/ships_in_class",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/book/poetic_verse_form/poems_of_this_form",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/book/short_non_fiction_variety/works",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/business/issue_type/issues_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/chemistry/chemical_classification/chemicals_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/chemistry/periodic_table_block/elements",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/chemistry/chemical_series/elements",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/computer/computer_peripheral_class/products",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/computer/file_format_genre/file_formats",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/conferences/type_of_conference/conferences_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/cvg/gameplay_mode/games_with_this_mode",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/digicams/camera_format/cameras",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/distilled_spirits/blended_spirit_style/blends",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/distilled_spirits/distilled_spirit_type/spirits",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/distilled_spirits/infused_spirit_style/infusions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/education/school_category/schools_of_this_kind",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/education/fraternity_sorority_type/fraternities_and_sororities",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/engineering/battery_shape_format/battery_sizes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/engineering/battery_cell_type/batteries",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/engineering/battery_size/batteries_of_this_size",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/engineering/engine_category/engines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/engineering/engine_cooling_method/engines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/engineering/fuel_delivery_method/engines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/engineering/piston_configuration/engines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/engineering/valvetrain_configuration/engines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/engineering/power_plug_standard_type/plug_standards",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/event/disaster_type/disasters_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/fashion/weave/textiles_of_this_weave",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/fictional_universe/type_of_fictional_setting/settings",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/film/film_format/film_format",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/food/beer_style_category/styles",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/food/beer_style/beers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/food/cheese_texture/cheeses",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/food/drinking_establishment_type/establishments_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/food/tea_type/tea",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/food/type_of_dish/dishes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/food/wine_style/wines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/geography/geographical_feature_category/features",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/geography/lake_type/lakes_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/geography/mountain_listing/mountains",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/geography/mountain_type/mountains_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/geography/waterfall_type/waterfalls",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/interests/collection_category/items_in_this_category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/internet/top_level_domain_type/domains",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/language/conlang_purpose/languages_of_this_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/language/language_writing_type/writing_systems",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/law/international_patent_category/patents",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/law/us_patent_category/patents",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/law/us_patent_type/patents",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/government/form_of_government/countries",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/martial_arts/martial_art_category/martial_arts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/medicine/cancer_center_type/centers_of_this_kind",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/medicine/drug_class/drugs",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/medicine/type_of_infectious_agent/diseases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/medicine/medical_trial_design/trials",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/medicine/medical_trial_phase/medical_trials",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/medicine/medical_trial_type/medical_trials",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/meteorology/cloud_classification/clouds",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "obj is a type subj",
      "property": "/meteorology/tropical_cyclone_category/tropical_cyclones",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascategorymember"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/aviation/airport_operator/airports_operated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/award/award_presenting_organization/award_categories_presented",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/award/award_presenting_organization/awards_presented",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/biology/breed_registry/breed_groups",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/conferences/conference_sponsor/conferences",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/cricket/cricket_administrative_body/competitions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/cricket/cricket_umpire_panel/administrator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/cvg/computer_game_rating_system/ratings",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/education/educational_institution/newspaper",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/education/educational_institution/radio_station",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/education/educational_institution/school_magazines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/education/educational_institution/sports_teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/film/content_rating_system/film_ratings",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/internet/top_level_domain_registry/domains",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/language/language_regulator/language",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/medicine/medical_trial_health_authority/medical_trials",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/medicine/medical_trial_sponsor/trials_sponsored",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/meteorology/meteorological_service/tropical_cyclone_categories",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/metropolitan_transit/transit_agency/systems",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/protected_sites/natural_or_cultural_preservation_agency/natural_or_cultural_listings_maintained",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/protected_sites/governing_body_of_protected_sites/protected_sites_governed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/religion/religious_organization/jurisdictions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/soccer/fifa/leagues_governed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/spaceflight/space_agency/spaceports",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/spaceflight/space_program_sponsor/space_programs_sponsored",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/tv/tv_rating_system/tv_ratings",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/biology/breed_registry/recognized_breeds/biology/breed_registration/breed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/biology/breed_registry/recognized_breeds/biology/breed_registration/breed_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/education/educational_institution/students_graduates/education/education/degree",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/education/educational_institution/honorary_degrees_awarded/education/honorary_degree/degree",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/martial_arts/martial_arts_organization/qualifications_awarded/martial_arts/martial_arts_certification/qualification",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/rail/railway_operator/railways/rail/railway_operator_relationship/railway",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/religion/religious_organization/leaders/religion/religious_organization_leadership/jurisdiction",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/symbols/heraldry_granting_body/coats_of_arms_granted/symbols/armorial_grant/coat_of_arms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/exhibitions/exhibition_sponsor/exhibitions_sponsored/exhibitions/exhibition_run/exhibition",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/exhibitions/exhibition_producer/exhibitions_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/law/legal_case/court",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/travel/hotel_operator/hotels_operated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/medicine/drug_regulating_authority/pregnancy_categories_regulated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "subj controls obj",
      "property": "/base/schemastaging/educational_institution_extra/libraries",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administers"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/aviation/airport/operator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/award/award_category/presenting_organization",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/award/award/presented_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/biology/breed_group/breed_registry",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/conferences/conference_series/sponsoring_organization",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/cvg/computer_game_rating/rating_system",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/education/school_newspaper/school",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/education/student_radio_station/school",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/education/school_magazine/school",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/sports/school_sports_team/school",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/film/content_rating/film_rating_system",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/internet/top_level_domain/registry",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/medicine/medical_trial/health_authority",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/medicine/medical_trial/sponsor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/meteorology/tropical_cyclone_category/meteorological_service",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/metropolitan_transit/transit_system/agency",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/protected_sites/natural_or_cultural_site_designation/listing_agency",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/protected_sites/protected_site/governing_body",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/religion/religious_leadership_jurisdiction/organisation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/soccer/football_league/governing_body",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/spaceflight/rocket_launch_site/controlling_country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/spaceflight/rocket_launch_site/operated_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/spaceflight/space_program/sponsor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/tv/tv_rating/tv_rating_system",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/biology/animal_breed/registered_with/biology/breed_registration/registry",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/biology/breed_group/breeds_in_this_group/biology/breed_registration/registry",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/education/educational_degree/people_with_this_degree/education/education/institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/education/educational_degree/honorary_degree_recipients/education/honorary_degree/institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/martial_arts/martial_arts_qualification/martial_artists/martial_arts/martial_arts_certification/certifying_body",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/organization/non_profit_designation/organizations_with_this_designation/organization/non_profit_registration/registering_agency",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/rail/railway/operator_s/rail/railway_operator_relationship/operator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/religion/religious_leadership_jurisdiction/leader/religion/religious_organization_leadership/organization",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/symbols/coat_of_arms/bearers/symbols/armorial_grant/granted_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/exhibitions/exhibition/produced_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/exhibitions/exhibition/venues/exhibitions/exhibition_run/sponsor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/law/court/legal_cases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/travel/hotel/operated_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/medicine/drug_pregnancy_category/regulating_authority",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "obj is controled by",
      "property": "/base/schemastaging/scholastic_library/institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/administeredby"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/language/human_language/countries_spoken_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/language/human_language/main_country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/language/human_language/region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/language/language_family/geographic_distribution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/people/chinese_ethnic_group/autonomous_counties",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/people/chinese_ethnic_group/autonomous_prefectures",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/people/chinese_ethnic_group/autonomous_regions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/medicine/medical_trial/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/people/american_indian_group/us_indian_reservations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/people/ethnicity/geographic_distribution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj occurs in obj",
      "property": "/base/schemastaging/fish/found_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/occursin"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/automotive/make/model_s",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/aviation/aircraft_manufacturer/aircraft_models_made",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/bicycles/bicycle_manufacturer/bicycle_models",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/boats/ship_builder/ships_built",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/book/publishing_company/books_published",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/book/report_issuing_institution/technical_reports_issued",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/broadcast/distributor/distributes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/broadcast/producer/produces",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/comic_books/comic_book_publisher/comic_book_series_published",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/computer/computer_manufacturer_brand/computer_lines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/computer/processor_manufacturer/processors_manufactured",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/computer/computer_manufacturer_brand/computer_models",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/cvg/cvg_publisher/games_published",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/cvg/cvg_publisher/game_versions_published",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/digicams/camera_sensor_manufacturer/cameras",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/digicams/digital_camera_manufacturer/cameras",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/distilled_spirits/spirit_bottler/spirits_bottled",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/distilled_spirits/distillery/spirits",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/distilled_spirits/spirit_blender/infusions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/distilled_spirits/spirit_blender/blends",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/food/brewery_brand_of_beer/beers_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/food/candy_bar_manufacturer/candy_bars",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/music/record_label/releases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/rail/locomotive_builder/locomotive_classes_built",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/spaceflight/rocket_engine_manufacturer/rocket_engines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/spaceflight/rocket_manufacturer/rockets_manufactured",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/spaceflight/satellite_manufacturer/spacecraft_manufactured",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/theater/theater_company/plays_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/wine/wine_producer/wines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/book/periodical_publisher/periodicals_published/book/periodical_publisher_period/periodical",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/business/consumer_company/product_lines/business/company_product_line_relationship/product_line",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/business/consumer_company/products/business/company_product_relationship/consumer_product",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/comic_strips/comic_strip_syndicate/comic_strips_syndicated/comic_strips/comic_strip_syndicate_duration/comic_strip",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/games/game_publisher/games_published",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/skiing/ski_lift_manufacturer/ski_lifts/skiing/lift_tenure/ski_lift",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj produced obj",
      "property": "/medicine/drug_manufacturer/drugs_manufactured",
      "metaschema": "/base/fbontology/metaschema/predicate_id/produced"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/automotive/generation/manufacturing_plant",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/automotive/model/make",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/aviation/aircraft_model/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/bicycles/bicycle_model/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/boats/nuclear_powerplant/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/boats/ship/ship_builder",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/book/book_edition/publisher",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/book/technical_report/institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/broadcast/broadcast/distributor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/broadcast/content/producer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/comic_books/comic_book_series/publisher",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/computer/computer_processor/manufacturers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/computer/computer/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/cvg/computer_videogame/publisher",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/cvg/game_version/publisher",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/digicams/digital_camera/camera_sensor_manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/digicams/digital_camera/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/distilled_spirits/distilled_spirit/bottler",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/distilled_spirits/distilled_spirit/distillery",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/distilled_spirits/infused_spirit/producer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/distilled_spirits/blended_spirit/blender",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/food/beer/brewery_brand",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/food/candy_bar/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/medicine/drug_brand/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/music/guitar/brand",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/music/release/label",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/music/synthesizer/brand",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/rail/locomotive_class/built_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/spaceflight/rocket_engine/manufactured_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/spaceflight/rocket/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/spaceflight/spacecraft/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/theater/theater_production/producing_company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/wine/wine/wine_producer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/boats/ship_powerplant/engine_type/boats/engine/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/book/periodical/publisher/book/periodical_publisher_period/publisher",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/business/product_line/producer_s/business/company_product_line_relationship/company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/business/consumer_product/company/business/company_product_relationship/company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/comic_strips/comic_strip/syndicate/comic_strips/comic_strip_syndicate_duration/syndicate",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/games/game/publisher",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/skiing/ski_lift/lift_type/skiing/lift_tenure/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is produced by obj",
      "property": "/medicine/manufactured_drug_form/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/producedby"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/amusement_parks/park/geolocation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/amusement_parks/ride/geolocation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/meteorite/meteorite_discovery_geolocation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/meteorite/meteorite_fall_geolocation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/river/mouth_long_lat",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/river/origin_long_lat",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/location/geolocation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/zoos/zoo/geolocation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/location/geometry",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/architecture/landscape_project/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/architecture/museum/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/architecture/structure/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/extraterrestrial_location/geolocation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/award/hall_of_fame/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/business/business_location/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/business/shopping_center/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/library/public_library/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/location/street_address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/medicine/cancer_center/mailing_address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/medicine/hospital/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/religion/religious_organization/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/sports/golf_facility/address",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/amusement_parks/park/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/asterism/constellations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/meteor_shower/radiant",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/extraterrestrial_location/on_celestial_object",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/galaxy/constellation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/meteorite/institutional_specimen_location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/meteorite/meteorite_discovery_location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/meteorite/meteorite_fall_location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/star_system/constellation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/star/constellation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/telescope/housed_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/trans_neptunian_object/region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/automotive/manufacturing_plant/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/biology/cytogenetic_band/chromosome",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/biology/deceased_organism/place_of_death",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/biology/gene/chromosome",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/broadcast/producer/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/business/business_location/in_shopping_center",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/cricket/cricket_team/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/distilled_spirits/distillery/region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/education/educational_institution/campuses",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/transportation/bridge/body_of_water_spanned",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/island/body_of_water",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/river/mouth",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/river/origin",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/organization/organization/locations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/people/canadian_aboriginal_group/canadian_indian_reserves",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/people/deceased_person/place_of_burial",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/religion/religious_order/monasteries",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/religion/religious_organization/building",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/spaceflight/rocket_launch_site/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/spaceflight/satellite/launch_site",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/time/time_zone/locations_in_this_time_zone",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/transportation/bridge/locale",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/zoos/zoo/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/celebrities/celebrity/legal_entanglements/celebrities/legal_entanglement/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/military/military_person/postings/military/military_posting/post",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/people/person/places_lived/people/place_lived/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/visual_art/artwork/locations/visual_art/artwork_location_relationship/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/zoos/zoo_animal/zoos/zoos/animal_captivity/exhibit",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/zoos/zoo_animal/zoos/zoos/animal_captivity/zoo",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/australian_suburb/postal_code",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/law/court/courthouse/law/court_courthouse_relationship/courthouse",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/skiing/ski_area/closest_city",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/mailing_address/citytown",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/mailing_address/state_province_region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/mailing_address/postal_code",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/mailing_address/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/location/partially_contains",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haslocation"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/geometry/delineates_location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/planetographic_coordinate/extraterrestrial_location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/constellation/meteor_showers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/celestial_object/locations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/constellation/galaxies_observed_in_constellation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/constellation/contains",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/astronomical_observatory/telescope_s",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/astronomy/trans_neptunian_region/trans_neptunian_objects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/biology/chromosome/band",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/biology/chromosome/gene",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/business/shopping_center/store",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/distilled_spirits/spirit_producing_region/distilleries",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/education/educational_institution_campus/educational_institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/film/film/locations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/body_of_water/bridges",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/body_of_water/islands",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/lake/cities",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/mountain_pass/transversed_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/geography/river/cities",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/business/business_location/parent_company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/ca_indian_reserve/aboriginal_groups",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/people/place_of_interment/interred_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/religion/monastery/religious_order",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/location/location/time_zones",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/transportation/road/major_cities",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/travel/travel_destination/local_transportation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/military/military_post/people_posted_here/military/military_posting/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/zoos/zoo_exhibit/notable_animals/zoos/animal_captivity/animal",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/zoos/zoo/notable_animals/zoos/animal_captivity/animal",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/law/courthouse/courts_sitting_here/law/court_courthouse_relationship/court",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/travel/hotel/drinking_establishments",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/travel/hotel/restaurants_in_hotel",
      "metaschema": "/base/fbontology/metaschema/predicate_id/locationof"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/extraterrestrial_location/contains",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/biology/gene_ontology_group/part_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/book/book_edition_series/sub_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/book/literary_series/sub_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/book/publishing_company/imprints",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/education/department/subsidiary_departments",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/education/educational_institution/subsidiary_or_constituent_schools",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/government/general_election/includes_general_elections",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/government/governmental_body/component_bodies",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/internet/website/sub_web_properties",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/location/location/contains",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/military/armed_force/sub_divisions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/military/military_combatant/includes_allies",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/music/composition/includes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/projects/project/includes_smaller_projects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/symbols/coat_of_arms/marshalled_coats_of_arms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/time/event/includes_event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/symbols/coat_of_arms/charges",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/symbols/coat_of_arms/mantling",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/symbols/coat_of_arms/ordinaire",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/chess/chess_game/history",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/american_football/football_conference/divisions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/amusement_parks/park/areas",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/amusement_parks/amusement_park_area/rides",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/amusement_parks/park/rides",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/architecture/building_complex/buildings_in_complex",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/asterism/stars",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/asteroid_family/asteroid_family_member",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/asteroid_group/asteroid_group_members",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/comet_group/comet",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/galactic_super_cluster/galaxy_clusters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/galactic_cluster/galaxy_groups",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/galactic_filament/galaxy_superclusters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/galactic_group/galaxies_in_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/star_system/planetary_system",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/astronomy/star_system/stars",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/automotive/option_package/options",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/automotive/trim_level/engine",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/automotive/trim_level/transmission",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/baseball/baseball_league/divisions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/basketball/basketball_conference/divisions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/biology/genome/gene",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/book/book_edition_series/editions_in_this_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/book/excerpted_work/excerpts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/book/magazine/issues",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/book/newspaper/issues",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/book/serialized_work/serial_installments",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/book/literary_series/works_in_this_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/comic_books/comic_book_series/final_issue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/comic_books/comic_book_series/first_issue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/comic_books/comic_book_series/issues",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/comic_books/comic_book_story_arc/spanning",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/computer/computer/processor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/computer/web_browser/layout_engine",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/cricket/cricket_series_event/matches",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/cricket/cricket_tournament_event/matches",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/cvg/computer_game_compilation/games_included",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/cvg/game_series/games_in_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/cvg/computer_videogame/uses_game_engine",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/education/university/departments",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/film/film_series/films_in_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/film/film/featured_song",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/food/recipe_collection/recipes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/geography/island_group/islands_in_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/geography/mountain_range/passes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/government/general_election/contests",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/government/government/agency",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/government/governmental_body/committees",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/ice_hockey/hockey_conference/divisions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/law/constitution/amendments",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/location/country/administrative_divisions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/location/fr_region/departments",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/location/us_county/hud_county_place",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/location/place_with_neighborhoods/neighborhoods",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/location/us_county/hud_section_8_area",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/media_common/quotation_source/quotations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/medicine/cancer_center/constituents",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/meteorology/tropical_cyclone_season/strongest_storm",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/meteorology/tropical_cyclone_season/tropical_cyclones",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/metropolitan_transit/transit_line/stops",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/metropolitan_transit/transit_line/terminuses",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/metropolitan_transit/transit_system/transit_lines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/military/armed_force/military_combatant",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/military/armed_force/units",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/music/concert_tour/concerts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/music/multipart_release/components",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/music/release/track",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/olympics/olympic_games/competitions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/olympics/olympic_games/demonstration_competitions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/organization/organization/committees",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/people/family/members",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/protected_sites/park_system/member_parks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/radio/radio_program_episode/segments",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/radio/radio_program/episodes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/rail/rail_network/railways",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/rail/railway/branches_to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/rail/railway/terminuses",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/royalty/royal_line/monarchs_from_this_line",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/soccer/football_league_season/matches",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "obj is part of subj",
      "property": "/soccer/football_league_system/leagues",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haspart"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/extraterrestrial_location/contained_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/biology/gene_ontology_group/aggregate_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/book/book_edition_series/part_of_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/book/literary_series/part_of_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/book/publishing_company/imprint_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/education/department/department_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/education/educational_institution/parent_institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/government/general_election/part_of_general_election",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/government/governmental_body/body_this_is_a_component_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/internet/website/parent_web_property",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/location/location/containedby",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/military/armed_force/sub_division_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/military/military_combatant/belongs_to_combatant_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/music/composition/part_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/projects/project/part_of_larger_project",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/symbols/coat_of_arms/marshaled_into",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/time/event/included_in_event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/symbols/heraldic_charge_color/coat_of_arms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/symbols/heraldic_mantling/coat_of_arms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/symbols/heraldic_ordinaire_color/coat_of_arms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/chess/chess_move/game",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/american_football/football_conference/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/american_football/football_division/conference",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/american_football/football_game/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/amusement_parks/amusement_park_area/parks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/amusement_parks/ride/area",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/amusement_parks/ride/park",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/architecture/building/building_complex",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/asteroid/member_of_asteroid_family",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/asteroid/member_of_asteroid_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/comet/comet_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/galactic_cluster/galaxy_supercluster",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/galactic_group/galaxy_cluster",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/galactic_super_cluster/galaxy_filament",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/galaxy/galactic_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/star_system_body/star_system",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/astronomy/star/star_system",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/automotive/option/option_packages",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/automotive/engine/trim_levels",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/automotive/transmission/trim_levels",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/baseball/baseball_division/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/basketball/basketball_division/conference",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/biology/gene/genome",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/book/book_edition/book_edition_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/book/excerpt/work_excerpted",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/book/magazine_issue/magazine",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/book/newspaper_issue/newspaper",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/book/serial_installment/serialized_work",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/book/written_work/part_of_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/comic_books/comic_book_issue/part_of_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/comic_books/comic_book_story/part_of_story_arc",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/computer/computer_processor/used_in_computers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/computer/html_layout_engine/browsers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/cricket/cricket_match/series_event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/cricket/cricket_match/tournament_event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/cvg/computer_videogame/game_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/cvg/computer_game_engine/used_for_computer_games",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/education/department/institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/film/film/film_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/film/film_featured_song/featured_in_film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/food/recipe/part_of_recipe_collection",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/geography/island/island_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/geography/mountain_pass/range",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/government/election/general_election",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/government/government_agency/government",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/government/legislative_committee/legislature",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/ice_hockey/hockey_conference/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/ice_hockey/hockey_division/conference",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/law/constitutional_amendment/constitution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/location/administrative_division/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/location/fr_department/region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/location/hud_county_place/county",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/location/hud_county_place/place",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/location/neighborhood/neighborhood_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/location/hud_section_8_area/county",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/media_common/quotation/source",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/medicine/cancer_center_constituent/cancer_center",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/meteorology/tropical_cyclone/tropical_cyclone_season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/metropolitan_transit/transit_stop/transit_lines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/metropolitan_transit/transit_stop/terminus_for_lines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/metropolitan_transit/transit_line/transit_system",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/military/military_combatant/armed_forces",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/military/military_unit/armed_force",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/music/concert/concert_tour",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/music/release_component/package",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/music/recording/releases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/olympics/olympic_event_competition/olympic_games_contested",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/olympics/olympic_demonstration_competition/olympics_contested_as_demonstration",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/organization/organization_committee/committee_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/people/family_member/family",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/protected_sites/protected_site/system",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/radio/radio_episode_segment/episode",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/radio/radio_program_episode/program",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/rail/railway/part_of_network",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/rail/railway_terminus/railways_terminating_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/royalty/monarch/royal_line",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/soccer/football_league/league_system",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/spaceflight/space_mission/space_program",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/sports/golf_course/facility",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is part of obj",
      "property": "/sports/sports_championship_event/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/partof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/business/product_ingredient/derived_from",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/business/product_ingredient/ingredients",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/aviation/airport_runway/surface",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/amusement_parks/roller_coaster/material",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/architecture/lighthouse/construction",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/astronomy/meteorite/meteorite_composition",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/boats/ship/hull_material",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/business/product_with_ingredients/ingredients",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/distilled_spirits/blended_spirit/components",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/distilled_spirits/distilled_spirit_type/fermentation_base",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/distilled_spirits/distilled_spirit/fermentation_base",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/distilled_spirits/infused_spirit/base_spirit",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/distilled_spirits/infused_spirit/infusion",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/food/dish/ingredients",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/food/wine_style/grape_varieties",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/geology/geological_formation/type_of_rock",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/medicine/drug_brand/active_ingredients",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/visual_art/artwork/media",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/engineering/battery/chemistry/engineering/material_composition/material",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/food/food/nutrients/food/nutrition_fact/nutrient",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/food/recipe/ingredients/food/recipe_ingredient/ingredient",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/physics/hadron/composition/physics/subatomic_particle_composition/particle",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/wine/wine/grape_variety/wine/grape_variety_composition/grape_variety",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/medicine/drug_formulation/active_ingredient_moieties",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "subj is made of obj",
      "property": "/visual_art/artwork/support",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composedof"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/business/product_ingredient/derivatives",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/business/product_ingredient/used_in_other_ingredients",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/aviation/airport_runway_surface/runways",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/amusement_parks/roller_coaster_material/roller_coasters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/architecture/lighthouse_construction_material/used_on_lighthouse",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/astronomy/meteoric_composition/meteorites",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/business/product_ingredient/used_in_products",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/distilled_spirits/distilled_spirit_type/blends",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/distilled_spirits/fermentation_base/spirit_products",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/distilled_spirits/distilled_spirit_type/infusions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/food/ingredient/dishes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/wine/grape_variety/wine_styles",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/geology/rock_type/formations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/medicine/drug/brands",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/visual_art/visual_art_medium/artworks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/food/ingredient/recipes/food/recipe_ingredient/recipe",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/physics/quark/composes/physics/subatomic_particle_composition/composes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/wine/grape_variety/wines/wine/grape_variety_composition/wine",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/medicine/drug_ingredient/active_moiety_of_formulation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "obj is made of subj",
      "property": "/visual_art/visual_art_support/artworks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/composes"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/american_football/football_team/away_games",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/american_football/football_team/home_games",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/aviation/airline/accidents",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/award/competitor/competitions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/award/competitor/competitions_won",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/event/disaster_survivor/survived_disasters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/event/disaster_victim/killed_in_disaster",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/event/event_producer/events_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/event/event_promoter/events_promoted",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/government/politician/election_campaigns",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/government/electoral_college/elections",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/government/governmental_body/sessions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/law/constitutional_convention_delegate/constitutional_conventions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/law/court/legal_cases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/law/judge/cases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/military/military_person/participated_in_conflicts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/music/artist/concert_tours",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/music/tour_manager/tours_managed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_games/participating_countries",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/business/company_advisor/companies_advised",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/people/family/rise_to_prominence",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/royalty/coronation/monarch",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_league/seasons",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_referee/assistant_referee_at",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_referee/main_referee_for",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_team/matches",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/spaceflight/astronaut/missions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sport_country/multi_event_tournaments_participated_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sports_team/championships",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sports_league/seasons",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/american_football/football_player/games/american_football/player_game_statistics/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/american_football/football_player/passing/american_football/player_passing_statistics/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/american_football/football_player/receiving/american_football/player_receiving_statistics/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/american_football/football_player/rushing/american_football/player_rushing_statistics/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/baseball/baseball_team/team_stats/baseball/baseball_team_stats/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/baseball/baseball_player/batting_stats/baseball/batting_statistics/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/baseball/baseball_player/lifetime_batting_statistics/baseball/lifetime_batting_statistics/ending_season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/baseball/baseball_player/lifetime_batting_statistics/baseball/lifetime_batting_statistics/last_statistics_season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/baseball/baseball_player/lifetime_batting_statistics/baseball/lifetime_batting_statistics/starting_season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/basketball/basketball_player/player_statistics/basketball/basketball_player_stats/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/basketball/basketball_team/team_stats/basketball/basketball_team_stats/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/chess/chess_player/games_played/chess/chess_game_participation/game",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/event/public_speaker/speeches_or_presentations/event/speech_or_presentation/event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/film/film_festival_sponsor/festivals_sponsored/film/film_festival_sponsorship/festival",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/film/film_company/films/film/film_film_company_relationship/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/government/governmental_body/members/government/government_position_held/legislative_sessions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/government/politician/government_positions_held/government/government_position_held/legislative_sessions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/government/legislative_committee/members/government/legislative_committee_membership/session",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/government/politician/legislative_committees_served_on/government/legislative_committee_membership/session",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/law/litigant/party_to_cases/law/legal_case_party_relationship/case",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/military/military_combatant/casualties/military/casualties/military_conflict",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/military/military_combatant/force_deployments/military/force_strength/military_conflict",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/military/military_combatant/military_conflicts/military/military_combatant_group/conflict",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/military/military_combatant/military_commanders/military/military_command/military_conflict",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/military/military_commander/military_commands/military/military_command/military_conflict",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_athlete/demonstration_events_competed_in/olympics/demonstration_event_athlete_relationship/competition",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_athlete/country/olympics/olympic_athlete_affiliation/olympics",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_participating_country/athletes/olympics/olympic_athlete_affiliation/olympics",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_athlete/demonstration_medals_won/olympics/olympic_demonstration_medal_honor/event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_participating_country/demonstration_medals_won/olympics/olympic_demonstration_medal_honor/event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_athlete/demonstration_medals_won/olympics/olympic_demonstration_medal_honor/olympics",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_participating_country/demonstration_medals_won/olympics/olympic_demonstration_medal_honor/olympics",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_athlete/medals_won/olympics/olympic_medal_honor/event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_participating_country/medals_won/olympics/olympic_medal_honor/event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_athlete/medals_won/olympics/olympic_medal_honor/olympics",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_participating_country/medals_won/olympics/olympic_medal_honor/olympics",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_player/disciplinary_action/soccer/football_disciplinary_action/match",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_player/goals_scored/soccer/football_goal/match",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_league/teams/soccer/football_league_participation/from",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_team/league/soccer/football_league_participation/from",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_league/teams/soccer/football_league_participation/to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_team/league/soccer/football_league_participation/to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_player/matches_played/soccer/football_player_match_participation/match",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/soccer/football_team_manager/matches/soccer/football_team_manager_match_participation/match",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sport_country/athletic_performances/sports/competitor_competition_relationship/competition",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/tournament_event_competitor/events_competed_in/sports/competitor_competition_relationship/competition",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/tournament_team/tournaments_competed_in/sports/competitor_competition_relationship/competition",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sport_country/athletic_performances/sports/competitor_competition_relationship/tournament",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/tournament_event_competitor/events_competed_in/sports/competitor_competition_relationship/tournament",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/tournament_team/tournaments_competed_in/sports/competitor_competition_relationship/tournament",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sport_country/athletes/sports/competitor_country_relationship/tournament",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/tournament_event_competitor/country/sports/competitor_country_relationship/tournament",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sports_award_winner/awards/sports/sports_award/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/drafted_athlete/drafted/sports/sports_league_draft_pick/draft",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/professional_sports_team/draft_picks/sports/sports_league_draft_pick/draft",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sports_league/teams/sports/sports_league_participation/from",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sports_team/league/sports/sports_league_participation/from",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sports_league/teams/sports/sports_league_participation/to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sports_team/league/sports/sports_league_participation/to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/sports/sports_team/season_record/sports/sports_team_season_record/season",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/tennis/tennis_player/matches_lost/tennis/tennis_match/event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/tennis/tennis_player/matches_won/tennis/tennis_match/event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/tennis/tennis_tournament_champion/tennis_titles/tennis/tennis_tournament_championship/tournament",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/law/judge/cases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/law/litigant/party_to_cases/law/legal_case_party_relationship/case",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "subj was in obj",
      "property": "/olympics/olympic_torchbearer/participation_in_relays/olympics/olympic_torch_relay/olympics",
      "metaschema": "/base/fbontology/metaschema/predicate_id/participatedin"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/american_football/football_game/away_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/american_football/football_game/home_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/astronomy/astronomical_survey_project_organization/observatory",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/aviation/airliner_accident/operator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/award/competition/competitors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/award/competition/winner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_match/field_umpires",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_match/first_batting_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_match/man_of_the_match",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_match/match_referee",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_match/third_umpire",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_match/toss_winner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_match/winner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_roster/captain",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_series/team_one",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_series/team_two",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/cricket/cricket_tournament_event/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/event/disaster/survivors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/event/disaster/victims",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/event/produced_event/produced_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/event/promoted_event/promoted_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/government/election_campaign/candidate",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/government/election_campaign/party",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/government/election/winner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/government/indirect_election/electors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/government/legislative_session/legislature",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/law/constitutional_convention/delegates",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/law/legal_case/court",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/law/legal_case/judges",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/military/military_conflict/military_personnel_involved",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/music/concert_tour/artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/music/concert_tour/tour_manager",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_participating_country/olympics_participated_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/organization/organization/advisors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/royalty/monarch/coronation_event",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_league_season/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_league_season/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/assistant_referees",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/referee",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/spaceflight/space_mission/astronauts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/multi_event_tournament/participating_countries",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/sports_championship_event/champion",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/sports_championship_event/runner_up",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/sports_league_draft/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/sports_league_season/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/time/event/people_involved",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/american_football/football_game/passing/american_football/game_passing_statistics/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/american_football/football_game/passing/american_football/game_passing_statistics/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/american_football/football_game/receiving/american_football/game_receiving_statistics/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/american_football/football_game/receiving/american_football/game_receiving_statistics/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/american_football/football_game/rushing/american_football/game_rushing_statistics/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/american_football/football_game/rushing/american_football/game_rushing_statistics/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/chess/chess_game/players/chess/chess_game_participation/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/event/public_speaking_event/speech_presentation_discussion/event/speech_or_presentation/speaker_s",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/film/film_festival/sponsoring_organization/film/film_festival_sponsorship/sponsor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/film/film/other_film_companies/film/film_film_company_relationship/film_company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/government/legislative_session/members/government/government_position_held/governmental_body",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/government/legislative_session/members/government/government_position_held/office_holder",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/government/general_election/legislative_results/government/legislative_election_results/party",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/law/legal_case/parties/law/legal_case_party_relationship/parties",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/military/military_conflict/casualties/military/casualties/combatant",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/military/military_conflict/force_strengths/military/force_strength/combatant",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/military/military_conflict/combatants/military/military_combatant_group/combatants",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/military/military_conflict/commanders/military/military_command/military_combatant",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/military/military_conflict/commanders/military/military_command/military_commander",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_demonstration_competition/competitors/olympics/demonstration_event_athlete_relationship/athlete",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_games/athletes/olympics/olympic_athlete_affiliation/athlete",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_games/athletes/olympics/olympic_athlete_affiliation/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_demonstration_competition/medalists/olympics/olympic_demonstration_medal_honor/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_games/demonstration_medals_awarded/olympics/olympic_demonstration_medal_honor/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_demonstration_competition/medalists/olympics/olympic_demonstration_medal_honor/medalist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_games/demonstration_medals_awarded/olympics/olympic_demonstration_medal_honor/medalist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_event_competition/medalists/olympics/olympic_medal_honor/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_games/medals_awarded/olympics/olympic_medal_honor/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_event_competition/medalists/olympics/olympic_medal_honor/medalist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/olympics/olympic_games/medals_awarded/olympics/olympic_medal_honor/medalist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/disciplinary_action/soccer/football_disciplinary_action/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/goals/soccer/football_goal/point_awarded_to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/goals/soccer/football_goal/scorer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/players/soccer/football_player_match_participation/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/players/soccer/football_player_match_participation/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/substitution/soccer/football_player_substitution/off",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/substitution/soccer/football_player_substitution/on",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/managers/soccer/football_team_manager_match_participation/manager",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/soccer/football_match/managers/soccer/football_team_manager_match_participation/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/multi_event_tournament/athletic_performances/sports/competitor_competition_relationship/competitors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/tournament_event_competition/competitors/sports/competitor_competition_relationship/competitors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/multi_event_tournament/athletic_performances/sports/competitor_competition_relationship/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/tournament_event_competition/competitors/sports/competitor_competition_relationship/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/multi_event_tournament/athletic_performances/sports/competitor_competition_relationship/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/tournament_event_competition/competitors/sports/competitor_competition_relationship/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/multi_event_tournament/competitors/sports/competitor_country_relationship/competitor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/multi_event_tournament/competitors/sports/competitor_country_relationship/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/sports_league_season/awards/sports/sports_award/award_winner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/sports_league_season/awards/sports/sports_award/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/sports_league_draft/picks/sports/sports_league_draft_pick/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/sports/sports_league_draft/picks/sports/sports_league_draft_pick/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/tennis/tennis_tournament/match_results/tennis/tennis_match/loser",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "obj was in subj",
      "property": "/tennis/tennis_tournament/match_results/tennis/tennis_match/winner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparticipant"
    },
    {
      "sentence form": "subj discovered obj",
      "property": "/astronomy/astronomer/astronomical_objects_discovered",
      "metaschema": "/base/fbontology/metaschema/predicate_id/discovered"
    },
    {
      "sentence form": "subj discovered obj",
      "property": "/astronomy/astronomical_survey_project_organization/celestial_objects_discovered",
      "metaschema": "/base/fbontology/metaschema/predicate_id/discovered"
    },
    {
      "sentence form": "subj discovered obj",
      "property": "/chemistry/element_discoverer/discovered",
      "metaschema": "/base/fbontology/metaschema/predicate_id/discovered"
    },
    {
      "sentence form": "obj discovered subj",
      "property": "/astronomy/astronomical_discovery/discoverer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/discoveredby"
    },
    {
      "sentence form": "obj discovered subj",
      "property": "/astronomy/astronomical_discovery/discovery_organization",
      "metaschema": "/base/fbontology/metaschema/predicate_id/discoveredby"
    },
    {
      "sentence form": "obj discovered subj",
      "property": "/astronomy/meteorite/meteorite_fall_discoverer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/discoveredby"
    },
    {
      "sentence form": "obj discovered subj",
      "property": "/astronomy/meteorite/meteorite_observer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/discoveredby"
    },
    {
      "sentence form": "obj discovered subj",
      "property": "/chemistry/chemical_element/discoverer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/discoveredby"
    },
    {
      "sentence form": "subj services obj",
      "property": "/aviation/airport/focus_city_for",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/periodicals/newspaper_circulation_area/newspapers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/cvg/computer_game_region/versions_released_in_this_region",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/location/country/currency_formerly_used",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/location/country/currency_used",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/government/governmental_jurisdiction/agencies",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/government/governmental_jurisdiction/government",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/government/governmental_jurisdiction/government_bodies",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/government/governmental_jurisdiction/government_positions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/law/court_jurisdiction_area/courts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/meteorology/forecast_zone/weather_service",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/organization/organization_scope/organizations_with_this_scope",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/sports/sports_team_location/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/aviation/airport/airlines/aviation/airline_airport_presence/airline",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/engineering/location_with_mains_power/mains_power_standards/engineering/mains_power/compatible_plugs",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/rail/railway/rolling_stock/rail/rolling_stock_tenure/locomotive",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/travel/transport_terminus/travel_destinations_served/travel/transportation/transport_operator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/travel/travel_destination/how_to_get_here/travel/transportation/transport_operator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/law/court_jurisdiction_area/courts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "subj services obj",
      "property": "/location/location/nearby_airports",
      "metaschema": "/base/fbontology/metaschema/predicate_id/serviceareaof"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/broadcast/radio_station/slogan",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/broadcast/tv_station/slogan",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/education/educational_institution/motto",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/education/fraternity_sorority/symbol",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/film/film/tagline",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/organization/organization/slogan",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/royalty/order_of_chivalry/motto",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/education/educational_institution/colors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/education/educational_institution/mascot",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/education/fraternity_sorority/colors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/olympics/olympic_games/mascot",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/sports/sports_team/colors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/sports/sports_team/team_mascot",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/business/brand/colors/business/brand_colors/colors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/business/brand/slogans/business/brand_slogan/slogan",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/location/country/national_anthem/government/national_anthem_of_a_country/anthem",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/government/governmental_jurisdiction/official_symbols/location/location_symbol_relationship/symbol",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/symbols/coat_of_arms_bearer/coat_of_arms_used/symbols/armorial_grant/coat_of_arms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/skiing/run_rating/symbol",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/symbols/flag_referent/flag/symbols/flag_use/flag",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/sports/sports_team/fight_song",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "obj represents subj",
      "property": "/government/governmental_jurisdiction/official_symbols/location/location_symbol_relationship/symbol",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassymbol"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/education/school_mascot/school",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/olympics/olympic_mascot/olympic_games",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/sports/mascot/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/symbols/heraldic_coronet/noble_rank",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/business/advertising_slogan/brand/business/brand_slogan/brand",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/government/national_anthem/national_anthem_of/government/national_anthem_of_a_country/country",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/location/symbol_of_administrative_division/official_symbol_of/location/location_symbol_relationship/administrative_division",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/symbols/coat_of_arms/bearers/symbols/armorial_grant/armiger",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/skiing/run_rating_symbol/run_rating",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/symbols/flag/used_by/symbols/flag_use/flag_user",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "subj represents obj",
      "property": "/sports/fight_song/sports_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/symbolizes"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/biology/organism/children",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/computer/file_format/extended_to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/computer/programming_language/dialects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/engineering/channel_access_method/child_method",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/games/game/derivative_games",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/language/language_writing_system/child_writing_systems",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/people/person/children",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/religion/religion/branched_into",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/tv/tv_program/spin_offs",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/computer/web_browser/extensions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/cvg/computer_videogame/expansions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/games/game/expansions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the child of subj",
      "property": "/biology/hybrid_parent_classification/hybrids/biology/hybrid_parentage/hybrid",
      "metaschema": "/base/fbontology/metaschema/predicate_id/haschild"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/biology/organism/parents",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/computer/file_format/extended_from",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/computer/programming_language/parent_language",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/engineering/channel_access_method/parent_method",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/games/game/derived_from",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/language/language_writing_system/parent_writing_systems",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/people/person/parents",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/religion/religion/branched_from",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/tv/tv_program/spun_off_from",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/computer/web_browser_extension/works_on_web_browser",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/cvg/computer_game_expansion/expansion_for",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/games/game_expansion/game",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "obj is the parent of subj",
      "property": "/biology/hybrid/parent_classifications/biology/hybrid_parentage/parent",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasparent"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/religion/religious_organization/is_member_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/american_football/football_team/conference",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/american_football/football_team/division",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/aviation/airline/alliance",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/baseball/baseball_team/division",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/baseball/baseball_team/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/basketball/basketball_conference/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/basketball/basketball_team/conference",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/basketball/basketball_team/division",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/book/author/school_or_movement",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/education/academic/departments_old",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/education/school/school_district",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/ice_hockey/hockey_team/conference",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/ice_hockey/hockey_team/division",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/organization/organization/partnerships",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/people/person/nationality",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/people/person/religion",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/spaceflight/astronaut/space_agency",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/sports/sports_team/member_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/broadcast/tv_channel/network",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/zoos/zoo/memberships",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/american_football/football_coach/coaching_history/american_football/football_historical_coach_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/american_football/football_player/former_teams/american_football/football_historical_roster_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/american_football/football_player/current_team/american_football/football_roster_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/american_football/football_player/games/american_football/player_game_statistics/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/american_football/football_player/passing/american_football/player_passing_statistics/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/american_football/football_player/receiving/american_football/player_receiving_statistics/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/american_football/football_player/rushing/american_football/player_rushing_statistics/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/baseball/baseball_player/former_teams/baseball/baseball_historical_roster_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/baseball/baseball_player/current_team/baseball/baseball_roster_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/baseball/baseball_player/batting_stats/baseball/batting_statistics/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/basketball/basketball_player/former_teams/basketball/basketball_historical_roster_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/basketball/basketball_player/player_statistics/basketball/basketball_player_stats/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/basketball/basketball_player/team/basketball/basketball_roster_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/broadcast/radio_station/affiliations/broadcast/radio_affiliation_duration/network",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/broadcast/tv_station/affiliations/broadcast/tv_affiliation_duration/network",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/people/person/employment_history/business/employment_tenure/company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/cricket/cricket_umpire/accreditions/cricket/cricket_umpire_panel_membership/panel",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/education/academic/appointments_fellowships_etc/education/academic_post/institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/people/person/education/education/education/institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/fashion/fashion_designer/labels/fashion/designer_label_association/label",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/government/politician/government_positions_held/government/government_position_held/governmental_body",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/government/politician/legislative_committees_served_on/government/legislative_committee_membership/committee",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/government/politician/party/government/political_party_tenure/party",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/ice_hockey/hockey_player/former_team_s/ice_hockey/hockey_previous_roster_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/ice_hockey/hockey_player/current_team/ice_hockey/hockey_roster_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/law/judge/courts/law/judicial_tenure/court",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/military/military_person/service/military/military_service/military_force",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/military/military_person/service/military/military_service/unit",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/music/group_member/membership/music/group_membership/group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/organization/organization_member/committees_served_on/organization/organization_committee_membership/committee",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/organization/organization_member/member_of/organization/organization_membership/organization",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/royalty/chivalric_order_member/belongs_to_order/royalty/chivalric_order_membership/order",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/royalty/chivalric_order_officer/memberships_presented/royalty/chivalric_order_membership/order",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/soccer/football_player/goals_scored/soccer/football_goal/point_awarded_to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/soccer/football_team/league/soccer/football_league_participation/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/soccer/football_player/loans/soccer/football_player_loan/borrowing_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/soccer/football_player/loans/soccer/football_player_loan/lending_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/soccer/football_player/matches_played/soccer/football_player_match_participation/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/soccer/football_player/transfers/soccer/football_player_transfer/purchasing_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/soccer/football_player/transfers/soccer/football_player_transfer/selling_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/soccer/football_player/current_team/soccer/football_roster_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/sports/tournament_event_competitor/events_competed_in/sports/competitor_competition_relationship/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/sports/sports_award_winner/awards/sports/sports_award/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/sports/drafted_athlete/drafted/sports/sports_league_draft_pick/school",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/sports/drafted_athlete/drafted/sports/sports_league_draft_pick/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/sports/sports_team/league/sports/sports_league_participation/league",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/sports/sports_official/sports_association/sports/sports_official_tenure/sportsassociation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "subj is a member of obj",
      "property": "/law/judge/courts/law/judicial_tenure/court",
      "metaschema": "/base/fbontology/metaschema/predicate_id/memberof"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/religion/religious_organization/member_organizations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/american_football/football_conference/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/american_football/football_division/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/aviation/airline_alliance/member_airlines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/baseball/baseball_division/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/baseball/baseball_league/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/basketball/basketball_conference/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/basketball/basketball_division/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/book/school_or_movement/associated_authors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/cricket/cricket_administrative_body/members",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/education/department/academics_old",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/education/school_district/schools",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/ice_hockey/hockey_conference/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/ice_hockey/hockey_division/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/organization/organization_partnership/members",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/spaceflight/space_agency/astronauts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/tv/tv_network/channels",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/american_football/football_team/historical_coaching_staff/american_football/football_historical_coach_position/coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/american_football/football_team/historical_roster/american_football/football_historical_roster_position/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/american_football/football_team/current_roster/american_football/football_roster_position/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/baseball/baseball_team/historical_roster/baseball/baseball_historical_roster_position/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/baseball/baseball_team/current_roster/baseball/baseball_roster_position/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/basketball/basketball_team/historical_roster/basketball/basketball_historical_roster_position/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/basketball/basketball_team/roster/basketball/basketball_roster_position/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/broadcast/radio_network/affiliates/broadcast/radio_affiliation_duration/station",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/tv/tv_network/affiliates/broadcast/tv_affiliation_duration/station",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/business/employer/employees/business/employment_tenure/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/cricket/cricket_umpire_panel/members/cricket/cricket_umpire_panel_membership/umpire",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/education/academic_institution/visiting_scholars_fellows_etc/education/academic_post/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/education/educational_institution/students_graduates/education/education/student",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/fashion/fashion_label/designers/fashion/designer_label_association/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/government/governmental_body/members/government/government_position_held/office_holder",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/government/legislative_committee/members/government/legislative_committee_membership/member",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/government/political_party/politicians_in_this_party/government/political_party_tenure/politician",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/ice_hockey/hockey_team/historical_roster/ice_hockey/hockey_previous_roster_position/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/ice_hockey/hockey_team/current_roster/ice_hockey/hockey_roster_position/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/law/court/judges/law/judicial_tenure/judge",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/military/armed_force/personnel/military/military_service/military_person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/military/military_unit/servicemembers/military/military_service/military_person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/music/musical_group/member/music/group_membership/member",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/organization/organization_committee/members/organization/organization_committee_membership/member",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/organization/membership_organization/members/organization/organization_membership/member",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/royalty/order_of_chivalry/recipients/royalty/chivalric_order_membership/presented_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/royalty/order_of_chivalry/recipients/royalty/chivalric_order_membership/recipient",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/soccer/football_league/teams/soccer/football_league_participation/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/soccer/football_team/borrowed_players/soccer/football_player_loan/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/soccer/football_team/loaned_players/soccer/football_player_loan/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/soccer/football_team/purchased_players/soccer/football_player_transfer/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/soccer/football_team/sold_players/soccer/football_player_transfer/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/soccer/football_team/current_roster/soccer/football_roster_position/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/sports/tournament_team/tournaments_competed_in/sports/competitor_competition_relationship/competitors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/sports/professional_sports_team/draft_picks/sports/sports_league_draft_pick/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/sports/sports_league/teams/sports/sports_league_participation/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/law/court/judges/law/judicial_tenure/judge",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/government/government_office_category/officeholders/government/government_position_held/office_position_or_title",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is a member of subj",
      "property": "/sports/sports_team/roster/sports/sports_team_roster/player",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasmember"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/american_football/football_team/current_head_coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/architecture/museum/director",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/baseball/baseball_team/current_manager",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/basketball/basketball_team/head_coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/cricket/cricket_team/coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/ice_hockey/hockey_team/captain",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/ice_hockey/hockey_team/coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/royalty/kingdom/rulers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/baseball/baseball_team/historical_managers/baseball/baseball_historical_managerial_position/manager",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/baseball/baseball_team/current_coaches/baseball/current_coaching_tenure/baseball_coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/baseball/baseball_team/historical_coaches/baseball/historical_coaching_tenure/baseball_coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/basketball/basketball_team/previous_coaches/basketball/basketball_historical_coach_position/coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/book/periodical/editorial_staff/book/editorial_tenure/editor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/cricket/cricket_team/coaches/cricket/cricket_coach_tenure/coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/cricket/cricket_team/odi_stats/cricket/cricket_team_stats/odi_coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/cricket/cricket_team/test_stats/cricket/cricket_team_stats/odi_coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/cricket/cricket_team/odi_stats/cricket/cricket_team_stats/test_coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/cricket/cricket_team/test_stats/cricket/cricket_team_stats/test_coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/dining/restaurant/chefs/dining/restaurant_chef_association/chef",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/government/governmental_jurisdiction/governing_officials/government/government_position_held/governmental_body",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/government/governmental_jurisdiction/governing_officials/government/government_position_held/office_holder",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/military/military_combatant/military_commanders/military/military_command/military_commander",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/music/conducted_ensemble/conductors/music/conducting_tenure/conductor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/organization/organization/leadership/organization/leadership/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/organization/organization/board_members/organization/organization_board_membership/member",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/religion/religious_leadership_jurisdiction/leader/religion/religious_organization_leadership/leader",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/religion/religious_organization/leaders/religion/religious_organization_leadership/leader",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/royalty/order_of_chivalry/officers/royalty/chivalric_order_position_tenure/officer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/soccer/football_team/manager/soccer/football_team_management_tenure/manager",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "obj is the leader of subj",
      "property": "/sports/sports_team/coaches/sports/sports_team_coach_tenure/coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasleader"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/american_football/football_coach/current_team_head_coached",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/architecture/museum_director/museum",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/baseball/baseball_manager/current_team_managed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/basketball/basketball_coach/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/cricket/cricket_coach/current_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/cricket/cricket_roster/coach",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/ice_hockey/hockey_coach/current_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/royalty/monarch/kingdom",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/royalty/royal_line/kingdom_s_ruled",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/baseball/baseball_manager/former_teams_managed/baseball/baseball_historical_managerial_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/baseball/baseball_coach/current_team_coaching/baseball/current_coaching_tenure/baseball_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/baseball/baseball_coach/historical_teams_coached/baseball/historical_coaching_tenure/baseball_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/basketball/basketball_coach/previous_teams/basketball/basketball_historical_coach_position/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/book/periodical_editor/periodicals_edited/book/editorial_tenure/periodical",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/cricket/cricket_coach/teams/cricket/cricket_coach_tenure/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/cricket/cricket_coach/overall_odi_stats/cricket/cricket_team_stats/odi_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/cricket/cricket_coach/overall_test_stats/cricket/cricket_team_stats/odi_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/cricket/cricket_coach/overall_odi_stats/cricket/cricket_team_stats/test_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/cricket/cricket_coach/overall_test_stats/cricket/cricket_team_stats/test_team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/dining/chef/restaurants/dining/restaurant_chef_association/restaurant",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/government/governmental_body/members/government/government_position_held/jurisdiction_of_office",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/government/politician/government_positions_held/government/government_position_held/jurisdiction_of_office",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/military/military_commander/military_commands/military/military_command/military_combatant",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/music/conductor/groups/music/conducting_tenure/ensemble",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/business/board_member/leader_of/organization/leadership/organization",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/business/board_member/organization_board_memberships/organization/organization_board_membership/organization",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/religion/religious_leader/religious_leadership/religion/religious_organization_leadership/jurisdiction",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/religion/religious_leader/religious_leadership/religion/religious_organization_leadership/organization",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/royalty/chivalric_order_officer/offices_held/royalty/chivalric_order_position_tenure/order",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/soccer/football_team_manager/team/soccer/football_team_management_tenure/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/soccer/football_team_manager/matches/soccer/football_team_manager_match_participation/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is the leader of obj",
      "property": "/sports/sports_team_coach/teams_coached/sports/sports_team_coach_tenure/team",
      "metaschema": "/base/fbontology/metaschema/predicate_id/leaderof"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/automotive/make/parent_company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/automotive/manufacturing_plant/company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/automotive/privately_owned_vehicle/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/book/newspaper/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/broadcast/radio_station/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/broadcast/tv_station/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/business/shopping_center/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/internet/website/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/law/us_patent/assignee",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/sports/professional_sports_team/owner_s",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/architecture/structure/owner/architecture/ownership/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/biology/owned_animal/owners/biology/animal_ownership/owners",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/boats/ship/owners/boats/ship_ownership/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/business/asset/owners/business/asset_ownership/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/zoos/zoo/owner/business/asset_ownership/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/business/brand/owner_s/business/company_brand_relationship/company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/business/issue/holders/business/holding/holder",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/interests/collectable_item/in_collections/interests/collection/collector",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/internet/website/owner_new/internet/website_ownership/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/military/military_post/used_by_armed_forces/military/military_post_use/armed_force",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/rail/locomotive_owner/locomotives_owned/rail/locomotive_ownership/locomotive",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/visual_art/artwork/owners/visual_art/artwork_owner_relationship/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/skiing/ski_area/owner/skiing/ski_area_ownership/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/education/athletics_brand/institution",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj is owned by obj",
      "property": "/travel/hotel_brand/owned_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasowner"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/automotive/company/make_s",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/automotive/company/manufacturing_plants",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/book/newspaper_owner/newspapers_owned",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/broadcast/radio_station_owner/radio_stations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/broadcast/tv_station_owner/tv_stations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/business/shopping_center_owner/shopping_centers_owned",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/internet/website_owner/websites_owned",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/law/patent_assignee/patents_assigned",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/sports/sports_team_owner/teams_owned",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/architecture/architectural_structure_owner/structures_owned/architecture/ownership/structure",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/biology/animal_owner/animals_owned/biology/animal_ownership/animal",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/boats/ship_owner/ships_owned/boats/ship_ownership/ship",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/amusement_parks/park/owner/business/asset_ownership/owned_asset",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/business/asset_owner/assets_owned/business/asset_ownership/owned_asset",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/business/consumer_company/brands/business/company_brand_relationship/brand",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/business/business_operation/competitive_space/business/competitive_space_mediator/brand",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/business/shareholder/holding/business/holding/issue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/interests/collector/collections/interests/collection/items",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/internet/website_owner/websites_owned_new/internet/website_ownership/website",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/military/armed_force/military_posts/military/military_post_use/military_post",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/rail/locomotive/owners/rail/locomotive_ownership/owner",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/visual_art/art_owner/artworks_owned/visual_art/artwork_owner_relationship/artwork",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/skiing/ski_area_owner/ski_areas_owned/skiing/ski_area_ownership/ski_area",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/education/educational_institution/athletics_brand",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj owns obj",
      "property": "/travel/hotel_brand_owner/hotel_brands_owned",
      "metaschema": "/base/fbontology/metaschema/predicate_id/owns"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/astronomy/constellation/bordering_constellations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/automotive/platform/related",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/education/academic/advisors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/education/academic/advisees",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/medicine/disease/affiliated_diseases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/metropolitan_transit/transit_line/alternate_lines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/metropolitan_transit/transit_line/primary_line",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/business/competitive_space/related_industries",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/celebrities/supercouple/partners",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/astronomy/constellation/bordering_constellations_new/astronomy/constellation_bordering_relationship/constellations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/aviation/aircraft_model/comparable_aircraft/aviation/comparable_aircraft_relationship/aircraft",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/celebrities/celebrity/celebrity_friends/celebrities/friendship/friend",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/celebrities/celebrity/celebrity_rivals/celebrities/rivalry/rival",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/influence/influence_node/peers/influence/peer_relationship/peers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/location/location/adjoin_s/location/adjoining_relationship/adjoins",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/location/location/coterminous_with/location/cotermination/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/people/person/sibling_s/people/sibling_relationship/sibling",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/royalty/chivalric_rank/opposite_gender_equivalent/royalty/chivalric_rank_gender_equivalence/rank",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/royalty/chivalric_title/opposite_gender_equivalent/royalty/chivalric_title_gender_equivalency/equivalent_titles",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/royalty/noble_rank/opposite_gender_equivalent/royalty/noble_rank_gender_equivalence/noble_rank",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/royalty/noble_title/opposite_gender_equivalent/royalty/noble_title_gender_equivalency/equivalent_title",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/automotive/model/related_models/automotive/similar_automobile_models/related_model",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/medicine/manufactured_drug_form/therapeutic_equivalents/medicine/drug_therapeutic_equivalence_relationship/equivalent",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "subj is friends with obj",
      "property": "/people/person/spouse_s/people/marriage/spouse",
      "metaschema": "/base/fbontology/metaschema/predicate_id/peerof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/astronomy/celestial_object_category/subcategories",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/astronomy/telescope_type/lower_telescope_classification",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/astronomy/type_of_planetographic_feature/includes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/biology/gene_ontology_group/narrower_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/biology/organism_classification/lower_classifications",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/business/industry/child_industry",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/business/product_ingredient/generalization_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/chemistry/chemical_classification/lower_classifications",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/computer/computer_peripheral_class/instances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/computer/computer_processor/variants",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/computer/computer/includes_models",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/computer/operating_system/includes_os_versions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/computer/software_genre/subgenres",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/computer/software_license/versions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/education/field_of_study/subdisciplines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/engineering/engine_category/sub_categories",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/engineering/engine/variants",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/engineering/material/subclass",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/engineering/signal_modulation_mode/child_modulation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/fashion/garment/more_specialized_forms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/geography/geographical_feature_category/subcategories",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/geology/rock_type/sub_types",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/interests/collection_category/sub_categories",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/language/language_family/sub_families",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/media_common/media_genre/child_genres",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/diagnostic_sign/includes_signs",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/diagnostic_test/includes_tests",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/disease/includes_diseases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/icd_9_cm_classification/includes_classifications",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/symptom/includes_symptoms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/meteorology/cloud/varieties",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/music/compositional_form/subforms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/music/genre/subgenre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/people/cause_of_death/includes_causes_of_death",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/people/ethnicity/includes_groups",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/people/profession/specializations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/physics/particle_family/subclasses",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/protected_sites/site_listing_category/subcategories",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/rail/locomotive_class/subclasses",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/religion/religion/includes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/award/award/category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/biology/domesticated_animal/breeds",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/cvg/computer_game_engine_family/engines_in_this_family",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/disease/stages",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/music/instrument/variation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/superclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/celestial_object_category/subcategory_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/telescope_type/higher_classification",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/astronomy/type_of_planetographic_feature/included_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/biology/gene_ontology_group/broader_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/biology/organism_classification/higher_classification",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/business/industry/parent_industry",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/business/product_ingredient/variety_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/chemistry/chemical_classification/higher_classifications",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/computer/computer_peripheral_class/instance_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/computer/computer_processor/processor_family",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/computer/computer/parent_model",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/computer/operating_system/parent_os",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/computer/software_genre/parent_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/computer/software_license/version_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/education/field_of_study/subdiscipline_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/engine_category/category_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/engine/variation_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/material/parent_material_class",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/engineering/signal_modulation_mode/parent_modulation",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/fashion/garment/specialization_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/geography/geographical_feature_category/subcategory_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/geology/rock_type/parent_rock_type",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/interests/collection_category/parent_category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/language/language_family/member_of_language_families",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/media_common/media_genre/parent_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/medicine/diagnostic_sign/parent_sign",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/medicine/diagnostic_test/parent_test",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/medicine/disease/parent_disease",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/medicine/icd_9_cm_classification/parent_classification",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/medicine/symptom/parent_symptom",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/meteorology/cloud/cloud_family",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/music/compositional_form/superforms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/music/genre/parent_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/people/cause_of_death/parent_cause_of_death",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/people/ethnicity/included_in_group",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/people/profession/specialization_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/physics/particle_family/parent_class",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/protected_sites/site_listing_category/supercategory",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/rail/locomotive_class/parent_class",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/religion/religion/is_part_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/award/award_category/category_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/biology/animal_breed/breed_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/cvg/computer_game_engine/engine_family",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/medicine/disease_stage/stage_of",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj is a type of obj",
      "property": "/music/instrument/family",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subclassof"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/spaceflight/space_mission/landing_site",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/aviation/airliner_accident/accident_site",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/chess/chess_game/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/conferences/conference/venue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/cricket/cricket_match/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/cricket/cricket_tournament_event/host",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/event/disaster/areas_affected",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/film/film_festival_event/venues",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/film/film_festival/location",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/government/election/district",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/meteorology/tropical_cyclone/affected_areas",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/military/military_conflict/locations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/music/concert/venue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/olympics/olympic_demonstration_competition/venue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/olympics/olympic_event_competition/venue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/olympics/olympic_games/host_city",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/olympics/olympic_games/venues",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/opera/opera_production/performed_at",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/soccer/football_match/held_at",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/spaceflight/space_mission/destination",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/spaceflight/space_mission/launch_site",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/sports/multi_event_tournament/venues",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/theater/theater_production/performed_at",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/time/event/locations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "subj occurred at obj",
      "property": "/exhibitions/exhibition/venues/exhibitions/exhibition_run/venue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/tookplaceat"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/conferences/conference_venue/conferences",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/government/political_district/elections",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/meteorology/cyclone_affected_area/cyclones",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/music/performance_venue/concerts",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/olympics/olympic_venue/olympic_events_demonstrated_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/olympics/olympic_venue/olympic_events_contested_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/olympics/olympic_host_city/olympics_hosted",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/olympics/olympic_venue/olympic_games_used_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/opera/opera_house/productions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/soccer/football_pitch/matches",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/spaceflight/mission_destination/missions_sent_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/spaceflight/rocket_launch_site/missions_launched_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/theater/theater/theatrical_productions_staged_here",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/location/location/events",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj occurred at subj",
      "property": "/exhibitions/exhibition_venue/exhibitions_at_this_venue/exhibitions/exhibition_run/exhibition",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hadeventtakeplace"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/architecture/architectural_style/examples",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/media_common/literary_genre/books_in_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/media_common/literary_genre/stories_in_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/book/magazine_genre/magazines_in_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/book/school_or_movement/associated_works",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/broadcast/genre/content",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/broadcast/radio_format/stations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/comic_books/comic_book_genre/comic_book_series_in_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/comic_books/comic_book_genre/stories_in_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/comic_strips/comic_strip_genre/comic_strips_of_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/computer/software_genre/software_in_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/cvg/cvg_genre/games",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/film/film_genre/films_in_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/dining/cuisine/dishes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/games/game_genre/boardgames",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/internet/website_category/sites",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/media_common/netflix_genre/titles",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/music/genre/albums",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/opera/opera_genre/operas_in_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/theater/theater_genre/plays_in_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/tv/tv_genre/programs",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/visual_art/art_period_movement/associated_artworks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/visual_art/visual_art_genre/artworks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "obj is in the genre subj",
      "property": "/music/music_video_genre/music_videos_of_this_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/genreof"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/architecture/structure/architectural_style",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/book/book/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/book/short_story/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/book/magazine/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/book/written_work/school_or_movement",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/broadcast/content/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/broadcast/radio_station/format",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/comic_books/comic_book_series/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/comic_books/comic_book_story/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/comic_strips/comic_strip/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/computer/software/software_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/cvg/computer_videogame/cvg_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/film/film/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/food/dish/cuisine",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/games/game/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/internet/website/category",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/media_common/netflix_title/netflix_genres",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/music/album/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/opera/opera/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/theater/play/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/tv/tv_program/genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/visual_art/artwork/period_or_movement",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/visual_art/artwork/art_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj is in the genre obj",
      "property": "/music/music_video/music_video_genre",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hasgenre"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/automotive/generation/successor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/automotive/model_year/next_model_year",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/automotive/model/successor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/automotive/platform/successor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/cvg/computer_game_engine/successor_engine",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/government/government_agency/successor_agency",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/royalty/royal_line/succeeded_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/royalty/system_of_nobility/supercedes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/government/primary_election/follow_on_election",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/sports/defunct_sports_team/later_known_as",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "subj was succeeded by obj",
      "property": "/aviation/aircraft_model/variants",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeededby"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/automotive/generation/predecessor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/automotive/model_year/previous_model_year",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/automotive/model/predecessor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/automotive/platform/predecessor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/cvg/computer_game_engine/predecessor_engine",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/government/government_agency/predecessor_agency",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/royalty/royal_line/preceded_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/royalty/system_of_nobility/superceded_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/government/election/primaries",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/sports/sports_team/previously_known_as",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "obj was succeeded by subj",
      "property": "/aviation/aircraft_model/parent_aircraft_model",
      "metaschema": "/base/fbontology/metaschema/predicate_id/succeeds"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/film_crew_gig/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/architecture/engineer/projects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/architecture/engineering_firm/projects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/architecture/architecture_firm/projects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/automotive/designer/automobiles_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/book/audio_book_reader/audio_books_read",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/book/author/book_editions_edited",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/book/author/contributing_author_to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/book/illustrator/book_edition_covers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/book/illustrator/book_editions_illustrated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/book/illustrator/magazine_covers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/book/illustrator/magazine_issues_illustrated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/book/author/series_written_or_contributed_to",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/book/translator/works_translated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_colorist/comic_covers_colored",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_inker/comic_covers_inked",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_letterer/comic_covers_lettered",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_penciler/comic_covers_penciled",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_editor/issues_edited",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_writer/additional_plotting_contributions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/cvg/cvg_developer/game_versions_developed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/cinematographer/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/film_costumer_designer/costume_design_for_film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/director/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/editor/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/producer/films_executive_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/film_art_director/films_art_directed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/film_casting_director/films_casting_directed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/film_production_designer/films_production_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/film_set_designer/film_sets_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/music_contributor/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/producer/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/production_company/films",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/film_story_contributor/film_story_credits",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/writer/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/engineer/releases_engineered",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/producer/releases_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/artist/track",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/engineer/tracks_engineered",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/producer/tracks_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/conductor/operas_conducted",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/opera/opera_producer/operas_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/opera/opera_company/operas_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/opera/opera_director/operas_directed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/theater/theater_choreographer/plays_choreographed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/theater/theater_director/plays_directed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/theater/musical_director/musical_director_for",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/theater/theater_producer/plays_produced",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_director/tv_segments_directed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_writer/tv_segments_written",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_director/episodes_directed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_writer/episodes_written",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_colorist/comic_stories_colored",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_inker/comic_books_inked",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_letterer/comic_stories_lettered",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_penciler/comic_books_penciled",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/comic_books/comic_book_writer/comic_books_written",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/cvg/game_voice_actor/computer_game_voice_performances/cvg/game_performance/game",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/event/public_speaker/speeches_or_presentations/event/speech_or_presentation/presented_work",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/actor/dubbing_performances/film/dubbing_performance/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/film_crewmember/films_crewed/film/film_crew_gig/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/actor/film/film/performance/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/person_or_entity_appearing_in_film/films/film/personal_film_appearance/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/media_common/completer_of_unfinished_work/completed_unfinished_works/media_common/completion_of_unfinished_work/unfinished_work",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/artist/contribution/music/recording_contribution/album",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/artist/track_contributions/music/track_contribution/track",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/opera/opera_designer/operas_designed/opera/opera_designer_gig/opera",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/opera/opera_production_staff/opera_productions/opera/opera_production_staff_gig/opera",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/opera_singer/opera_roles/opera/opera_role/opera",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/projects/project_participant/projects/projects/project_participation/project",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/theater/theater_designer/plays_designed/theater/theater_designer_gig/play",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/theater/theater_production_staff/theater_productions/theater/theater_production_staff_gig/play",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/theater/theater_actor/theater_roles/theater/theater_role/play",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_actor/starring_roles/tv/regular_tv_appearance/seasons",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_actor/starring_roles/tv/regular_tv_appearance/series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_crewmember/tv_episodes_crewed/tv/tv_crew_gig/episode",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_program_guest/appeared_on/tv/tv_guest_personal_appearance/episode",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_actor/guest_roles/tv/tv_guest_role/episodes_appeared_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_producer/tv_episodes_produced/tv/tv_producer_episode_credit/episode",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_producer/programs_produced/tv/tv_producer_term/program",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_writer/tv_programs/tv/tv_program_writer_relationship/tv_program",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_personality/tv_regular_appearances/tv/tv_regular_personal_appearance/program",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_personality/tv_regular_appearances/tv/tv_regular_personal_appearance/seasons",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_program_guest/segment_appearances/tv/tv_segment_guest_appearance/segment",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_actor/tv_segment_performances/tv/tv_segment_performance/segment",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_personality/tv_segment_appearances/tv/tv_segment_personal_appearance/segment",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/broadcast/artist/content",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/exhibitions/exhibition/curators",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/music_video_crewmember/music_video_productions_crewed/music/music_video_gig/music_video",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/music_video_performer/music_video_performances/music/music_video_performance/music_video",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/music_video_choreographer/music_videos_choreographed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/music/music_video_director/music_videos_directed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/film/film_song_performer/film_songs/film/film_song_relationship/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_song_performer/episode_segments/tv/tv_segment_song_relationship/segment",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "subj contributed to obj",
      "property": "/tv/tv_song_performer/episodes/tv/tv_episode_song_relationship/episode",
      "metaschema": "/base/fbontology/metaschema/predicate_id/contributedto"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/architecture/structure/engineer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/architecture/structure/engineering_firm",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/architecture/structure/architecture_firm",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/automotive/generation/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/book/book_edition/reader",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/book/book_edition/editor_of_this_edition",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/book/book_edition/contributing_authors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/book/book_edition/cover_artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/book/book_edition/interior_illustrations_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/book/magazine_issue/cover_artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/book/magazine_issue/interior_illustrations_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/book/literary_series/author_s",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/book/translation/translator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_issue/cover_colors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_issue/cover_inks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_issue/cover_letters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_issue/cover_pencils",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_issue/editor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_story/additional_plotting",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/cvg/game_version/developer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film_featured_song/performed_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/cinematography",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/costume_design_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/directed_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/edited_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/executive_produced_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/film_art_direction_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/film_casting_director",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/film_production_design_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/film_set_decoration_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/music",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/produced_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/production_companies",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/story_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/written_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/release/engineers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/release/producers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/recording/artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/recording/engineer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/recording/producer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/opera/opera_production/conductor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/opera/opera_production/producer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/opera/opera_production/producing_company",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/opera/opera_production/stage_director",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/theater/theater_production/choreographer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/theater/theater_production/director",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/theater/theater_production/musical_director",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/theater/theater_production/producer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_episode_segment/director",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_episode_segment/writer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_series_episode/director",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_series_episode/writer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_story/colors",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_story/inks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_story/letters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_story/pencils",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/comic_books/comic_book_story/script",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/cvg/computer_videogame/characters/cvg/game_performance/voice_actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/event/presented_work/performances/event/speech_or_presentation/speaker_s",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/dubbing_performances/film/dubbing_performance/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/other_crew/film/film_crew_gig/crewmember",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/starring/film/performance/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/personal_appearances/film/personal_film_appearance/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/media_common/unfinished_work/completions/media_common/completion_of_unfinished_work/finisher",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/concert/performances/music/concert_performance/artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/concert/performances/music/concert_performance/band_members",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/concert/set_list/music/concert_set_list/artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/concert/set_list/music/concert_set_list/guest_artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/album/contributor/music/recording_contribution/contributor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/recording/contributions/music/track_contribution/contributor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/opera/opera_production/designers/opera/opera_designer_gig/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/opera/opera_production/production_staff/opera/opera_production_staff_gig/staff_member",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/opera/opera_production/cast/opera/opera_role/performer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/projects/project/participants/projects/project_participation/participant",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/theater/theater_production/designers/theater/theater_designer_gig/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/theater/theater_production/production_staff/theater/theater_production_staff_gig/staff_member",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/theater/theater_production/cast/theater/theater_role/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_program/regular_cast/tv/regular_tv_appearance/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_series_season/regular_cast/tv/regular_tv_appearance/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_series_episode/other_crew/tv/tv_crew_gig/crewmember",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_series_episode/guest_personal_appearances/tv/tv_guest_personal_appearance/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_series_episode/guest_stars/tv/tv_guest_role/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_series_episode/producers/tv/tv_producer_episode_credit/producer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_program/tv_producer/tv/tv_producer_term/producer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_program/recurring_writers/tv/tv_program_writer_relationship/writer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_program/regular_personal_appearances/tv/tv_regular_personal_appearance/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_series_season/regular_personal_appearances/tv/tv_regular_personal_appearance/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_episode_segment/guest_personal_appearances/tv/tv_segment_guest_appearance/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_episode_segment/performances/tv/tv_segment_performance/actor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_episode_segment/personal_appearances/tv/tv_segment_personal_appearance/person",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/broadcast/content/artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/exhibitions/exhibition_curator/exhibitions_curated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/music_video/artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/music_video/choreographer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/music_video/crew/music/music_video_gig/crewmember",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/music_video/directed_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/music/music_video/performances/music/music_video_performance/music_video_performer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/film/film/songs/film/film_song_relationship/performers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_episode_segment/songs/tv/tv_segment_song_relationship/performers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj contributed to subj",
      "property": "/tv/tv_series_episode/songs/tv/tv_episode_song_relationship/performers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascontributor"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/book/newspaper/headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/aviation/airline/hubs",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/library/public_library_system/central_library",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/ar_department/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/ar_province/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/australian_state/capital_city",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/australian_territory/capital_city",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/br_state/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/ca_territory/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/cn_autonomous_county/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/cn_autonomous_prefecture/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/cn_autonomous_region/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/cn_prefecture_level_city/city_seat",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/cn_prefecture/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/cn_province/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/country/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/de_regierungsbezirk/district_seat",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/de_rural_district/district_seat",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/de_state/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/es_autonomous_city/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/es_autonomous_community/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/es_comarca/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/es_province/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/fr_department/chef_lieu",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/fr_region/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/id_province/Capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/id_regency/regency_seat",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/in_district/district_headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/in_division/administrative_headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/in_state/administrative_capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/in_state/judicial_capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/in_state/legislative_capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/in_union_territory/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/it_province/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/it_region/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/jp_prefecture/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/jp_subprefecture/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/kp_province/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/mx_municipality/municipal_seat",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/mx_state/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/my_state/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/nl_province/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/province/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/ru_autonomous_oblast/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/ru_autonomous_okrug/administrative_center",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/ru_krai/administrative_center",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/ru_oblast/administrative_center",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/ru_raion/administrative_center",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/ru_republic/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/tr_district/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/tr_province/central_district",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/tw_county/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/tw_province/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/uk_council_area/administrative_headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/uk_district/administrative_headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/uk_metropolitan_borough/administrative_headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/uk_non_metropolitan_county/administrative_headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/uk_non_metropolitan_district/administrative_headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/uk_principal_area/administrative_headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/uk_region/headquarters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/us_county/county_seat",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/us_state/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/vn_province/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/sports/sports_team/arena_stadium",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "obj is the headquarters of subj",
      "property": "/location/administrative_division/capital/location/administrative_division_capital_relationship/capital",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascenter"
    },
    {
      "sentence form": "subj is the headquarters of obj",
      "property": "/aviation/airport/hub_for",
      "metaschema": "/base/fbontology/metaschema/predicate_id/centerfor"
    },
    {
      "sentence form": "subj is the headquarters of obj",
      "property": "/sports/sports_facility/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/centerfor"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/book/short_story/characters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/book/book/characters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/book/poem/characters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/comic_books/comic_book_fictional_universe/characters_primarily_appearing_in_this_universe",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/comic_books/comic_book_issue/characters_on_cover",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/comic_books/comic_book_series/featured_characters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/comic_books/comic_book_story/characters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/comic_strips/comic_strip/characters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/fictional_universe/fictional_universe/characters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/theater/play/characters",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/cvg/computer_videogame/characters/cvg/game_performance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/film/film/dubbing_performances/film/dubbing_performance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/film/film/starring/film/performance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/opera/opera/characters/opera/opera_character_voice/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/tv/tv_program/regular_cast/tv/regular_tv_appearance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/tv/tv_series_season/regular_cast/tv/regular_tv_appearance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/tv/tv_series_episode/guest_stars/tv/tv_guest_role/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/tv/tv_episode_segment/performances/tv/tv_segment_performance/character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "obj is a character in subj",
      "property": "/music/music_video/performances/music/music_video_performance/music_video_character",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hascharacter"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/book/book_character/appears_in_stories",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/book/book_character/appears_in_book",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/book/poem_character/appears_in_poems",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/comic_books/comic_book_character/first_appearance",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/comic_books/comic_book_character/primary_universe",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/comic_books/comic_book_character/cover_appearances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/comic_books/comic_book_character/regular_featured_appearances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/comic_books/comic_book_character/story_specific_appearances",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/comic_strips/comic_strip_character/comic_strips_appeared_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/fictional_universe/fictional_character/appears_in_these_fictional_universes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/theater/theater_character/plays_appears_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/tv/tv_character/first_tv_appearance",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/tv/tv_character/last_tv_appearance",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/cvg/game_character/games/cvg/game_performance/game",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/film/film_character/portrayed_in_films_dubbed/film/dubbing_performance/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/film/film_character/portrayed_in_films/film/performance/film",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/opera/opera_character/operas_appears_in/opera/opera_character_voice/opera",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/tv/tv_character/appeared_in_tv_program/tv/regular_tv_appearance/seasons",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/tv/tv_character/appeared_in_tv_program/tv/regular_tv_appearance/series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/tv/tv_character/appeared_in_tv_episodes/tv/tv_guest_role/episodes_appeared_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/tv/tv_character/appeared_in_tv_episode_segments/tv/tv_segment_performance/segment",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "subj is in obj",
      "property": "/music/music_video_character/portrayed_in_music_videos/music/music_video_performance/music_video",
      "metaschema": "/base/fbontology/metaschema/predicate_id/appearsin"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/business/brand/includes_brands",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/business/product_line/includes_product_lines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/automotive/engine_type/examples",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/automotive/engine_type/used_in",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/automotive/body_style/examples",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/aviation/aircraft_line/models_in_line",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/business/brand/products",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/business/product_line/products",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/chemistry/chemical_element/isotopes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/language/human_language/dialects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/language/language_family/languages",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/olympics/olympic_sport/events",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/biology/informal_biological_grouping/included_classifications",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/food/ingredient/more_specific_ingredient",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/education/athletics_brand/teams",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/drug_ingredient/more_specific_ingredient",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/business/brand/product_lines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/drug_formulation/manufactured_forms",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/drug_formulation/reference_form",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/travel/hotel_brand/hotels_in_this_brand",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/biology/organism_classification_rank/lower_rank",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "obj is a type of subj",
      "property": "/medicine/drug_brand/canonical_drug",
      "metaschema": "/base/fbontology/metaschema/predicate_id/broaderthan"
    },
    {
      "sentence form": "subj created obj",
      "property": "/amusement_parks/ride_designer/rides",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/amusement_parks/ride_manufacturer/rides",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/architecture/architect/structures_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/architecture/landscape_architect/landscape_project",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/aviation/aircraft_designer/aircraft_models_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/award/ranked_list_compiler/ranked_lists",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/boats/ship_designer/ship_classes_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/boats/ship_designer/boats_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/book/author/works_edited",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/book/author/works_written",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/book/series_editor/book_edition_series_edited",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/book/illustrator/books_illustrated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/book/interviewee/interviews_given",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/book/interviewer/interviews_conducted",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/business/issuer/issue",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/comic_books/comic_book_creator/characters_created",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/comic_books/comic_book_creator/series_created",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/computer/computer_designer/computers_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/computer/operating_system_developer/operating_systems_developed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/computer/programming_language_developer/programming_languages_developed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/computer/programming_language_designer/languages_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/computer/software_developer/software",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/cvg/computer_game_engine_developer/computer_game_engines_developed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/cvg/cvg_designer/games_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/cvg/cvg_developer/games_developed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/engineering/engine_designer/engines_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/food/recipe_author/recipes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/games/game_designer/games_designed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/internet/blogger/blog",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/language/language_creator/languages_created",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/law/constitutional_amendment_proposer/constitutional_amendments_proposed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/law/inventor/inventions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/people/person/quotations",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/medicine/vaccine_developer/vaccine",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/music/artist/album",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/music/composer/compositions",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/music/lyricist/lyrics_written",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/opera/librettist/libretti",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/organization/organization_founder/organizations_founded",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/royalty/chivalric_order_founder/orders_founded",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/spaceflight/rocket_engine_designer/rocket_engines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/sports/golf_course_designer/golf_courses",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/theater/theatrical_composer/plays_composed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/theater/theatrical_lyricist/play_lyrics_written",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/theater/theatrical_orchestrator/plays_orchestrated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/tv/tv_program_creator/programs_created",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/visual_art/visual_artist/art_series",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/visual_art/visual_artist/artworks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/fictional_universe/fictional_character_creator/fictional_characters_created",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/comic_strips/comic_strip_creator/comic_strips_written/comic_strips/comic_strip_creator_duration/comic_strip",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/media_common/completer_of_unfinished_work/completed_unfinished_works/media_common/completion_of_unfinished_work/finished_work",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/fictional_universe/fictional_universe_creator/fictional_universes_created",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj created obj",
      "property": "/government/polling_authority/polls",
      "metaschema": "/base/fbontology/metaschema/predicate_id/created"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/amusement_parks/ride/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/amusement_parks/ride/manufacturer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/architecture/structure/architect",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/architecture/landscape_project/landscape_architect",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/aviation/aircraft_model/designed_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/award/ranked_list/ranked_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/boats/ship_class/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/boats/ship/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/book/written_work/editor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/book/written_work/author",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/book/book_edition_series/series_editor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/book/book/interior_illustrations_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/book/interview/interviewee",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/book/interview/interviewer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/business/issue/issuer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/comic_books/comic_book_character/created_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/comic_books/comic_book_series/created_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/computer/computer/key_designers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/computer/file_format/format_creator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/computer/operating_system/developer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/computer/programming_language/developers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/computer/programming_language/language_designers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/computer/software/developer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/cvg/computer_game_engine/developer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/cvg/computer_videogame/designers",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/cvg/computer_videogame/developer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/engineering/engine/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/food/recipe/author",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/games/game/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/internet/blog/blogger",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/language/conlang/created_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/law/constitutional_amendment/proposed_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/law/invention/inventor",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/media_common/quotation/author",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/medicine/vaccine/developed_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/music/album/artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/music/composition/composer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/music/composition/lyricist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/opera/opera/composer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/opera/opera/librettist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/organization/organization/founders",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/people/family/founder",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/royalty/order_of_chivalry/founders",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/spaceflight/rocket_engine/designed_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/sports/golf_course/designer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/theater/play/composer",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/theater/play/lyricist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/theater/play/orchestrator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/theater/play/playwright",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/tv/tv_program/program_creator",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/visual_art/art_series/artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/visual_art/artwork/artist",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/fictional_universe/fictional_character/character_created_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/comic_strips/comic_strip/creator_of_strip/comic_strips/comic_strip_creator_duration/creator_of_strip",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/media_common/finished_work/completion_of/media_common/completion_of_unfinished_work/finisher",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/fictional_universe/fictional_universe/created_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "subj was created by obj",
      "property": "/government/election_poll/taken_by",
      "metaschema": "/base/fbontology/metaschema/predicate_id/createdby"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/amusement_parks/ride_theme/rides",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/award/award_discipline/awards_in_this_discipline",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/award/hall_of_fame_discipline/halls_of_fame",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/education/field_of_study/journals_in_this_discipline",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/book/periodical_subject/periodicals",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/book/reviewed_work/reviews_of_this_work",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/book/book_subject/works",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/business/product_theme/product_lines",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/business/product_theme/products",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/conferences/conference_subject/series_of_conferences_about_this",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/conferences/conference_subject/specific_conferences_about_this",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/cvg/computer_game_subject/games",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/film/film_festival_focus/festivals_with_this_focus",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/film/film_subject/films",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/interests/collection_category/name_of_collection_activity",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/law/legal_subject/legal_cases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/media_common/quotation_subject/quotations_about_this_subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/medicine/disease/trials",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/medicine/disease/medical_specialties",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/medicine/medical_treatment/trials",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/book/book_subject/musical_compositions_about_this_topic",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/projects/project_focus/projects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/radio/radio_subject/segments_with_this_subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/radio/radio_subject/episodes_with_this_subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/radio/radio_subject/programs_with_this_subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/travel/travel_destination/guidebooks",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/tv/tv_subject/tv_episode_segments",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/tv/tv_subject/tv_episodes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/tv/tv_subject/tv_programs",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/visual_art/art_subject/art_series_on_the_subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/visual_art/art_subject/artwork_on_the_subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/event/speech_topic/speeches_or_presentations_on_this_topic/event/speech_or_presentation/presented_work",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/user/joehughes/default_domain/transit_agency/activist_groups",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/exhibitions/exhibition_subject/exhibitions_created_about_this_subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/law/legal_subject/legal_cases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "obj is about subj",
      "property": "/music/music_video_subject/subject_in_these_music_videos",
      "metaschema": "/base/fbontology/metaschema/predicate_id/subjectof"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/amusement_parks/ride/theme",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/award/award_category/disciplines_or_subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/award/hall_of_fame/discipline",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/book/journal/discipline",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/book/periodical/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/book/review/work_reviewed",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/book/written_work/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/business/product_line/themes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/business/consumer_product/themes",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/conferences/conference_series/subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/conferences/conference/focus",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/cvg/computer_videogame/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/film/film_festival/focus",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/film/film/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/games/game/game_subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/interests/collection_activity/type_of_thing_collected",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/internet/blog/focus",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/law/legal_case/subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/media_common/quotation/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/medicine/medical_trial/diseases",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/medicine/medical_specialty/diseases_treated",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/medicine/medical_trial/treatment_being_tested",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/music/composition/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/projects/project/project_focus",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/radio/radio_episode_segment/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/radio/radio_program_episode/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/radio/radio_program/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/travel/guidebook/travel_destinations_covered",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/tv/the_colbert_report_episode/intro_topics",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/tv/the_colbert_report_episode/the_word_topics",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/tv/tv_episode_segment/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/tv/tv_series_episode/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/tv/tv_program/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/visual_art/art_series/subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/visual_art/artwork/art_subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/event/presented_work/performances/event/speech_or_presentation/speech_topic",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/exhibitions/exhibition/subjects",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/law/legal_case/subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    },
    {
      "sentence form": "subj is about obj",
      "property": "/music/music_video/music_video_subject",
      "metaschema": "/base/fbontology/metaschema/predicate_id/hassubject"
    }
  ],
  "plural_types": [
    "/music/instrument",
    "/business/product_category",
    "/biology/animal",
    "/aviation/aircraft_type",
    "/base/aareas/schema/administrative_area_type",
    "/user/spencermountain/default_domain/type_of_music_group",
    "/geography/geographical_feature_category",
    "/award/award_discipline",
    "/fashion/garment",
    "/interests/collection_category",
    "/organization/organization_type",
    "/geology/rock_type",
    "/sports/sports_equipment",
    "/fictional_universe/fictional_organization_type",
    "/user/jamie/default_domain/retail_category",
    "/base/localfood/produce",
    "/base/disaster2/type_of_injury",
    "/architecture/type_of_museum",
    "/automotive/engine_type",
    "/travel/accommodation_feature",
    "/transportation/bridge_type",
    "/food/type_of_dish",
    "/automotive/automotive_class",
    "/geography/mountain_type",
    "/exhibitions/type_of_exhibition",
    "/user/alecf/recreation/park_feature",
    "/event/disaster_type",
    "/meteorology/cloud",
    "/base/events/type_of_festival",
    "/american_football/football_position",
    "/base/piercings/piercing_location",
    "/religion/type_of_place_of_worship",
    "/base/birdinfo/type_of_diet",
    "/astronomy/type_of_planetographic_feature",
    "/base/forts/type_of_fort",
    "/travel/accommodation_type",
    "/base/crime/lawyer_type",
    "/base/argumentmaps/type_of_joke",
    "/base/events/type_of_performance",
    "/event/type_of_public_presentation",
    "/user/alexander/toys/toy_type",
    "/user/robert/mobile_phones/input_interface",
    "/baseball/baseball_position",
    "/theater/theater_production_staff_role",
    "/soccer/football_position",
    "/music/voice",
    "/base/disaster2/type_of_injury_causing_event",
    "/base/services/exercise_facilities",
    "/conferences/type_of_conference",
    "/base/ecology/type_of_ecosystem",
    "/bicycles/bicycle_type",
    "/basketball/basketball_position",
    "/base/movietheatres/type_of_movie_theatre_cinema",
    "/base/disaster2/type_of_automobile_accident",
    "/ice_hockey/hockey_position",
    "/base/fires/type_of_fire",
    "/base/crime/type_of_criminal_organization",
    "/base/skateboarding/type_of_skateboarding_obstacle",
    "/spaceflight/satellite_type",
    "/base/represent/type_of_agent",
    "/user/rcheramy/default_domain/fruit",
    "/user/rcheramy/default_domain/food",
    "/biology/organism_classification",
    "/business/job_title",
    "/medicine/anatomical_structure",
    "/people/profession",
    "/fictional_universe/character_species",
    "/user/rcheramy/default_domain/hockey_team",
    "/ice_hockey/hockey_team",
    "/sports/sports_team",
    "/sports/professional_sports_team",
    "/base/events/event_presenting_organisation",
    "/film/film_genre",
    "/music/compositional_form",
    "/medicine/drug_class",
    "/geography/lake_type",
    "/user/akatenev/weapons/weapon",
    "/user/spencermountain/default_domain/stock_character",
    "/base/folklore/mythical_creature"
  ],
  "category_like": [
    "/american_football/football_position/players",
    "/architecture/architectural_style/architects",
    "/baseball/baseball_position/players",
    "/basketball/basketball_position/players",
    "/basketball/basketball_roster_position/player",
    "/business/competitive_space_mediator/company",
    "/business/industry/companies",
    "/business/market_share/company",
    "/comic_strips/comic_strip_creator_duration/creator_of_strip",
    "/dining/cuisine/chefs",
    "/dining/cuisine/restaurant",
    "/education/education/student",
    "/education/field_of_study/academic_departments",
    "/education/field_of_study/academics_in_this_field",
    "/film/film_film_company_relationship/film_company",
    "/food/diet/followers",
    "/ice_hockey/hockey_position/players",
    "/interests/hobby/people_with_this_hobby",
    "/interests/interest/people_with_this_interest",
    "/martial_arts/martial_art/well_known_practitioner",
    "/medicine/medical_specialty/hospitals_with_this_specialty",
    "/medicine/medical_specialty/physicians_with_this_specialty",
    "/music/genre/artists",
    "/music/group_membership/member",
    "/music/recording_contribution/contributor",
    "/music/track_contribution/contributor",
    "/olympics/olympic_athlete_affiliation/athlete",
    "/opera/opera_designer_gig/designer",
    "/opera/opera_production_staff_gig/staff_member",
    "/organization/club_interest/clubs",
    "/organization/leadership/person",
    "/organization/organization_board_membership/member",
    "/organization/organization_sector/organizations_in_this_sector",
    "/people/profession/people_with_this_profession",
    "/projects/project_participation/participant",
    "/religion/religion/organizations",
    "/soccer/football_position/players",
    "/sports/pro_sports_played/athlete",
    "/sports/sport/leagues",
    "/sports/sport/officials",
    "/sports/sport/team_coaches",
    "/sports/sport/teams",
    "/sports/sports_team_roster/player",
    "/theater/theater_designer_gig/designer",
    "/theater/theater_production_staff_gig/staff_member",
    "/tv/tv_crew_gig/crewmember",
    "/tv/tv_producer_episode_credit/producer",
    "/tv/tv_producer_term/producer",
    "/tv/tv_regular_personal_appearance/person",
    "/visual_art/visual_art_form/artists",
    "/government/form_of_government/countries",
    "/people/ethnicity/people",
    "/fictional_universe/character_gender",
    "/fictional_universe/fictional_character/ethnicity",
    "/architecture/structure/architectural_style",
    "/book/book/genre",
    "/book/magazine/genre",
    "/book/short_story/genre",
    "/book/written_work/school_or_movement",
    "/broadcast/content/genre",
    "/broadcast/radio_station/format",
    "/comic_books/comic_book_series/genre",
    "/comic_books/comic_book_story/genre",
    "/comic_strips/comic_strip/genre",
    "/computer/software/software_genre",
    "/cvg/computer_videogame/cvg_genre",
    "/film/film/genre",
    "/food/dish/cuisine",
    "/games/game/genre",
    "/internet/website/category",
    "/media_common/netflix_title/netflix_genres",
    "/music/album/genre",
    "/music/music_video/music_video_genre",
    "/opera/opera/genre",
    "/theater/play/genre",
    "/tv/tv_program/genre",
    "/visual_art/artwork/art_genre",
    "/visual_art/artwork/period_or_movement",
    "/automotive/model/model_years",
    "/automotive/model_year/examples",
    "/aviation/aircraft_model/aircraft",
    "/award/recurring_competition/individual_competitions",
    "/conferences/conference_series/conference",
    "/cricket/cricket_series/series_events",
    "/cricket/cricket_tournament/events",
    "/film/film_festival/individual_festivals",
    "/food/dish/recipes",
    "/rail/locomotive_class/locomotives_of_this_class",
    "/sports/sports_championship/events",
    "/sports/tournament_event/competitions",
    "/time/recurring_event/instances",
    "/fictional_universe/character_occupation/characters_with_this_occupation"
  ],
  "related_properties": [
    "/influence/influence_node/influenced_by",
    "/location/location/adjoin_s",
    "/influence/influence_node/influenced",
    "/location/location/coterminous_with",
    "/location/location/near",
    "/time/event/included_in_event",
    "/time/event/includes_event",
    "/film/film/subjects",
    "/film/film/sequel",
    "/film/film/prequel",
    "/film/film/directed_by",
    "/film/film/starring",
    "/book/written_work/previous_in_series",
    "/book/written_work/next_in_series",
    "/book/written_work/subjects",
    "/visual_art/artwork/art_subject",
    "/visual_art/artwork/belongs_to_series",
    "/education/educational_institution/subsidiary_or_constituent_schools",
    "/education/educational_institution/parent_institution",
    "/organization/organization/sectors",
    "/organization/organization/spun_off_from",
    "/organization/organization/spin_offs",
    "/organization/organization/parent",
    "/organization/organization/child",
    "/biology/organism_classification/higher_classification",
    "/biology/organism_classification/lower_classifications",
    "/biology/organism_classification/child_classifications",
    "/biology/organism_classification/parent_classifications",
    "/sports/sports_facility/teams",
    "/sports/sports_league/championship",
    "/sports/sport/leagues",
    "/sports/sports_team/arena_stadium",
    "/sports/sports_team/location",
    "/sports/sports_team_location/teams",
    "/government/political_party/ideology",
    "/government/political_district/elections",
    "/government/election/winner",
    "/music/track/artist",
    "/time/recurring_event/instances",
    "/people/profession/specializations",
    "/people/profession/specialization_of",
    "/music/artist/label",
    "/music/artist/album",
    "/music/release/label",
    "/music/release/album",
    "/music/album/artist",
    "/music/musical_group/member",
    "/music/producer/releases_produced",
    "/base/onephylogeny/type_of_thing/includes",
    "/base/onephylogeny/type_of_thing/included_in",
    "/location/country/capital",
    "/location/country/form_of_government",
    "/location/country/currency_used",
    "/location/country/national_anthem",
    "/aviation/airport/serves",
    "/architecture/structure/architect",
    "/geography/lake/cities",
    "/geography/lake/outflow",
    "/geography/lake/inflow",
    "/olympics/olympic_games/host_city",
    "/olympics/olympic_host_city",
    "/business/employment_tenure/company",
    "/film/performance/film",
    "/tv/regular_tv_appearance/series",
    "/people/marriage/spouse",
    "/education/education/specialization",
    "/education/education/major_field_of_study",
    "/location/adjoining_relationship/adjoins",
    "/music/group_membership/group",
    "/celebrities/friendship/friend",
    "/base/popstra/friendship/participant",
    "/people/person/parents",
    "/influence/influence_node/peers",
    "/people/person/children",
    "/people/sibling_relationship/sibling",
    "/location/location/contains"
  ],
  "definate_articles": [
    "/geography/mountain_range",
    "/location/region",
    "/royalty/noble_title",
    "/user/pak21/default_domain/tectonic_plate",
    "/education/university",
    "/education/department",
    "/religion/religious_organization",
    "/user/robinboast/default_domain/historical_period",
    "/travel/tourist_attraction",
    "/comic_books/comic_book_character",
    "/transportation/bridge",
    "/business/shopping_center",
    "/base/argumentmaps/intellectual_dispute",
    "/base/argumentmaps/argument",
    "/geography/island_group"
  ],
  "properties": [
    {
      "id": "/american_football/football_conference/teams",
      "cvt": false,
      "name": "football team",
      "kind": "alias"
    },
    {
      "id": "/government/government_office_or_title/governmental_body_if_any",
      "cvt": false,
      "name": "office",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_division/teams",
      "cvt": false,
      "name": "football team",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_division/conference",
      "cvt": false,
      "name": "division",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_producer/programs_produced",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_producer/programs_produced",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_producer/programs_produced",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_league/teams",
      "cvt": false,
      "name": "baseball teams",
      "kind": "alias"
    },
    {
      "id": "/automotive/make/model_s",
      "cvt": false,
      "name": "models",
      "kind": "alias"
    },
    {
      "id": "/automotive/make/parent_company",
      "cvt": false,
      "name": "company ",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_body/offices_positions",
      "cvt": false,
      "name": "offices",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_body/members",
      "cvt": true,
      "name": "workers",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_body/members",
      "cvt": true,
      "name": "workers",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_body/component_bodies",
      "cvt": false,
      "name": "committees",
      "kind": "alias"
    },
    {
      "id": "/aviation/aircraft_owner/aircraft_fleet_composition",
      "cvt": true,
      "name": "planes",
      "kind": "alias"
    },
    {
      "id": "/aviation/aircraft_owner/aircraft_fleet_composition",
      "cvt": true,
      "name": "airplanes",
      "kind": "alias"
    },
    {
      "id": "/aviation/aircraft_owner/aircraft_fleet_composition",
      "cvt": true,
      "name": "aircraft",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_coach/coaching_history",
      "cvt": true,
      "name": "teams",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_coach/current_team_head_coached",
      "cvt": false,
      "name": "team",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_coach/current_team_head_coached",
      "cvt": false,
      "name": "football team",
      "kind": "alias"
    },
    {
      "id": "/astronomy/comet_group/comet",
      "cvt": false,
      "name": "comets",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/geographic_distribution",
      "cvt": false,
      "name": "countries",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/languages_spoken",
      "cvt": false,
      "name": "dialect",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/languages_spoken",
      "cvt": false,
      "name": "language",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/people",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/people",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/location/uk_principal_area/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_treatment/used_to_treat",
      "cvt": false,
      "name": "diseases treated",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_treatment/used_to_treat",
      "cvt": false,
      "name": "treatments",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_treatment/used_to_treat",
      "cvt": false,
      "name": "function",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_treatment/used_to_treat",
      "cvt": false,
      "name": "diseases",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_treatment/used_to_treat",
      "cvt": false,
      "name": "purpose",
      "kind": "alias"
    },
    {
      "id": "/digicams/camera_storage_type/compatible_cameras",
      "cvt": false,
      "name": "cameras",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_games/athletes",
      "cvt": true,
      "name": "olympic athletes",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_designer/games_designed",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_designer/games_designed",
      "cvt": false,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_designer/games_designed",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_designer/games_designed",
      "cvt": false,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/ice_hockey/hockey_coach/current_team",
      "cvt": false,
      "name": "team",
      "kind": "alias"
    },
    {
      "id": "/ice_hockey/hockey_coach/current_team",
      "cvt": false,
      "name": "hockey team",
      "kind": "alias"
    },
    {
      "id": "/food/ingredient/dishes",
      "cvt": false,
      "name": "foods",
      "kind": "alias"
    },
    {
      "id": "/food/ingredient/dishes",
      "cvt": false,
      "name": "dishes",
      "kind": "alias"
    },
    {
      "id": "/architecture/museum/type_of_museum",
      "cvt": false,
      "name": "type",
      "kind": "alias"
    },
    {
      "id": "/architecture/museum/type_of_museum",
      "cvt": false,
      "name": "subject",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/author_s",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/author_s",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/author_s",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/works_in_this_series",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/works_in_this_series",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/works_in_this_series",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/location/uk_council_area/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/location/uk_principal_area/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/government/government/government_for",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/music/genre/subgenre",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/music/genre/subgenre",
      "cvt": false,
      "name": "genres",
      "kind": "alias"
    },
    {
      "id": "/music/genre/subgenre",
      "cvt": false,
      "name": "genres",
      "kind": "alias"
    },
    {
      "id": "/music/genre/subgenre",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/music/genre/artists",
      "cvt": false,
      "name": "bands",
      "kind": "alias"
    },
    {
      "id": "/music/genre/artists",
      "cvt": false,
      "name": "bands",
      "kind": "alias"
    },
    {
      "id": "/music/genre/artists",
      "cvt": false,
      "name": "musicians",
      "kind": "alias"
    },
    {
      "id": "/music/genre/albums",
      "cvt": false,
      "name": "records",
      "kind": "alias"
    },
    {
      "id": "/music/genre/albums",
      "cvt": false,
      "name": "records",
      "kind": "alias"
    },
    {
      "id": "/music/genre/albums",
      "cvt": false,
      "name": "music",
      "kind": "alias"
    },
    {
      "id": "/architecture/architectural_style/architects",
      "cvt": false,
      "name": "designers",
      "kind": "alias"
    },
    {
      "id": "/architecture/architectural_style/examples",
      "cvt": false,
      "name": "buildings",
      "kind": "alias"
    },
    {
      "id": "/architecture/architectural_style/examples",
      "cvt": false,
      "name": "structures",
      "kind": "alias"
    },
    {
      "id": "/location/uk_non_metropolitan_county/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/computer/operating_system/developer",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/people/profession/people_with_this_profession",
      "cvt": false,
      "name": "workers",
      "kind": "alias"
    },
    {
      "id": "/people/profession/people_with_this_profession",
      "cvt": false,
      "name": "pros",
      "kind": "alias"
    },
    {
      "id": "/people/profession/people_with_this_profession",
      "cvt": false,
      "name": "professionals",
      "kind": "alias"
    },
    {
      "id": "/people/profession/part_of_professional_field",
      "cvt": false,
      "name": "field",
      "kind": "alias"
    },
    {
      "id": "/people/profession/part_of_professional_field",
      "cvt": false,
      "name": "field",
      "kind": "alias"
    },
    {
      "id": "/people/profession/represented_by_trade_unions",
      "cvt": false,
      "name": "unions",
      "kind": "alias"
    },
    {
      "id": "/film/film_distribution_medium/films_distributed_in_this_medium",
      "cvt": true,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/film_distribution_medium/films_distributed_in_this_medium",
      "cvt": true,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/based_on",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/based_on",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/based_on",
      "cvt": false,
      "name": "inspirations",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/based_on",
      "cvt": false,
      "name": "influence",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/based_on",
      "cvt": false,
      "name": "inspiration",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/place_of_birth",
      "cvt": false,
      "name": "birth place",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/place_of_birth",
      "cvt": false,
      "name": "birthplace",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/place_of_birth",
      "cvt": false,
      "name": "birth place",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/gender",
      "cvt": false,
      "name": "sex",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/parents",
      "cvt": false,
      "name": "mom",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/parents",
      "cvt": false,
      "name": "dad",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/parents",
      "cvt": false,
      "name": "father",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/parents",
      "cvt": false,
      "name": "mother",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/occupation",
      "cvt": false,
      "name": "job",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/occupation",
      "cvt": false,
      "name": "profession",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/organizations",
      "cvt": false,
      "name": "clubs",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/organizations",
      "cvt": false,
      "name": "organizations",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/organizations",
      "cvt": false,
      "name": "clubs",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/powers_or_abilities",
      "cvt": false,
      "name": "super powers",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/powers_or_abilities",
      "cvt": false,
      "name": "superpowers",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/powers_or_abilities",
      "cvt": false,
      "name": "special powers",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/powers_or_abilities",
      "cvt": false,
      "name": "powers",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/powers_or_abilities",
      "cvt": false,
      "name": "supernatural powers",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/powers_or_abilities",
      "cvt": false,
      "name": "supernatural powers",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/powers_or_abilities",
      "cvt": false,
      "name": "abilities",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/powers_or_abilities",
      "cvt": false,
      "name": "talents",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/powers_or_abilities",
      "cvt": false,
      "name": "magic powers",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/appears_in_these_fictional_universes",
      "cvt": false,
      "name": "stories",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/appears_in_these_fictional_universes",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/appears_in_these_fictional_universes",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/appears_in_these_fictional_universes",
      "cvt": false,
      "name": "performances with",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/children",
      "cvt": false,
      "name": "kids",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/children",
      "cvt": false,
      "name": "child",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/children",
      "cvt": false,
      "name": "kids",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/children",
      "cvt": false,
      "name": "daughter",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/children",
      "cvt": false,
      "name": "son",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/siblings",
      "cvt": true,
      "name": "sister",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/siblings",
      "cvt": true,
      "name": "brother",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/siblings",
      "cvt": true,
      "name": "sister",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/siblings",
      "cvt": true,
      "name": "brother",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/married_to",
      "cvt": true,
      "name": "wife",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/married_to",
      "cvt": true,
      "name": "husband",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/married_to",
      "cvt": true,
      "name": "partner",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/married_to",
      "cvt": true,
      "name": "fiancee",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/married_to",
      "cvt": true,
      "name": "spouse",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/character_created_by",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/employers",
      "cvt": true,
      "name": "boss",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/quotations",
      "cvt": false,
      "name": "quotes",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/romantically_involved_with",
      "cvt": true,
      "name": "girlfriend",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/romantically_involved_with",
      "cvt": true,
      "name": "boyfriend",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/romantically_involved_with",
      "cvt": true,
      "name": "partner",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/romantically_involved_with",
      "cvt": true,
      "name": "fiancee",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/ethnicity",
      "cvt": false,
      "name": "race",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/ethnicity",
      "cvt": false,
      "name": "creed",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/education",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/education",
      "cvt": false,
      "name": "schooling",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/education",
      "cvt": false,
      "name": "alma mater",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/has_possessed",
      "cvt": false,
      "name": "possessed",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/medical_conditions",
      "cvt": false,
      "name": "diseased",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/medical_conditions",
      "cvt": false,
      "name": "diseases",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/medical_conditions",
      "cvt": false,
      "name": "conditions",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/medical_conditions",
      "cvt": false,
      "name": "illness",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/medical_conditions",
      "cvt": false,
      "name": "illnesses",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character/medical_conditions",
      "cvt": false,
      "name": "diseases",
      "kind": "alias"
    },
    {
      "id": "/community/discussion_thread/post",
      "cvt": false,
      "name": "comment",
      "kind": "alias"
    },
    {
      "id": "/time/day_of_week/calendar_system",
      "cvt": false,
      "name": "calendar",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/current_team",
      "cvt": true,
      "name": "current team",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/current_team",
      "cvt": true,
      "name": "club",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/current_team",
      "cvt": true,
      "name": "football team",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/current_team",
      "cvt": true,
      "name": "football team",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/position_s",
      "cvt": false,
      "name": "position",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/position_s",
      "cvt": false,
      "name": "football position",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/matches_played",
      "cvt": true,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/matches_played",
      "cvt": true,
      "name": "games played",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/matches_played",
      "cvt": true,
      "name": "matches",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/goals_scored",
      "cvt": true,
      "name": "goals",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/goals_scored",
      "cvt": true,
      "name": "points",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/disciplinary_action",
      "cvt": true,
      "name": "penalties",
      "kind": "alias"
    },
    {
      "id": "/location/cn_prefecture_level_city/city_seat",
      "cvt": false,
      "name": "seat",
      "kind": "alias"
    },
    {
      "id": "/location/tr_province/central_district",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/film/cinematographer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/cinematographer/film",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/cinematographer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/business/company_type/companies_of_this_type",
      "cvt": false,
      "name": "companies",
      "kind": "alias"
    },
    {
      "id": "/business/company_type/companies_of_this_type",
      "cvt": false,
      "name": "businesses",
      "kind": "alias"
    },
    {
      "id": "/business/company_type/companies_of_this_type",
      "cvt": false,
      "name": "business",
      "kind": "alias"
    },
    {
      "id": "/internet/top_level_domain_type/domains",
      "cvt": false,
      "name": "domains",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_producer/programs_produced",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_producer/programs_produced",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_producer/programs_produced",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/architecture/landscape_project/landscape_architect",
      "cvt": false,
      "name": "architect",
      "kind": "alias"
    },
    {
      "id": "/architecture/landscape_project/construction_cost",
      "cvt": true,
      "name": "cost",
      "kind": "alias"
    },
    {
      "id": "/architecture/landscape_project/construction_cost",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/architecture/building/building_function",
      "cvt": false,
      "name": "purpose",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/current_team",
      "cvt": true,
      "name": "current team",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/current_team",
      "cvt": true,
      "name": "club",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/current_team",
      "cvt": true,
      "name": "football team",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/current_team",
      "cvt": true,
      "name": "football team",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/position_s",
      "cvt": false,
      "name": "position",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/position_s",
      "cvt": false,
      "name": "football position",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/matches_played",
      "cvt": true,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/matches_played",
      "cvt": true,
      "name": "games played",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/matches_played",
      "cvt": true,
      "name": "matches",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/goals_scored",
      "cvt": true,
      "name": "goals",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/goals_scored",
      "cvt": true,
      "name": "points",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_player/disciplinary_action",
      "cvt": true,
      "name": "penalties",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/population",
      "cvt": true,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/gdp_nominal",
      "cvt": true,
      "name": "gnp",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/gdp_nominal_per_capita",
      "cvt": true,
      "name": "gnp per capita",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/religions",
      "cvt": true,
      "name": "faiths",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/religions",
      "cvt": true,
      "name": "religious beliefs",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/automobiles_per_capita",
      "cvt": true,
      "name": "cars per capita",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/major_imports",
      "cvt": true,
      "name": "imports",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/major_exports",
      "cvt": true,
      "name": "exports",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/places_exported_to",
      "cvt": true,
      "name": "trading partners",
      "kind": "alias"
    },
    {
      "id": "/location/statistical_region/places_imported_from",
      "cvt": true,
      "name": "trading partners",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "officials",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "public officials",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/military/military_person/service",
      "cvt": true,
      "name": "assignments",
      "kind": "alias"
    },
    {
      "id": "/military/military_person/participated_in_conflicts",
      "cvt": false,
      "name": "wars",
      "kind": "alias"
    },
    {
      "id": "/military/military_person/participated_in_conflicts",
      "cvt": false,
      "name": "battles",
      "kind": "alias"
    },
    {
      "id": "/military/military_person/participated_in_conflicts",
      "cvt": false,
      "name": "conflicts",
      "kind": "alias"
    },
    {
      "id": "/military/military_person/participated_in_conflicts",
      "cvt": false,
      "name": "wars",
      "kind": "alias"
    },
    {
      "id": "/military/military_person/participated_in_conflicts",
      "cvt": false,
      "name": "battles",
      "kind": "alias"
    },
    {
      "id": "/education/fraternity_sorority_type/fraternities_and_sororities",
      "cvt": false,
      "name": "frats",
      "kind": "alias"
    },
    {
      "id": "/education/fraternity_sorority_type/fraternities_and_sororities",
      "cvt": false,
      "name": "fraternities",
      "kind": "alias"
    },
    {
      "id": "/education/fraternity_sorority_type/fraternities_and_sororities",
      "cvt": false,
      "name": "sororities",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "district",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "school board",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_actor/theater_roles",
      "cvt": true,
      "name": "performances",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_actor/theater_roles",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_actor/theater_roles",
      "cvt": true,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/music/release/label",
      "cvt": false,
      "name": "record label",
      "kind": "alias"
    },
    {
      "id": "/music/release/label",
      "cvt": false,
      "name": "publisher",
      "kind": "alias"
    },
    {
      "id": "/award/award_winning_work/awards_won",
      "cvt": true,
      "name": "awards",
      "kind": "alias"
    },
    {
      "id": "/award/award_winning_work/awards_won",
      "cvt": true,
      "name": "medals",
      "kind": "alias"
    },
    {
      "id": "/award/award_winning_work/awards_won",
      "cvt": true,
      "name": "honours",
      "kind": "alias"
    },
    {
      "id": "/film/editor/film",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/editor/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/editor/film",
      "cvt": false,
      "name": "movies edited",
      "kind": "alias"
    },
    {
      "id": "/education/school_district/enrollment",
      "cvt": true,
      "name": "student number",
      "kind": "alias"
    },
    {
      "id": "/education/school_district/highest_grade_taught",
      "cvt": false,
      "name": "grades",
      "kind": "alias"
    },
    {
      "id": "/business/oil_field/estimated_reserves",
      "cvt": true,
      "name": "reserves",
      "kind": "alias"
    },
    {
      "id": "/business/oil_field/estimated_reserves",
      "cvt": true,
      "name": "oil",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/geographic_distribution",
      "cvt": false,
      "name": "countries",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/languages_spoken",
      "cvt": false,
      "name": "dialect",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/languages_spoken",
      "cvt": false,
      "name": "language",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/people",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/people",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/platforms",
      "cvt": false,
      "name": "system",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/platforms",
      "cvt": false,
      "name": "systems",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/characters",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/sequel",
      "cvt": false,
      "name": "sequel",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/game_series",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/prequel",
      "cvt": false,
      "name": "prequel",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/processors_supported",
      "cvt": false,
      "name": "processors",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/processors_supported",
      "cvt": false,
      "name": "cpu",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/online_reviews",
      "cvt": true,
      "name": "reviews",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/uses_game_engine",
      "cvt": false,
      "name": "engine",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/uses_game_engine",
      "cvt": false,
      "name": "engine",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/gameplay_modes",
      "cvt": false,
      "name": "modes",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/gameplay_modes",
      "cvt": false,
      "name": "gameplay",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/influenced_by",
      "cvt": false,
      "name": "influences",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/peripherals_supported",
      "cvt": false,
      "name": "contollers",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/peripherals_supported",
      "cvt": false,
      "name": "peripherals",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/space_mission/astronauts",
      "cvt": false,
      "name": "astronauts",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/space_mission/astronauts",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/space_mission/space_program",
      "cvt": false,
      "name": "program",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/space_mission/landing_site",
      "cvt": true,
      "name": "landing site",
      "kind": "alias"
    },
    {
      "id": "/religion/belief/belief_of",
      "cvt": false,
      "name": "religions",
      "kind": "alias"
    },
    {
      "id": "/religion/belief/belief_of",
      "cvt": false,
      "name": "believers",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "burials",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "corpses",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "bodies",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/computer/computer_designer/computers_designed",
      "cvt": false,
      "name": "computers",
      "kind": "alias"
    },
    {
      "id": "/government/politician/government_positions_held",
      "cvt": true,
      "name": "positions held",
      "kind": "alias"
    },
    {
      "id": "/government/politician/government_positions_held",
      "cvt": true,
      "name": "positions",
      "kind": "alias"
    },
    {
      "id": "/government/politician/government_positions_held",
      "cvt": true,
      "name": "offices held",
      "kind": "alias"
    },
    {
      "id": "/government/politician/government_positions_held",
      "cvt": true,
      "name": "terms",
      "kind": "alias"
    },
    {
      "id": "/government/politician/party",
      "cvt": true,
      "name": "paty membership",
      "kind": "alias"
    },
    {
      "id": "/government/politician/party",
      "cvt": true,
      "name": "party membership",
      "kind": "alias"
    },
    {
      "id": "/government/politician/party",
      "cvt": true,
      "name": "political ideology",
      "kind": "alias"
    },
    {
      "id": "/government/politician/party",
      "cvt": true,
      "name": "political parties",
      "kind": "alias"
    },
    {
      "id": "/government/politician/party",
      "cvt": true,
      "name": "political party",
      "kind": "alias"
    },
    {
      "id": "/government/politician/party",
      "cvt": true,
      "name": "party affiliation",
      "kind": "alias"
    },
    {
      "id": "/government/politician/election_campaigns",
      "cvt": false,
      "name": "elections",
      "kind": "alias"
    },
    {
      "id": "/government/politician/election_campaigns",
      "cvt": false,
      "name": "campaigns",
      "kind": "alias"
    },
    {
      "id": "/government/politician/election_campaigns",
      "cvt": false,
      "name": "elections",
      "kind": "alias"
    },
    {
      "id": "/government/politician/legislative_committees_served_on",
      "cvt": true,
      "name": "committees",
      "kind": "alias"
    },
    {
      "id": "/government/politician/legislative_committees_served_on",
      "cvt": true,
      "name": "comittees",
      "kind": "alias"
    },
    {
      "id": "/comic_strips/comic_strip_genre/comic_strips_of_this_genre",
      "cvt": false,
      "name": "comic strips",
      "kind": "alias"
    },
    {
      "id": "/comic_strips/comic_strip_genre/comic_strips_of_this_genre",
      "cvt": false,
      "name": "comics",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/person_in_fiction/representations_in_fiction",
      "cvt": false,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/person_in_fiction/representations_in_fiction",
      "cvt": false,
      "name": "representations",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/character_occupation/characters_with_this_occupation",
      "cvt": false,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/theater/play/composer",
      "cvt": false,
      "name": "music composer",
      "kind": "alias"
    },
    {
      "id": "/theater/play/characters",
      "cvt": false,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/theater/play/country_of_origin",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/theater/play/country_of_origin",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/theater/play/playwright",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/theater/play/playwright",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/book/author/series_written_or_contributed_to",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writing",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writings",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "writing style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/astronomy/meteorite/meteorite_fall_location",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/astronomy/meteorite/source_celestial_body",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/food/cheese/country_of_origin",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/food/cheese/country_of_origin",
      "cvt": false,
      "name": "cheese",
      "kind": "alias"
    },
    {
      "id": "/food/cheese/source_of_milk",
      "cvt": false,
      "name": "animal",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "landfall",
      "kind": "alias"
    },
    {
      "id": "/military/military_unit/unit_size",
      "cvt": false,
      "name": "size",
      "kind": "alias"
    },
    {
      "id": "/food/tea_type/tea",
      "cvt": false,
      "name": "teas",
      "kind": "alias"
    },
    {
      "id": "/astronomy/extraterrestrial_location/on_celestial_object",
      "cvt": false,
      "name": "planet",
      "kind": "alias"
    },
    {
      "id": "/astronomy/extraterrestrial_location/on_celestial_object",
      "cvt": false,
      "name": "moon",
      "kind": "alias"
    },
    {
      "id": "/astronomy/extraterrestrial_location/on_celestial_object",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/astronomy/extraterrestrial_location/contained_by",
      "cvt": false,
      "name": "region",
      "kind": "alias"
    },
    {
      "id": "/rail/railway/part_of_network",
      "cvt": false,
      "name": "network",
      "kind": "alias"
    },
    {
      "id": "/rail/railway/terminuses",
      "cvt": false,
      "name": "terminals",
      "kind": "alias"
    },
    {
      "id": "/rail/railway/operator_s",
      "cvt": true,
      "name": "operator",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/programs",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/programs",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/programs",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/areas_served",
      "cvt": false,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/areas_served",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/areas_served",
      "cvt": false,
      "name": "area",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/location/postal_code/country",
      "cvt": false,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/library/public_library_system/branches",
      "cvt": false,
      "name": "branches",
      "kind": "alias"
    },
    {
      "id": "/film/actor/film",
      "cvt": true,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/actor/film",
      "cvt": true,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/actor/film",
      "cvt": true,
      "name": "performances",
      "kind": "alias"
    },
    {
      "id": "/film/actor/dubbing_performances",
      "cvt": true,
      "name": "vocal performances",
      "kind": "alias"
    },
    {
      "id": "/film/actor/dubbing_performances",
      "cvt": true,
      "name": "voice performances",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/higher_classification",
      "cvt": false,
      "name": "class",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/lower_classifications",
      "cvt": false,
      "name": "subclass",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/lower_classifications",
      "cvt": false,
      "name": "subgroups",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/organisms_of_this_type",
      "cvt": false,
      "name": "animals",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/organisms_of_this_type",
      "cvt": false,
      "name": "instances",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/organisms_of_this_type",
      "cvt": false,
      "name": "organisms",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/earliest_fossil_record",
      "cvt": false,
      "name": "history",
      "kind": "alias"
    },
    {
      "id": "/automotive/model/manufactured_at",
      "cvt": true,
      "name": "factory",
      "kind": "alias"
    },
    {
      "id": "/automotive/model/manufactured_at",
      "cvt": true,
      "name": "factories",
      "kind": "alias"
    },
    {
      "id": "/automotive/model/manufactured_at",
      "cvt": true,
      "name": "car plants",
      "kind": "alias"
    },
    {
      "id": "/automotive/model/manufactured_at",
      "cvt": true,
      "name": "plant",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_episode/series",
      "cvt": false,
      "name": "show",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_episode/guest_personal_appearances",
      "cvt": true,
      "name": "cameo",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_episode/guest_personal_appearances",
      "cvt": true,
      "name": "cameo",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_episode/segments",
      "cvt": false,
      "name": "parts",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_episode/segments",
      "cvt": false,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/food/tea/regions_where_grown",
      "cvt": false,
      "name": "regions",
      "kind": "alias"
    },
    {
      "id": "/food/tea/regions_where_grown",
      "cvt": false,
      "name": "region",
      "kind": "alias"
    },
    {
      "id": "/food/tea/regions_where_grown",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/food/tea/regions_where_grown",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_creator/characters_created",
      "cvt": false,
      "name": "comics",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_creator/characters_created",
      "cvt": false,
      "name": "comicbooks",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/city_limits",
      "cvt": false,
      "name": "border",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/organization/club/areas_of_interest",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/astronaut/missions",
      "cvt": false,
      "name": "missions",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/astronaut/space_agency",
      "cvt": false,
      "name": "agency",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "officials",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "public officials",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team_owner/teams_owned",
      "cvt": false,
      "name": "teams",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "burials",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "corpses",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "bodies",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/founding_figures",
      "cvt": false,
      "name": "prophet",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/branched_into",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/branched_into",
      "cvt": false,
      "name": "dominations",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/branched_into",
      "cvt": false,
      "name": "denominations",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/number_of_adherents",
      "cvt": true,
      "name": "number of followers",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/texts",
      "cvt": false,
      "name": "scripture",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/texts",
      "cvt": false,
      "name": "bible",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/beliefs",
      "cvt": false,
      "name": "ideology",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/practices",
      "cvt": false,
      "name": "traditions",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/deities",
      "cvt": false,
      "name": "deities ",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/deities",
      "cvt": false,
      "name": "god",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/sacred_sites",
      "cvt": false,
      "name": "holy sites",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/sacred_sites",
      "cvt": false,
      "name": "holy land",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/collective_term_for_adherents",
      "cvt": false,
      "name": "followers",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/collective_term_for_adherents",
      "cvt": false,
      "name": "believers",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/places_of_worship",
      "cvt": false,
      "name": "churches",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/places_of_worship",
      "cvt": false,
      "name": "mosques",
      "kind": "alias"
    },
    {
      "id": "/religion/religion/places_of_worship",
      "cvt": false,
      "name": "places of worship",
      "kind": "alias"
    },
    {
      "id": "/automotive/engine_type/used_in",
      "cvt": false,
      "name": "cars",
      "kind": "alias"
    },
    {
      "id": "/automotive/engine_type/used_in",
      "cvt": false,
      "name": "trucks",
      "kind": "alias"
    },
    {
      "id": "/automotive/engine_type/used_in",
      "cvt": false,
      "name": "automobiles",
      "kind": "alias"
    },
    {
      "id": "/automotive/engine/used_in",
      "cvt": false,
      "name": "cars",
      "kind": "alias"
    },
    {
      "id": "/automotive/engine/used_in",
      "cvt": false,
      "name": "trucks",
      "kind": "alias"
    },
    {
      "id": "/automotive/engine/fuels_used",
      "cvt": false,
      "name": "fuel",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/space_program_sponsor/space_programs_sponsored",
      "cvt": false,
      "name": "space programs",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_director/plays_directed",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_director/plays_directed",
      "cvt": false,
      "name": "theatre",
      "kind": "alias"
    },
    {
      "id": "/film/cinematographer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/cinematographer/film",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/cinematographer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_position/players",
      "cvt": false,
      "name": "baseball players",
      "kind": "alias"
    },
    {
      "id": "/law/legal_case/subject",
      "cvt": false,
      "name": "legal problems",
      "kind": "alias"
    },
    {
      "id": "/law/legal_case/subject",
      "cvt": false,
      "name": "legal subject",
      "kind": "alias"
    },
    {
      "id": "/military/military_combatant/belongs_to_combatant_group",
      "cvt": false,
      "name": "allies",
      "kind": "alias"
    },
    {
      "id": "/military/military_combatant/military_commanders",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/military/military_combatant/military_conflicts",
      "cvt": true,
      "name": "wars",
      "kind": "alias"
    },
    {
      "id": "/military/military_combatant/military_conflicts",
      "cvt": true,
      "name": "battles",
      "kind": "alias"
    },
    {
      "id": "/event/disaster/damage",
      "cvt": true,
      "name": "damage",
      "kind": "alias"
    },
    {
      "id": "/event/disaster/damage",
      "cvt": true,
      "name": "cost",
      "kind": "alias"
    },
    {
      "id": "/event/disaster/areas_affected",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/event/disaster/victims",
      "cvt": false,
      "name": "people killed",
      "kind": "alias"
    },
    {
      "id": "/event/disaster/structures_destroyed",
      "cvt": false,
      "name": "destroyed buildings",
      "kind": "alias"
    },
    {
      "id": "/event/disaster/structures_damaged",
      "cvt": false,
      "name": "damaged buildings",
      "kind": "alias"
    },
    {
      "id": "/wine/wine/wine_producer",
      "cvt": false,
      "name": "producer",
      "kind": "alias"
    },
    {
      "id": "/wine/wine/fruit_source",
      "cvt": false,
      "name": "fruit",
      "kind": "alias"
    },
    {
      "id": "/wine/wine/wine_style",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character_creator/fictional_characters_created",
      "cvt": false,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_character_creator/fictional_characters_created",
      "cvt": false,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/book/cited_work/cited_in",
      "cvt": false,
      "name": "citations",
      "kind": "alias"
    },
    {
      "id": "/business/board_member/organization_board_memberships",
      "cvt": true,
      "name": "memberships",
      "kind": "alias"
    },
    {
      "id": "/business/board_member/organization_board_memberships",
      "cvt": true,
      "name": "affiliations",
      "kind": "alias"
    },
    {
      "id": "/business/board_member/organization_board_memberships",
      "cvt": true,
      "name": "boards",
      "kind": "alias"
    },
    {
      "id": "/business/board_member/organization_board_memberships",
      "cvt": true,
      "name": "organisations",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_actor/theater_roles",
      "cvt": true,
      "name": "performances",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_actor/theater_roles",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_actor/theater_roles",
      "cvt": true,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/beds",
      "cvt": true,
      "name": "number of beds",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "specialties",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "specialty",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "focuses",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "research",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_school_affiliation",
      "cvt": false,
      "name": "med school",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_school_affiliation",
      "cvt": false,
      "name": "medical school",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/first_tv_appearance",
      "cvt": false,
      "name": "debut",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/last_tv_appearance",
      "cvt": false,
      "name": "finale",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_program",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_program",
      "cvt": true,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_episodes",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_episodes",
      "cvt": true,
      "name": "episodes",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_episode_segments",
      "cvt": true,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/theater/play/composer",
      "cvt": false,
      "name": "music composer",
      "kind": "alias"
    },
    {
      "id": "/theater/play/characters",
      "cvt": false,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/theater/play/country_of_origin",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/theater/play/country_of_origin",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/theater/play/playwright",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/theater/play/playwright",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/computer/processor_manufacturer/processors_manufactured",
      "cvt": false,
      "name": "processors",
      "kind": "alias"
    },
    {
      "id": "/computer/processor_manufacturer/processors_manufactured",
      "cvt": false,
      "name": "cpu",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_production/performed_at",
      "cvt": false,
      "name": "venues",
      "kind": "alias"
    },
    {
      "id": "/automotive/model_year/examples",
      "cvt": false,
      "name": "cars",
      "kind": "alias"
    },
    {
      "id": "/automotive/model_year/examples",
      "cvt": false,
      "name": "cars",
      "kind": "alias"
    },
    {
      "id": "/automotive/model_year/next_model_year",
      "cvt": false,
      "name": "successor",
      "kind": "alias"
    },
    {
      "id": "/geography/river/origin",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/geography/river/origin",
      "cvt": false,
      "name": "fed",
      "kind": "alias"
    },
    {
      "id": "/geography/river/basin_countries",
      "cvt": false,
      "name": "basin",
      "kind": "alias"
    },
    {
      "id": "/geography/river/origin_long_lat",
      "cvt": true,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/geography/river/cities",
      "cvt": false,
      "name": "towns",
      "kind": "alias"
    },
    {
      "id": "/award/competitor/competitions_won",
      "cvt": false,
      "name": "wins",
      "kind": "alias"
    },
    {
      "id": "/award/competitor/competitions_won",
      "cvt": false,
      "name": "victories",
      "kind": "alias"
    },
    {
      "id": "/education/educational_degree/people_with_this_degree",
      "cvt": true,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/education/educational_degree/people_with_this_degree",
      "cvt": true,
      "name": "researchers",
      "kind": "alias"
    },
    {
      "id": "/education/educational_degree/people_with_this_degree",
      "cvt": true,
      "name": "students",
      "kind": "alias"
    },
    {
      "id": "/book/author/series_written_or_contributed_to",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writing",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writings",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "writing style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "burials",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "corpses",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "bodies",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "district",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "school board",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/award/award_nominated_work/award_nominations",
      "cvt": true,
      "name": "nominations",
      "kind": "alias"
    },
    {
      "id": "/language/language_family/sub_families",
      "cvt": false,
      "name": "subgroups",
      "kind": "alias"
    },
    {
      "id": "/cvg/musical_game_song/games",
      "cvt": true,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/opera/opera_character/portrayed_by",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/opera/opera_character/portrayed_by",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/law/inventor/us_patents",
      "cvt": false,
      "name": "intellectual property",
      "kind": "alias"
    },
    {
      "id": "/business/company_advisor/companies_advised",
      "cvt": false,
      "name": "companies",
      "kind": "alias"
    },
    {
      "id": "/geography/geographical_feature/category",
      "cvt": false,
      "name": "feature type",
      "kind": "alias"
    },
    {
      "id": "/film/content_rating/film",
      "cvt": false,
      "name": "movie",
      "kind": "alias"
    },
    {
      "id": "/film/content_rating/country",
      "cvt": false,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/broadcast/radio_station/serves_area",
      "cvt": false,
      "name": "audiance",
      "kind": "alias"
    },
    {
      "id": "/geography/island/body_of_water",
      "cvt": false,
      "name": "lake",
      "kind": "alias"
    },
    {
      "id": "/geography/island/body_of_water",
      "cvt": false,
      "name": "ocean",
      "kind": "alias"
    },
    {
      "id": "/geography/island/body_of_water",
      "cvt": false,
      "name": "surounding river",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/city_limits",
      "cvt": false,
      "name": "border",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_character/plays_appears_in",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_character/portrayed_by",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_character/portrayed_by",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_character/portrayed_by",
      "cvt": true,
      "name": "actress",
      "kind": "alias"
    },
    {
      "id": "/business/sponsored_recipient/sponsorship",
      "cvt": true,
      "name": "sponsors",
      "kind": "alias"
    },
    {
      "id": "/film/film_series/films_in_series",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/film_series/films_in_series",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "faculty",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "teachers",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/number_of_staff",
      "cvt": true,
      "name": "staff",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "size",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "enrollment",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/mascot",
      "cvt": false,
      "name": "animal",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student paper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student newspaper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "students",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "graduates",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "alumni",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "satellite schools",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "campuses",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/school_magazines",
      "cvt": false,
      "name": "student magazine",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/sexes_accepted",
      "cvt": true,
      "name": "gender",
      "kind": "alias"
    },
    {
      "id": "/book/author/series_written_or_contributed_to",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writing",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writings",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "writing style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/food/beer/brewery_brand",
      "cvt": false,
      "name": "brewery",
      "kind": "alias"
    },
    {
      "id": "/food/beer/brewery_brand",
      "cvt": false,
      "name": "breweries",
      "kind": "alias"
    },
    {
      "id": "/food/beer/brewery_brand",
      "cvt": false,
      "name": "brand",
      "kind": "alias"
    },
    {
      "id": "/food/beer/brewery_brand",
      "cvt": false,
      "name": "maker",
      "kind": "alias"
    },
    {
      "id": "/food/beer/from_region",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/food/beer/from_region",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/artist",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/period_or_movement",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/art_subject",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/owners",
      "cvt": true,
      "name": "buyers",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/founders",
      "cvt": false,
      "name": "creators",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/board_members",
      "cvt": true,
      "name": "board",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/headquarters",
      "cvt": true,
      "name": "place",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/headquarters",
      "cvt": true,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/headquarters",
      "cvt": true,
      "name": "site",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "subject",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "research",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "advocacy",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/committees",
      "cvt": false,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/legal_structure",
      "cvt": false,
      "name": "company type",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/legal_structure",
      "cvt": false,
      "name": "type of company",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/place_founded",
      "cvt": false,
      "name": "founding location",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/place_founded",
      "cvt": false,
      "name": "founding place",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/locations",
      "cvt": false,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/locations",
      "cvt": false,
      "name": "stores",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/acquired_by",
      "cvt": true,
      "name": "bought by",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/companies_acquired",
      "cvt": true,
      "name": "companies bought",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/leadership",
      "cvt": true,
      "name": "leader",
      "kind": "alias"
    },
    {
      "id": "/metropolitan_transit/transit_line/stops",
      "cvt": false,
      "name": "stops",
      "kind": "alias"
    },
    {
      "id": "/metropolitan_transit/transit_line/stops",
      "cvt": false,
      "name": "terminals",
      "kind": "alias"
    },
    {
      "id": "/metropolitan_transit/transit_line/terminuses",
      "cvt": false,
      "name": "terminals",
      "kind": "alias"
    },
    {
      "id": "/metropolitan_transit/transit_line/service_hours",
      "cvt": true,
      "name": "hours",
      "kind": "alias"
    },
    {
      "id": "/metropolitan_transit/transit_line/daily_riders",
      "cvt": true,
      "name": "riders",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_position/players",
      "cvt": false,
      "name": "football players",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/arena_stadium",
      "cvt": false,
      "name": "arena",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/arena_stadium",
      "cvt": false,
      "name": "arena",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/arena_stadium",
      "cvt": false,
      "name": "stadium",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/arena_stadium",
      "cvt": false,
      "name": "field",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/arena_stadium",
      "cvt": false,
      "name": "rink",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/arena_stadium",
      "cvt": false,
      "name": "coliseum",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/arena_stadium",
      "cvt": false,
      "name": "coliseum",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/arena_stadium",
      "cvt": false,
      "name": "colosseum",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/location",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/location",
      "cvt": false,
      "name": "place",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/location",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/team_mascot",
      "cvt": false,
      "name": "mascot",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/team_mascot",
      "cvt": false,
      "name": "animal",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/previously_known_as",
      "cvt": false,
      "name": "history",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_team/season_record",
      "cvt": true,
      "name": "stats",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_universe_creator/fictional_universes_created",
      "cvt": false,
      "name": "stories",
      "kind": "alias"
    },
    {
      "id": "/food/food/nutrients",
      "cvt": true,
      "name": "nutrients",
      "kind": "alias"
    },
    {
      "id": "/food/food/nutrients",
      "cvt": true,
      "name": "vitamins",
      "kind": "alias"
    },
    {
      "id": "/food/food/nutrients",
      "cvt": true,
      "name": "nutrition information",
      "kind": "alias"
    },
    {
      "id": "/food/food/nutrients",
      "cvt": true,
      "name": "ingredients",
      "kind": "alias"
    },
    {
      "id": "/book/reviewed_work/reviews_of_this_work",
      "cvt": false,
      "name": "reviews",
      "kind": "alias"
    },
    {
      "id": "/wine/wine_producer/wines",
      "cvt": false,
      "name": "wines made",
      "kind": "alias"
    },
    {
      "id": "/wine/wine_producer/wines",
      "cvt": false,
      "name": "wines produced",
      "kind": "alias"
    },
    {
      "id": "/aviation/accident_type/aircraft_accidents_of_this_type",
      "cvt": false,
      "name": "accidents",
      "kind": "alias"
    },
    {
      "id": "/aviation/accident_type/aircraft_accidents_of_this_type",
      "cvt": false,
      "name": "disasters",
      "kind": "alias"
    },
    {
      "id": "/aviation/accident_type/aircraft_accidents_of_this_type",
      "cvt": false,
      "name": "crashes",
      "kind": "alias"
    },
    {
      "id": "/library/public_library/library_system",
      "cvt": false,
      "name": "network",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_position/players",
      "cvt": false,
      "name": "football players",
      "kind": "alias"
    },
    {
      "id": "/location/location/geolocation",
      "cvt": true,
      "name": "coordinates",
      "kind": "alias"
    },
    {
      "id": "/location/location/geolocation",
      "cvt": true,
      "name": "geocoordinates",
      "kind": "alias"
    },
    {
      "id": "/location/location/geolocation",
      "cvt": true,
      "name": "geo-coordinates",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "includes",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "parts",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "sections",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "places",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "places in",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "places in",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "places inside",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "contents",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "parts of",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "neighbourhoods",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "subdivisions",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "locations in",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "locations inside",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "places inside",
      "kind": "alias"
    },
    {
      "id": "/location/location/contains",
      "cvt": false,
      "name": "neighbourhoods",
      "kind": "alias"
    },
    {
      "id": "/location/location/containedby",
      "cvt": false,
      "name": "included in",
      "kind": "alias"
    },
    {
      "id": "/location/location/containedby",
      "cvt": false,
      "name": "part of",
      "kind": "alias"
    },
    {
      "id": "/location/location/containedby",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/location/location/containedby",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/location/location/adjoin_s",
      "cvt": true,
      "name": "beside",
      "kind": "alias"
    },
    {
      "id": "/location/location/adjoin_s",
      "cvt": true,
      "name": "neighbour",
      "kind": "alias"
    },
    {
      "id": "/location/location/adjoin_s",
      "cvt": true,
      "name": "neighbours",
      "kind": "alias"
    },
    {
      "id": "/location/location/time_zones",
      "cvt": false,
      "name": "utc",
      "kind": "alias"
    },
    {
      "id": "/location/location/time_zones",
      "cvt": false,
      "name": "timezone",
      "kind": "alias"
    },
    {
      "id": "/location/location/people_born_here",
      "cvt": false,
      "name": "natives",
      "kind": "alias"
    },
    {
      "id": "/location/location/people_born_here",
      "cvt": false,
      "name": "residents",
      "kind": "alias"
    },
    {
      "id": "/location/location/people_born_here",
      "cvt": false,
      "name": "citizen",
      "kind": "alias"
    },
    {
      "id": "/location/location/people_born_here",
      "cvt": false,
      "name": "citizens",
      "kind": "alias"
    },
    {
      "id": "/location/location/people_born_here",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/location/location/people_born_here",
      "cvt": false,
      "name": "hometown",
      "kind": "alias"
    },
    {
      "id": "/location/location/street_address",
      "cvt": true,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/location/location/street_address",
      "cvt": true,
      "name": "address",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_specialty/diseases_treated",
      "cvt": false,
      "name": "diseases",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_specialty/diseases_treated",
      "cvt": false,
      "name": "conditions",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_specialty/physicians_with_this_specialty",
      "cvt": false,
      "name": "doctos",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_specialty/physicians_with_this_specialty",
      "cvt": false,
      "name": "doctors",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_specialty/physicians_with_this_specialty",
      "cvt": false,
      "name": "physicians",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_specialty/hospitals_with_this_specialty",
      "cvt": false,
      "name": "hospitals",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_series/featured_characters",
      "cvt": false,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_series/featured_characters",
      "cvt": false,
      "name": "characters ",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_series/final_issue",
      "cvt": false,
      "name": "end",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_series/first_issue",
      "cvt": false,
      "name": "beginning",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_series/created_by",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/food/candy_bar_manufacturer/candy_bars",
      "cvt": false,
      "name": "bars",
      "kind": "alias"
    },
    {
      "id": "/food/candy_bar_manufacturer/candy_bars",
      "cvt": false,
      "name": "chocolate bars",
      "kind": "alias"
    },
    {
      "id": "/food/candy_bar_manufacturer/candy_bars",
      "cvt": false,
      "name": "candy",
      "kind": "alias"
    },
    {
      "id": "/cricket/cricket_bowler/odi_bowling_stats",
      "cvt": true,
      "name": "stats",
      "kind": "alias"
    },
    {
      "id": "/cricket/cricket_bowler/test_bowling_stats",
      "cvt": true,
      "name": "stats",
      "kind": "alias"
    },
    {
      "id": "/cricket/cricket_bowler/bowling_style",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/government/political_party/politicians_in_this_party",
      "cvt": true,
      "name": "card-carriers",
      "kind": "alias"
    },
    {
      "id": "/government/political_party/politicians_in_this_party",
      "cvt": true,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/government/political_party/politicians_in_this_party",
      "cvt": true,
      "name": "politicians",
      "kind": "alias"
    },
    {
      "id": "/government/political_party/politicians_in_this_party",
      "cvt": true,
      "name": "mps",
      "kind": "alias"
    },
    {
      "id": "/government/political_party/politicians_in_this_party",
      "cvt": true,
      "name": "mpps",
      "kind": "alias"
    },
    {
      "id": "/martial_arts/martial_art/origin",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/martial_arts/martial_art/origin",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/martial_arts/martial_art/well_known_practitioner",
      "cvt": false,
      "name": "experts",
      "kind": "alias"
    },
    {
      "id": "/martial_arts/martial_art/well_known_practitioner",
      "cvt": false,
      "name": "professionals",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_championship_event/season",
      "cvt": false,
      "name": "year",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_championship_event/runner_up",
      "cvt": false,
      "name": "loser",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_championship_event/champion",
      "cvt": false,
      "name": "winner",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_championship_event/champion",
      "cvt": false,
      "name": "winning team",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_championship_event/champion",
      "cvt": false,
      "name": "winner",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_championship_event/champion",
      "cvt": false,
      "name": "winner",
      "kind": "alias"
    },
    {
      "id": "/games/playing_card_deck_type/card_games",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_production_staff/theater_productions",
      "cvt": true,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/people/marriage_union_type/unions_of_this_type",
      "cvt": true,
      "name": "couples",
      "kind": "alias"
    },
    {
      "id": "/computer/programming_language_paradigm/languages",
      "cvt": false,
      "name": "computer  languages",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "creator ",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "song",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "jingle",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/recurring_writers",
      "cvt": true,
      "name": "writers",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/character_powers/characters_with_this_ability",
      "cvt": false,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/location/us_county/county_seat",
      "cvt": false,
      "name": "seat",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "creator ",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "song",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "jingle",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/recurring_writers",
      "cvt": true,
      "name": "writers",
      "kind": "alias"
    },
    {
      "id": "/dining/restaurant/cuisine",
      "cvt": false,
      "name": "type",
      "kind": "alias"
    },
    {
      "id": "/dining/restaurant/cuisine",
      "cvt": false,
      "name": "food",
      "kind": "alias"
    },
    {
      "id": "/dining/restaurant/cuisine",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/dining/restaurant/cuisine",
      "cvt": false,
      "name": "food",
      "kind": "alias"
    },
    {
      "id": "/dining/restaurant/chefs",
      "cvt": true,
      "name": "cook",
      "kind": "alias"
    },
    {
      "id": "/location/ru_krai/administrative_center",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_scope/organizations_with_this_scope",
      "cvt": false,
      "name": "organizations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_scope/organizations_with_this_scope",
      "cvt": false,
      "name": "organisations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_scope/organizations_with_this_scope",
      "cvt": false,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_scope/organizations_with_this_scope",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_scope/organizations_with_this_scope",
      "cvt": false,
      "name": "societies",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/founders",
      "cvt": false,
      "name": "creators",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/board_members",
      "cvt": true,
      "name": "board",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/headquarters",
      "cvt": true,
      "name": "place",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/headquarters",
      "cvt": true,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/headquarters",
      "cvt": true,
      "name": "site",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "subject",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "research",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "advocacy",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/committees",
      "cvt": false,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/legal_structure",
      "cvt": false,
      "name": "company type",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/legal_structure",
      "cvt": false,
      "name": "type of company",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/place_founded",
      "cvt": false,
      "name": "founding location",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/place_founded",
      "cvt": false,
      "name": "founding place",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/locations",
      "cvt": false,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/locations",
      "cvt": false,
      "name": "stores",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/acquired_by",
      "cvt": true,
      "name": "bought by",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/companies_acquired",
      "cvt": true,
      "name": "companies bought",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/leadership",
      "cvt": true,
      "name": "leader",
      "kind": "alias"
    },
    {
      "id": "/theater/theater/theatrical_productions_staged_here",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/theater/theater/theatrical_productions_staged_here",
      "cvt": false,
      "name": "productions",
      "kind": "alias"
    },
    {
      "id": "/location/ru_oblast/administrative_center",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/location/australian_state/capital_city",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/medicine/drug_administration_route/administered_drugs",
      "cvt": false,
      "name": "drugs",
      "kind": "alias"
    },
    {
      "id": "/medicine/drug_administration_route/administered_drugs",
      "cvt": false,
      "name": "medications",
      "kind": "alias"
    },
    {
      "id": "/automotive/make/model_s",
      "cvt": false,
      "name": "models",
      "kind": "alias"
    },
    {
      "id": "/automotive/make/parent_company",
      "cvt": false,
      "name": "company ",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_publisher/comic_book_series_published",
      "cvt": false,
      "name": "comics",
      "kind": "alias"
    },
    {
      "id": "/location/uk_metropolitan_borough/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/automotive/designer/automobiles_designed",
      "cvt": false,
      "name": "cars",
      "kind": "alias"
    },
    {
      "id": "/automotive/designer/automobiles_designed",
      "cvt": false,
      "name": "cars designed",
      "kind": "alias"
    },
    {
      "id": "/automotive/designer/automobiles_designed",
      "cvt": false,
      "name": "automobiles",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_job_title/fictional_characters_with_this_job",
      "cvt": true,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "creator ",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "song",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "jingle",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/recurring_writers",
      "cvt": true,
      "name": "writers",
      "kind": "alias"
    },
    {
      "id": "/influence/influence_node/influenced_by",
      "cvt": false,
      "name": "influences",
      "kind": "alias"
    },
    {
      "id": "/influence/influence_node/influenced_by",
      "cvt": false,
      "name": "inspirations",
      "kind": "alias"
    },
    {
      "id": "/influence/influence_node/influenced",
      "cvt": false,
      "name": "inspired",
      "kind": "alias"
    },
    {
      "id": "/influence/influence_node/peers",
      "cvt": true,
      "name": "contemporaries",
      "kind": "alias"
    },
    {
      "id": "/influence/influence_node/peers",
      "cvt": true,
      "name": "collegue",
      "kind": "alias"
    },
    {
      "id": "/influence/influence_node/peers",
      "cvt": true,
      "name": "collegues",
      "kind": "alias"
    },
    {
      "id": "/influence/influence_node/peers",
      "cvt": true,
      "name": "friends",
      "kind": "alias"
    },
    {
      "id": "/astronomy/comet_group/comet",
      "cvt": false,
      "name": "comets",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artists",
      "cvt": false,
      "name": "artists",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "artworks",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/time/holiday/featured_in_religions",
      "cvt": false,
      "name": "religion",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_genre/artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_genre/artworks",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/government/primary_election/follow_on_election",
      "cvt": false,
      "name": "elections",
      "kind": "alias"
    },
    {
      "id": "/automotive/company/make_s",
      "cvt": false,
      "name": "makes",
      "kind": "alias"
    },
    {
      "id": "/automotive/company/make_s",
      "cvt": false,
      "name": "models",
      "kind": "alias"
    },
    {
      "id": "/automotive/company/make_s",
      "cvt": false,
      "name": "cars",
      "kind": "alias"
    },
    {
      "id": "/automotive/company/make_s",
      "cvt": false,
      "name": "trucks",
      "kind": "alias"
    },
    {
      "id": "/automotive/company/manufacturing_plants",
      "cvt": false,
      "name": "plants",
      "kind": "alias"
    },
    {
      "id": "/automotive/company/manufacturing_plants",
      "cvt": false,
      "name": "factories",
      "kind": "alias"
    },
    {
      "id": "/automotive/company/manufacturing_plants",
      "cvt": false,
      "name": "car plants",
      "kind": "alias"
    },
    {
      "id": "/architecture/structure/architect",
      "cvt": false,
      "name": "designer",
      "kind": "alias"
    },
    {
      "id": "/architecture/structure/construction_cost",
      "cvt": true,
      "name": "cost",
      "kind": "alias"
    },
    {
      "id": "/architecture/structure/construction_cost",
      "cvt": true,
      "name": "cost",
      "kind": "alias"
    },
    {
      "id": "/architecture/structure/construction_cost",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/architecture/structure/engineer",
      "cvt": false,
      "name": "chief engineer",
      "kind": "alias"
    },
    {
      "id": "/architecture/structure/address",
      "cvt": true,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/architecture/structure/architectural_style",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/architecture/structure/architectural_style",
      "cvt": false,
      "name": "appearance",
      "kind": "alias"
    },
    {
      "id": "/biology/organism/sex",
      "cvt": false,
      "name": "gender",
      "kind": "alias"
    },
    {
      "id": "/biology/organism/children",
      "cvt": false,
      "name": "kids",
      "kind": "alias"
    },
    {
      "id": "/biology/organism/children",
      "cvt": false,
      "name": "progeny",
      "kind": "alias"
    },
    {
      "id": "/biology/organism/place_of_birth",
      "cvt": false,
      "name": "birth place",
      "kind": "alias"
    },
    {
      "id": "/book/author/series_written_or_contributed_to",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writing",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writings",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "writing style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/architecture/engineer/projects",
      "cvt": false,
      "name": "work",
      "kind": "alias"
    },
    {
      "id": "/architecture/engineer/partner_in_firm",
      "cvt": false,
      "name": "firm",
      "kind": "alias"
    },
    {
      "id": "/film/film_character/portrayed_in_films",
      "cvt": true,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/film_character/portrayed_in_films",
      "cvt": true,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/film_character/portrayed_in_films",
      "cvt": true,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/film_character/portrayed_in_films",
      "cvt": true,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_genre/plays_in_this_genre",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/film/film_company_role_or_service/companies_performing_this_role_or_service",
      "cvt": true,
      "name": "companies",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_setting/contained_by",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_setting/contained_by",
      "cvt": false,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_setting/works_set_here",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_setting/works_set_here",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_setting/works_set_here",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_setting/fictional_characters_born_here",
      "cvt": false,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/organization/membership_organization/number_of_members",
      "cvt": true,
      "name": "membership",
      "kind": "alias"
    },
    {
      "id": "/organization/membership_organization/members",
      "cvt": true,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/rocket_function/rockets_supporting_this_function",
      "cvt": false,
      "name": "rockets",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/geographic_distribution",
      "cvt": false,
      "name": "countries",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/languages_spoken",
      "cvt": false,
      "name": "dialect",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/languages_spoken",
      "cvt": false,
      "name": "language",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/people",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/people/ethnicity/people",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "landfall",
      "kind": "alias"
    },
    {
      "id": "/location/us_county/county_seat",
      "cvt": false,
      "name": "seat",
      "kind": "alias"
    },
    {
      "id": "/location/country/administrative_divisions",
      "cvt": false,
      "name": "provinces",
      "kind": "alias"
    },
    {
      "id": "/location/country/administrative_divisions",
      "cvt": false,
      "name": "territories",
      "kind": "alias"
    },
    {
      "id": "/location/country/administrative_divisions",
      "cvt": false,
      "name": "states",
      "kind": "alias"
    },
    {
      "id": "/location/country/currency_used",
      "cvt": false,
      "name": "money",
      "kind": "alias"
    },
    {
      "id": "/location/country/currency_used",
      "cvt": false,
      "name": "currency",
      "kind": "alias"
    },
    {
      "id": "/location/country/official_language",
      "cvt": false,
      "name": "language",
      "kind": "alias"
    },
    {
      "id": "/location/country/gdp_nominal_per_capita",
      "cvt": true,
      "name": "gdp per capita",
      "kind": "alias"
    },
    {
      "id": "/location/country/internet_tld",
      "cvt": false,
      "name": "tld",
      "kind": "alias"
    },
    {
      "id": "/location/country/languages_spoken",
      "cvt": false,
      "name": "spoken languages",
      "kind": "alias"
    },
    {
      "id": "/location/ru_raion/administrative_center",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/broadcast/radio_station_owner/radio_stations",
      "cvt": false,
      "name": "radio stations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_member/member_of",
      "cvt": true,
      "name": "organizations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_member/member_of",
      "cvt": true,
      "name": "organisations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_member/committees_served_on",
      "cvt": true,
      "name": "committees",
      "kind": "alias"
    },
    {
      "id": "/theater/theater/theatrical_productions_staged_here",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/theater/theater/theatrical_productions_staged_here",
      "cvt": false,
      "name": "productions",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "organisations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "organizations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "clubs",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "societies",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "support groups",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "comitees",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "charities",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "charity",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_sector/organizations_in_this_sector",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/medicine/drug/drug_class",
      "cvt": false,
      "name": "class",
      "kind": "alias"
    },
    {
      "id": "/medicine/drug/route_of_administration",
      "cvt": false,
      "name": "administration",
      "kind": "alias"
    },
    {
      "id": "/medicine/drug/legal_status",
      "cvt": false,
      "name": "status",
      "kind": "alias"
    },
    {
      "id": "/transportation/bridge/body_of_water_spanned",
      "cvt": false,
      "name": "river",
      "kind": "alias"
    },
    {
      "id": "/transportation/bridge/body_of_water_spanned",
      "cvt": false,
      "name": "water under",
      "kind": "alias"
    },
    {
      "id": "/transportation/bridge/body_of_water_spanned",
      "cvt": false,
      "name": "water unde",
      "kind": "alias"
    },
    {
      "id": "/transportation/bridge/body_of_water_spanned",
      "cvt": false,
      "name": "water",
      "kind": "alias"
    },
    {
      "id": "/transportation/bridge/body_of_water_spanned",
      "cvt": false,
      "name": "lake",
      "kind": "alias"
    },
    {
      "id": "/transportation/bridge/locale",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/character_species/found_in_fictional_universe",
      "cvt": false,
      "name": "story",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/accident_site",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/flight_destination",
      "cvt": false,
      "name": "destination",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/aircraft",
      "cvt": true,
      "name": "airplane",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/accident_site",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/flight_destination",
      "cvt": false,
      "name": "destination",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/aircraft",
      "cvt": true,
      "name": "airplane",
      "kind": "alias"
    },
    {
      "id": "/computer/software/protocols_used",
      "cvt": false,
      "name": "protocols",
      "kind": "alias"
    },
    {
      "id": "/computer/software/languages_used",
      "cvt": false,
      "name": "programming language",
      "kind": "alias"
    },
    {
      "id": "/award/ranked_item/appears_in_ranked_lists",
      "cvt": true,
      "name": "rank",
      "kind": "alias"
    },
    {
      "id": "/religion/religious_leadership_jurisdiction/size_or_type",
      "cvt": false,
      "name": "size",
      "kind": "alias"
    },
    {
      "id": "/book/published_work/published_in_published_as",
      "cvt": true,
      "name": "publisher",
      "kind": "alias"
    },
    {
      "id": "/organization/organization_founder/organizations_founded",
      "cvt": false,
      "name": "organization",
      "kind": "alias"
    },
    {
      "id": "/film/film/directed_by",
      "cvt": false,
      "name": "director",
      "kind": "alias"
    },
    {
      "id": "/film/film/directed_by",
      "cvt": false,
      "name": "director",
      "kind": "alias"
    },
    {
      "id": "/film/film/directed_by",
      "cvt": false,
      "name": "auteur",
      "kind": "alias"
    },
    {
      "id": "/film/film/produced_by",
      "cvt": false,
      "name": "prodocer",
      "kind": "alias"
    },
    {
      "id": "/film/film/produced_by",
      "cvt": false,
      "name": "producer",
      "kind": "alias"
    },
    {
      "id": "/film/film/produced_by",
      "cvt": false,
      "name": "producer",
      "kind": "alias"
    },
    {
      "id": "/film/film/written_by",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/film/film/written_by",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/film/film/written_by",
      "cvt": false,
      "name": "screenwriter",
      "kind": "alias"
    },
    {
      "id": "/film/film/cinematography",
      "cvt": false,
      "name": "cinematographer",
      "kind": "alias"
    },
    {
      "id": "/film/film/edited_by",
      "cvt": false,
      "name": "editor",
      "kind": "alias"
    },
    {
      "id": "/film/film/edited_by",
      "cvt": false,
      "name": "editer",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "composer",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "score",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "music",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "musicians",
      "kind": "alias"
    },
    {
      "id": "/film/film/rating",
      "cvt": false,
      "name": "rating",
      "kind": "alias"
    },
    {
      "id": "/film/film/rating",
      "cvt": false,
      "name": "content rating",
      "kind": "alias"
    },
    {
      "id": "/film/film/estimated_budget",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/film/film/estimated_budget",
      "cvt": true,
      "name": "cost",
      "kind": "alias"
    },
    {
      "id": "/film/film/estimated_budget",
      "cvt": true,
      "name": "budget",
      "kind": "alias"
    },
    {
      "id": "/film/film/country",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "stars",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "lead",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "actress",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "acting",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "people in",
      "kind": "alias"
    },
    {
      "id": "/film/film/runtime",
      "cvt": true,
      "name": "length",
      "kind": "alias"
    },
    {
      "id": "/film/film/locations",
      "cvt": false,
      "name": "places in",
      "kind": "alias"
    },
    {
      "id": "/film/film/locations",
      "cvt": false,
      "name": "places",
      "kind": "alias"
    },
    {
      "id": "/film/film/locations",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/film/film/soundtrack",
      "cvt": false,
      "name": "music",
      "kind": "alias"
    },
    {
      "id": "/film/film/soundtrack",
      "cvt": false,
      "name": "score",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "filming locations",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "place filmed",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "set",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "filmset",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "filming location",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_series",
      "cvt": false,
      "name": "trilogy",
      "kind": "alias"
    },
    {
      "id": "/film/film/story_by",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/film/film/personal_appearances",
      "cvt": true,
      "name": "cameos",
      "kind": "alias"
    },
    {
      "id": "/film/film/dubbing_performances",
      "cvt": true,
      "name": "voice actors",
      "kind": "alias"
    },
    {
      "id": "/film/film/dubbing_performances",
      "cvt": true,
      "name": "voices",
      "kind": "alias"
    },
    {
      "id": "/film/film/dubbing_performances",
      "cvt": true,
      "name": "voice actress",
      "kind": "alias"
    },
    {
      "id": "/film/film/costume_design_by",
      "cvt": false,
      "name": "costumes",
      "kind": "alias"
    },
    {
      "id": "/film/film/other_crew",
      "cvt": true,
      "name": "crew",
      "kind": "alias"
    },
    {
      "id": "/film/film/other_crew",
      "cvt": true,
      "name": "film crew",
      "kind": "alias"
    },
    {
      "id": "/film/film/trailers",
      "cvt": true,
      "name": "teaser",
      "kind": "alias"
    },
    {
      "id": "/film/film/distributors",
      "cvt": true,
      "name": "publisher",
      "kind": "alias"
    },
    {
      "id": "/film/film/release_date_s",
      "cvt": true,
      "name": "date",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_festivals",
      "cvt": false,
      "name": "festivals",
      "kind": "alias"
    },
    {
      "id": "/film/film/executive_produced_by",
      "cvt": false,
      "name": "executive producer",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_casting_director",
      "cvt": false,
      "name": "casting director",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_production_design_by",
      "cvt": false,
      "name": "production designer",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_set_decoration_by",
      "cvt": false,
      "name": "set decorator",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/first_tv_appearance",
      "cvt": false,
      "name": "debut",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/last_tv_appearance",
      "cvt": false,
      "name": "finale",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_program",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_program",
      "cvt": true,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_episodes",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_episodes",
      "cvt": true,
      "name": "episodes",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_character/appeared_in_tv_episode_segments",
      "cvt": true,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/film/film_genre/films_in_this_genre",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/film_genre/films_in_this_genre",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/architecture/architect/structures_designed",
      "cvt": false,
      "name": "buildings",
      "kind": "alias"
    },
    {
      "id": "/architecture/architect/structures_designed",
      "cvt": false,
      "name": "work",
      "kind": "alias"
    },
    {
      "id": "/architecture/architect/structures_designed",
      "cvt": false,
      "name": "structures",
      "kind": "alias"
    },
    {
      "id": "/architecture/architect/structures_designed",
      "cvt": false,
      "name": "projects",
      "kind": "alias"
    },
    {
      "id": "/architecture/architect/architectural_style",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/architecture/architect/architectural_style",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/architecture/architect/architectural_style",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/projects/project_participant/projects",
      "cvt": true,
      "name": "construction projects",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "officials",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "public officials",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/orientation",
      "cvt": false,
      "name": "direction",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/major_cities",
      "cvt": false,
      "name": "cities",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/major_cities",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/major_cities",
      "cvt": false,
      "name": "towns",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/highway_system",
      "cvt": false,
      "name": "highway",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/major_junctions1",
      "cvt": true,
      "name": "intersections",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/major_junctions1",
      "cvt": true,
      "name": "crossings",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/major_junctions1",
      "cvt": true,
      "name": "junctions",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/end1",
      "cvt": true,
      "name": "end",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/end1",
      "cvt": true,
      "name": "start",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/end2",
      "cvt": true,
      "name": "end",
      "kind": "alias"
    },
    {
      "id": "/transportation/road/end2",
      "cvt": true,
      "name": "start",
      "kind": "alias"
    },
    {
      "id": "/sports/drafted_athlete/drafted",
      "cvt": true,
      "name": "draft",
      "kind": "alias"
    },
    {
      "id": "/sports/drafted_athlete/drafted",
      "cvt": true,
      "name": "draft date",
      "kind": "alias"
    },
    {
      "id": "/award/award_category/judges_jury",
      "cvt": true,
      "name": "judges",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/cause_of_death",
      "cvt": false,
      "name": "reason for dying",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/cause_of_death",
      "cvt": false,
      "name": "terminal ilness",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/cause_of_death",
      "cvt": false,
      "name": "terminal illness",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/place_of_death",
      "cvt": false,
      "name": "death place",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/place_of_burial",
      "cvt": false,
      "name": "resting place",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/place_of_burial",
      "cvt": false,
      "name": "cemetary",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/place_of_cremation",
      "cvt": false,
      "name": "crematorium",
      "kind": "alias"
    },
    {
      "id": "/language/human_language/countries_spoken_in",
      "cvt": false,
      "name": "places spoken",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/related_equipment",
      "cvt": false,
      "name": "equipment",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/related_equipment",
      "cvt": false,
      "name": "gear",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/related_equipment",
      "cvt": false,
      "name": "tools",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/officials",
      "cvt": false,
      "name": "referees",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/pro_athletes",
      "cvt": true,
      "name": "athletes",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/pro_athletes",
      "cvt": true,
      "name": "players",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/pro_athletes",
      "cvt": true,
      "name": "competitors",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/pro_athletes",
      "cvt": true,
      "name": "pros",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/pro_athletes",
      "cvt": true,
      "name": "professionals",
      "kind": "alias"
    },
    {
      "id": "/sports/sport/pro_athletes",
      "cvt": true,
      "name": "athletes",
      "kind": "alias"
    },
    {
      "id": "/tennis/tennis_player/matches_won",
      "cvt": true,
      "name": "wins",
      "kind": "alias"
    },
    {
      "id": "/tennis/tennis_player/career_prize_money",
      "cvt": true,
      "name": "winnings",
      "kind": "alias"
    },
    {
      "id": "/tennis/tennis_player/tennis_grip",
      "cvt": false,
      "name": "grip",
      "kind": "alias"
    },
    {
      "id": "/tennis/tennis_player/handed",
      "cvt": false,
      "name": "handedness",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_choreographer/plays_choreographed",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/opera/opera/composer",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/opera/opera/composer",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/opera/opera/composer",
      "cvt": false,
      "name": "maker",
      "kind": "alias"
    },
    {
      "id": "/opera/opera/characters",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/opera/opera/characters",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/opera/opera/premiere_production",
      "cvt": false,
      "name": "premiere",
      "kind": "alias"
    },
    {
      "id": "/opera/opera/premiere_production",
      "cvt": false,
      "name": "premiere",
      "kind": "alias"
    },
    {
      "id": "/opera/opera/premiere_production",
      "cvt": false,
      "name": "debut",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_production_staff/theater_productions",
      "cvt": true,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/music/conductor/operas_conducted",
      "cvt": false,
      "name": "operas",
      "kind": "alias"
    },
    {
      "id": "/music/conductor/operas_conducted",
      "cvt": false,
      "name": "operas conducted",
      "kind": "alias"
    },
    {
      "id": "/music/conductor/groups",
      "cvt": true,
      "name": "ensembles",
      "kind": "alias"
    },
    {
      "id": "/music/conductor/groups",
      "cvt": true,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/music/conductor/groups",
      "cvt": true,
      "name": "groups conducted",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/character_species/found_in_fictional_universe",
      "cvt": false,
      "name": "story",
      "kind": "alias"
    },
    {
      "id": "/games/playing_card_game/play_direction",
      "cvt": false,
      "name": "direction",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_character/plays_appears_in",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_character/portrayed_by",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_character/portrayed_by",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_character/portrayed_by",
      "cvt": true,
      "name": "actress",
      "kind": "alias"
    },
    {
      "id": "/government/election_campaign/total_amount_raised",
      "cvt": true,
      "name": "fundraising",
      "kind": "alias"
    },
    {
      "id": "/government/election_campaign/party",
      "cvt": false,
      "name": "party",
      "kind": "alias"
    },
    {
      "id": "/religion/founding_figure/religion_founded",
      "cvt": false,
      "name": "religion",
      "kind": "alias"
    },
    {
      "id": "/religion/founding_figure/religion_founded",
      "cvt": false,
      "name": "religion made",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/medicine/medical_trial_sponsor/trials_sponsored",
      "cvt": false,
      "name": "trials",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_colorist/comic_covers_colored",
      "cvt": false,
      "name": "covers",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/journals_in_this_discipline",
      "cvt": false,
      "name": "journals",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/journals_in_this_discipline",
      "cvt": false,
      "name": "publications",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/subdisciplines",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/subdisciplines",
      "cvt": false,
      "name": "disciplines ",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/subdisciplines",
      "cvt": false,
      "name": "fields",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/subdisciplines",
      "cvt": false,
      "name": "subjects",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/subdisciplines",
      "cvt": false,
      "name": "sectors",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/students_majoring",
      "cvt": true,
      "name": "students",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/academics_in_this_field",
      "cvt": false,
      "name": "experts",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/academics_in_this_field",
      "cvt": false,
      "name": "academics",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/academics_in_this_field",
      "cvt": false,
      "name": "professionals",
      "kind": "alias"
    },
    {
      "id": "/education/field_of_study/academics_in_this_field",
      "cvt": false,
      "name": "researchers",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_host_city/olympics_hosted",
      "cvt": false,
      "name": "olympics",
      "kind": "alias"
    },
    {
      "id": "/award/competition/winner",
      "cvt": false,
      "name": "champion",
      "kind": "alias"
    },
    {
      "id": "/award/competition/winner",
      "cvt": false,
      "name": "champion",
      "kind": "alias"
    },
    {
      "id": "/award/competition/competitors",
      "cvt": false,
      "name": "teams",
      "kind": "alias"
    },
    {
      "id": "/award/competition/competitors",
      "cvt": false,
      "name": "teams",
      "kind": "alias"
    },
    {
      "id": "/award/competition/competitors",
      "cvt": false,
      "name": "players",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_inker/comic_covers_inked",
      "cvt": false,
      "name": "covers",
      "kind": "alias"
    },
    {
      "id": "/book/book_edition/cover_price",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/book/book_edition/number_of_pages",
      "cvt": true,
      "name": "pages",
      "kind": "alias"
    },
    {
      "id": "/book/book_edition/number_of_pages",
      "cvt": true,
      "name": "length",
      "kind": "alias"
    },
    {
      "id": "/book/book_edition/reader",
      "cvt": false,
      "name": "performer",
      "kind": "alias"
    },
    {
      "id": "/book/book_edition/contributing_authors",
      "cvt": false,
      "name": "contributors",
      "kind": "alias"
    },
    {
      "id": "/book/book_edition/book_edition_series",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/roster",
      "cvt": true,
      "name": "players",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/roster",
      "cvt": true,
      "name": "roster",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/roster",
      "cvt": true,
      "name": "players",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/roster",
      "cvt": true,
      "name": "basketball players",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/roster",
      "cvt": true,
      "name": "roster",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/team_stats",
      "cvt": true,
      "name": "stats",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/team_stats",
      "cvt": true,
      "name": "statistics",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/head_coach",
      "cvt": false,
      "name": "coach",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/head_coach",
      "cvt": false,
      "name": "coach",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_team/historical_roster",
      "cvt": true,
      "name": "former players",
      "kind": "alias"
    },
    {
      "id": "/book/translator/works_translated",
      "cvt": false,
      "name": "translations",
      "kind": "alias"
    },
    {
      "id": "/book/translator/works_translated",
      "cvt": false,
      "name": "translated books",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_game_engine_developer/computer_game_engines_developed",
      "cvt": false,
      "name": "engines",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "president",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "prime minister",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "premier",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "executive",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "mayor",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "landfall",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "faculty",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "teachers",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/number_of_staff",
      "cvt": true,
      "name": "staff",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "size",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "enrollment",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/mascot",
      "cvt": false,
      "name": "animal",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student paper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student newspaper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "students",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "graduates",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "alumni",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "satellite schools",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "campuses",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/school_magazines",
      "cvt": false,
      "name": "student magazine",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/sexes_accepted",
      "cvt": true,
      "name": "gender",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_employer/employees",
      "cvt": true,
      "name": "workers",
      "kind": "alias"
    },
    {
      "id": "/government/form_of_government/countries",
      "cvt": false,
      "name": "nations",
      "kind": "alias"
    },
    {
      "id": "/government/form_of_government/countries",
      "cvt": false,
      "name": "states",
      "kind": "alias"
    },
    {
      "id": "/medicine/risk_factor/diseases",
      "cvt": false,
      "name": "dangers",
      "kind": "alias"
    },
    {
      "id": "/medicine/risk_factor/diseases",
      "cvt": false,
      "name": "diseases caused",
      "kind": "alias"
    },
    {
      "id": "/music/artist/origin",
      "cvt": false,
      "name": "hometown",
      "kind": "alias"
    },
    {
      "id": "/music/artist/origin",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/music/artist/origin",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/music/artist/genre",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/music/artist/genre",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/music/artist/genre",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/music/artist/genre",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/music/artist/label",
      "cvt": false,
      "name": "label",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "record",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "records",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "lps",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "releases",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "discography",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "recordings",
      "kind": "alias"
    },
    {
      "id": "/music/artist/contribution",
      "cvt": true,
      "name": "records",
      "kind": "alias"
    },
    {
      "id": "/music/artist/track",
      "cvt": false,
      "name": "songs",
      "kind": "alias"
    },
    {
      "id": "/music/artist/concert_tours",
      "cvt": false,
      "name": "tours",
      "kind": "alias"
    },
    {
      "id": "/music/artist/concert_tours",
      "cvt": false,
      "name": "tours",
      "kind": "alias"
    },
    {
      "id": "/music/artist/concert_tours",
      "cvt": false,
      "name": "international tours",
      "kind": "alias"
    },
    {
      "id": "/comic_strips/comic_strip_creator/comic_strips_written",
      "cvt": true,
      "name": "comic strips",
      "kind": "alias"
    },
    {
      "id": "/comic_strips/comic_strip_creator/comic_strips_written",
      "cvt": true,
      "name": "comics",
      "kind": "alias"
    },
    {
      "id": "/government/election/office",
      "cvt": false,
      "name": "job",
      "kind": "alias"
    },
    {
      "id": "/government/election/winner",
      "cvt": false,
      "name": "winner",
      "kind": "alias"
    },
    {
      "id": "/law/us_patent/inventor",
      "cvt": false,
      "name": "owner",
      "kind": "alias"
    },
    {
      "id": "/law/us_patent/inventor",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/beds",
      "cvt": true,
      "name": "number of beds",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "specialties",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "specialty",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "focuses",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "research",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_school_affiliation",
      "cvt": false,
      "name": "med school",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_school_affiliation",
      "cvt": false,
      "name": "medical school",
      "kind": "alias"
    },
    {
      "id": "/internet/website/api",
      "cvt": false,
      "name": "apis",
      "kind": "alias"
    },
    {
      "id": "/location/postal_code/country",
      "cvt": false,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/religion/deity/deity_of",
      "cvt": false,
      "name": "religions",
      "kind": "alias"
    },
    {
      "id": "/religion/deity/deity_of",
      "cvt": false,
      "name": "believers",
      "kind": "alias"
    },
    {
      "id": "/religion/deity/deity_of",
      "cvt": false,
      "name": "worshipers",
      "kind": "alias"
    },
    {
      "id": "/religion/deity/deity_of",
      "cvt": false,
      "name": "religions",
      "kind": "alias"
    },
    {
      "id": "/religion/deity/deity_of",
      "cvt": false,
      "name": "followers",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_production/performed_at",
      "cvt": false,
      "name": "venues",
      "kind": "alias"
    },
    {
      "id": "/book/school_or_movement/associated_authors",
      "cvt": false,
      "name": "authors",
      "kind": "alias"
    },
    {
      "id": "/book/school_or_movement/associated_authors",
      "cvt": false,
      "name": "writers",
      "kind": "alias"
    },
    {
      "id": "/book/school_or_movement/associated_works",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/book/school_or_movement/associated_works",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/school_or_movement/associated_works",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/book/journal/individual_price",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/book/journal/individual_price",
      "cvt": true,
      "name": "cost",
      "kind": "alias"
    },
    {
      "id": "/book/journal/place_of_publication",
      "cvt": true,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/book/journal/discipline",
      "cvt": false,
      "name": "subject",
      "kind": "alias"
    },
    {
      "id": "/book/journal/discipline",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/book/newspaper/headquarters",
      "cvt": true,
      "name": "office",
      "kind": "alias"
    },
    {
      "id": "/book/newspaper/circulation_areas",
      "cvt": false,
      "name": "circulation",
      "kind": "alias"
    },
    {
      "id": "/book/newspaper/circulation_areas",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/location/australian_territory/capital_city",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_league/seasons",
      "cvt": false,
      "name": "years",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_director/episodes_directed",
      "cvt": false,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_director/tv_segments_directed",
      "cvt": false,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_director/episodes_directed",
      "cvt": false,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_director/tv_segments_directed",
      "cvt": false,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/government/national_anthem/national_anthem_of",
      "cvt": true,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/interests/collectable_item/in_collections",
      "cvt": true,
      "name": "collections",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "creator ",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "song",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "jingle",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/recurring_writers",
      "cvt": true,
      "name": "writers",
      "kind": "alias"
    },
    {
      "id": "/book/author/series_written_or_contributed_to",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writing",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writings",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "writing style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/education/school_type/schools_of_this_kind",
      "cvt": false,
      "name": "schools",
      "kind": "alias"
    },
    {
      "id": "/internet/top_level_domain_sponsor/domains",
      "cvt": false,
      "name": "domains",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/higher_classification",
      "cvt": false,
      "name": "class",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/lower_classifications",
      "cvt": false,
      "name": "subclass",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/lower_classifications",
      "cvt": false,
      "name": "subgroups",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/organisms_of_this_type",
      "cvt": false,
      "name": "animals",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/organisms_of_this_type",
      "cvt": false,
      "name": "instances",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/organisms_of_this_type",
      "cvt": false,
      "name": "organisms",
      "kind": "alias"
    },
    {
      "id": "/biology/organism_classification/earliest_fossil_record",
      "cvt": false,
      "name": "history",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_participating_country/demonstration_medals_won",
      "cvt": true,
      "name": "olympic medals",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_participating_country/demonstration_medals_won",
      "cvt": true,
      "name": "medals",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_participating_country/olympics_participated_in",
      "cvt": false,
      "name": "olympics",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_participating_country/olympics_participated_in",
      "cvt": false,
      "name": "olympic games",
      "kind": "alias"
    },
    {
      "id": "/book/book/editions",
      "cvt": false,
      "name": "versions",
      "kind": "alias"
    },
    {
      "id": "/book/book/characters",
      "cvt": false,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/book/book/interior_illustrations_by",
      "cvt": false,
      "name": "illustrator",
      "kind": "alias"
    },
    {
      "id": "/internet/blog/blogger",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/internet/blog/blogger",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/internet/blog/focus",
      "cvt": false,
      "name": "tags",
      "kind": "alias"
    },
    {
      "id": "/time/month/calendar_system",
      "cvt": false,
      "name": "calendar",
      "kind": "alias"
    },
    {
      "id": "/interests/collectable_item/in_collections",
      "cvt": true,
      "name": "collections",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/episodes",
      "cvt": false,
      "name": "episode count",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "cast",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "acting",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "performers",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_personal_appearances",
      "cvt": true,
      "name": "cameos",
      "kind": "alias"
    },
    {
      "id": "/medicine/drug_brand/active_ingredients",
      "cvt": false,
      "name": "ingredient",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/guest_roles",
      "cvt": true,
      "name": "episodes",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/tv_segment_performances",
      "cvt": true,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/tv_segment_performances",
      "cvt": true,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/library/public_library_system/branches",
      "cvt": false,
      "name": "branches",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "faculty",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "teachers",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/number_of_staff",
      "cvt": true,
      "name": "staff",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "size",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "enrollment",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/mascot",
      "cvt": false,
      "name": "animal",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student paper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student newspaper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "students",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "graduates",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "alumni",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "satellite schools",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "campuses",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/school_magazines",
      "cvt": false,
      "name": "student magazine",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/sexes_accepted",
      "cvt": true,
      "name": "gender",
      "kind": "alias"
    },
    {
      "id": "/location/ca_indian_reserve/aboriginal_groups",
      "cvt": false,
      "name": "tribe",
      "kind": "alias"
    },
    {
      "id": "/location/ca_indian_reserve/aboriginal_groups",
      "cvt": false,
      "name": "aboriginal group",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "creator ",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "song",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "jingle",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/recurring_writers",
      "cvt": true,
      "name": "writers",
      "kind": "alias"
    },
    {
      "id": "/cvg/game_version/platform",
      "cvt": false,
      "name": "system",
      "kind": "alias"
    },
    {
      "id": "/cvg/game_version/peripherals_supported",
      "cvt": false,
      "name": "peripherals",
      "kind": "alias"
    },
    {
      "id": "/cvg/game_version/peripherals_supported",
      "cvt": false,
      "name": "contollers",
      "kind": "alias"
    },
    {
      "id": "/music/engineer/tracks_engineered",
      "cvt": false,
      "name": "tracks",
      "kind": "alias"
    },
    {
      "id": "/music/engineer/tracks_engineered",
      "cvt": false,
      "name": "songs",
      "kind": "alias"
    },
    {
      "id": "/film/film_festival/individual_festivals",
      "cvt": false,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/film/film_festival/individual_festivals",
      "cvt": false,
      "name": "years",
      "kind": "alias"
    },
    {
      "id": "/film/film_festival/sponsoring_organization",
      "cvt": true,
      "name": "sponsors",
      "kind": "alias"
    },
    {
      "id": "/time/time_zone/day_dst_begins",
      "cvt": false,
      "name": "daylight savings",
      "kind": "alias"
    },
    {
      "id": "/time/time_zone/day_dst_begins",
      "cvt": false,
      "name": "daylight savings time",
      "kind": "alias"
    },
    {
      "id": "/time/time_zone/day_dst_begins",
      "cvt": false,
      "name": "summer time",
      "kind": "alias"
    },
    {
      "id": "/time/time_zone/day_dst_begins",
      "cvt": false,
      "name": "dst",
      "kind": "alias"
    },
    {
      "id": "/time/time_zone/locations_in_this_time_zone",
      "cvt": false,
      "name": "cities",
      "kind": "alias"
    },
    {
      "id": "/time/time_zone/locations_in_this_time_zone",
      "cvt": false,
      "name": "places",
      "kind": "alias"
    },
    {
      "id": "/time/time_zone/locations_in_this_time_zone",
      "cvt": false,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/music/artist/origin",
      "cvt": false,
      "name": "hometown",
      "kind": "alias"
    },
    {
      "id": "/music/artist/origin",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/music/artist/origin",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/music/artist/genre",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/music/artist/genre",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/music/artist/genre",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/music/artist/genre",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/music/artist/label",
      "cvt": false,
      "name": "label",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "record",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "records",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "lps",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "releases",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "discography",
      "kind": "alias"
    },
    {
      "id": "/music/artist/album",
      "cvt": false,
      "name": "recordings",
      "kind": "alias"
    },
    {
      "id": "/music/artist/contribution",
      "cvt": true,
      "name": "records",
      "kind": "alias"
    },
    {
      "id": "/music/artist/track",
      "cvt": false,
      "name": "songs",
      "kind": "alias"
    },
    {
      "id": "/music/artist/concert_tours",
      "cvt": false,
      "name": "tours",
      "kind": "alias"
    },
    {
      "id": "/music/artist/concert_tours",
      "cvt": false,
      "name": "tours",
      "kind": "alias"
    },
    {
      "id": "/music/artist/concert_tours",
      "cvt": false,
      "name": "international tours",
      "kind": "alias"
    },
    {
      "id": "/religion/place_of_worship/religion",
      "cvt": false,
      "name": "faith",
      "kind": "alias"
    },
    {
      "id": "/religion/place_of_worship/religion",
      "cvt": false,
      "name": "religion",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_designer/plays_designed",
      "cvt": true,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/casualties",
      "cvt": true,
      "name": "fatalities",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/commanders",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/military_personnel_involved",
      "cvt": false,
      "name": "soldiers",
      "kind": "alias"
    },
    {
      "id": "/music/guitarist/guitars_played",
      "cvt": false,
      "name": "guitars",
      "kind": "alias"
    },
    {
      "id": "/music/guitarist/guitars_played",
      "cvt": false,
      "name": "guitars used",
      "kind": "alias"
    },
    {
      "id": "/education/fraternity_sorority/colleges_and_universities",
      "cvt": false,
      "name": "schools",
      "kind": "alias"
    },
    {
      "id": "/education/fraternity_sorority/official_charity",
      "cvt": false,
      "name": "charity",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/platforms",
      "cvt": false,
      "name": "system",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/platforms",
      "cvt": false,
      "name": "systems",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/characters",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/sequel",
      "cvt": false,
      "name": "sequel",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/game_series",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/prequel",
      "cvt": false,
      "name": "prequel",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/processors_supported",
      "cvt": false,
      "name": "processors",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/processors_supported",
      "cvt": false,
      "name": "cpu",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/online_reviews",
      "cvt": true,
      "name": "reviews",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/uses_game_engine",
      "cvt": false,
      "name": "engine",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/uses_game_engine",
      "cvt": false,
      "name": "engine",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/gameplay_modes",
      "cvt": false,
      "name": "modes",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/gameplay_modes",
      "cvt": false,
      "name": "gameplay",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/influenced_by",
      "cvt": false,
      "name": "influences",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/peripherals_supported",
      "cvt": false,
      "name": "contollers",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/peripherals_supported",
      "cvt": false,
      "name": "peripherals",
      "kind": "alias"
    },
    {
      "id": "/book/periodical_format/periodicals_in_this_format",
      "cvt": true,
      "name": "magazines",
      "kind": "alias"
    },
    {
      "id": "/book/periodical_format/periodicals_in_this_format",
      "cvt": true,
      "name": "newspapers",
      "kind": "alias"
    },
    {
      "id": "/location/uk_non_metropolitan_district/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/film/production_company/films",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/production_company/films",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/business/company_advisor/companies_advised",
      "cvt": false,
      "name": "companies",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/artist",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/period_or_movement",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/art_subject",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/owners",
      "cvt": true,
      "name": "buyers",
      "kind": "alias"
    },
    {
      "id": "/computer/programming_language/language_paradigms",
      "cvt": false,
      "name": "paradigm",
      "kind": "alias"
    },
    {
      "id": "/computer/programming_language/language_designers",
      "cvt": false,
      "name": "designer",
      "kind": "alias"
    },
    {
      "id": "/computer/programming_language/language_designers",
      "cvt": false,
      "name": "designer",
      "kind": "alias"
    },
    {
      "id": "/computer/programming_language/developers",
      "cvt": false,
      "name": "coders",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_facility/teams",
      "cvt": false,
      "name": "home team",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_facility/teams",
      "cvt": false,
      "name": "hometeam",
      "kind": "alias"
    },
    {
      "id": "/business/asset/owners",
      "cvt": true,
      "name": "owner",
      "kind": "alias"
    },
    {
      "id": "/astronomy/meteor_shower/source_of_meteor_shower",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/astronomy/meteor_shower/source_of_meteor_shower",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/biology/animal_breed/examples",
      "cvt": false,
      "name": "pets",
      "kind": "alias"
    },
    {
      "id": "/biology/animal_breed/examples",
      "cvt": false,
      "name": "animals",
      "kind": "alias"
    },
    {
      "id": "/biology/animal_breed/examples",
      "cvt": false,
      "name": "animals",
      "kind": "alias"
    },
    {
      "id": "/biology/animal_breed/place_of_origin",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/character_gender/characters_of_this_gender",
      "cvt": false,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/revenue",
      "cvt": true,
      "name": "income",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/revenue",
      "cvt": true,
      "name": "earnings",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/net_profit",
      "cvt": true,
      "name": "profit",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/assets",
      "cvt": true,
      "name": "assets",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/liabilities",
      "cvt": true,
      "name": "liabilities ",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/competitive_space",
      "cvt": true,
      "name": "competition",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/major_customer",
      "cvt": false,
      "name": "customer",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/major_customer",
      "cvt": false,
      "name": "business partners",
      "kind": "alias"
    },
    {
      "id": "/film/film_genre/films_in_this_genre",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/film_genre/films_in_this_genre",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/episodes",
      "cvt": false,
      "name": "episode count",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "cast",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "acting",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "performers",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_personal_appearances",
      "cvt": true,
      "name": "cameos",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "burials",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "corpses",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "bodies",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/soccer/football_position/players",
      "cvt": false,
      "name": "football players",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/country",
      "cvt": false,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbols",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbolism",
      "kind": "alias"
    },
    {
      "id": "/film/music_contributor/film",
      "cvt": false,
      "name": "movies scored",
      "kind": "alias"
    },
    {
      "id": "/film/music_contributor/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/music_contributor/film",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/music_contributor/film",
      "cvt": false,
      "name": "films scored",
      "kind": "alias"
    },
    {
      "id": "/film/music_contributor/film",
      "cvt": false,
      "name": "scores",
      "kind": "alias"
    },
    {
      "id": "/film/music_contributor/film",
      "cvt": false,
      "name": "film scores",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "faculty",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "teachers",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/number_of_staff",
      "cvt": true,
      "name": "staff",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "size",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "enrollment",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/mascot",
      "cvt": false,
      "name": "animal",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student paper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student newspaper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "students",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "graduates",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "alumni",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "satellite schools",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "campuses",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/school_magazines",
      "cvt": false,
      "name": "student magazine",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/sexes_accepted",
      "cvt": true,
      "name": "gender",
      "kind": "alias"
    },
    {
      "id": "/book/author/series_written_or_contributed_to",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writing",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writings",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "writing style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_division/teams",
      "cvt": false,
      "name": "baseball teams",
      "kind": "alias"
    },
    {
      "id": "/astronomy/asteroid/member_of_asteroid_family",
      "cvt": false,
      "name": "family",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/work_of_fiction/setting",
      "cvt": false,
      "name": "place",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/work_of_fiction/setting",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/work_of_fiction/setting",
      "cvt": false,
      "name": "places",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/work_of_fiction/part_of_these_fictional_universes",
      "cvt": false,
      "name": "story",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/work_of_fiction/part_of_these_fictional_universes",
      "cvt": false,
      "name": "world",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/work_of_fiction/events",
      "cvt": false,
      "name": "plot",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_relationships",
      "cvt": true,
      "name": "relationships",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_relationships",
      "cvt": true,
      "name": "boyfriends",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_relationships",
      "cvt": true,
      "name": "girlfriends",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_relationships",
      "cvt": true,
      "name": "couples",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_relationships",
      "cvt": true,
      "name": "relationships",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_relationships",
      "cvt": true,
      "name": "girlfriends",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_relationships",
      "cvt": true,
      "name": "boyfriends",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_relationships",
      "cvt": true,
      "name": "partners",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/rehab_history",
      "cvt": true,
      "name": "rehab",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/rehab_history",
      "cvt": true,
      "name": "rehab",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/substance_abuse_problems",
      "cvt": true,
      "name": "drug problems",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/substance_abuse_problems",
      "cvt": true,
      "name": "drugs",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/substance_abuse_problems",
      "cvt": true,
      "name": "drugs",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/legal_entanglements",
      "cvt": true,
      "name": "law suits",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/legal_entanglements",
      "cvt": true,
      "name": "legal problems",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/legal_entanglements",
      "cvt": true,
      "name": "lawsuits",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/celebrity_friends",
      "cvt": true,
      "name": "friends",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/celebrity_friends",
      "cvt": true,
      "name": "friendships",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/celebrity_friends",
      "cvt": true,
      "name": "friends",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_orientation",
      "cvt": true,
      "name": "orientation",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/sexual_orientation",
      "cvt": true,
      "name": "orientation",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/celebrity_rivals",
      "cvt": true,
      "name": "rivals",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/celebrity_rivals",
      "cvt": true,
      "name": "rivals",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/celebrity_rivals",
      "cvt": true,
      "name": "enemies",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/net_worth",
      "cvt": true,
      "name": "worth",
      "kind": "alias"
    },
    {
      "id": "/celebrities/celebrity/net_worth",
      "cvt": true,
      "name": "worth",
      "kind": "alias"
    },
    {
      "id": "/cricket/cricket_coach/current_team",
      "cvt": false,
      "name": "teams",
      "kind": "alias"
    },
    {
      "id": "/cricket/cricket_coach/current_team",
      "cvt": false,
      "name": "cricket team",
      "kind": "alias"
    },
    {
      "id": "/cricket/cricket_coach/teams",
      "cvt": true,
      "name": "cricket team",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/city_limits",
      "cvt": false,
      "name": "border",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "president",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "prime minister",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "premier",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "executive",
      "kind": "alias"
    },
    {
      "id": "/government/governmental_jurisdiction/governing_officials",
      "cvt": true,
      "name": "mayor",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/medicine/physician/medical_specialty",
      "cvt": false,
      "name": "specialty",
      "kind": "alias"
    },
    {
      "id": "/medicine/physician/medical_specialty",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/medicine/physician/medical_specialty",
      "cvt": false,
      "name": "research subject",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program_creator/programs_created",
      "cvt": false,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/film/writer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/writer/film",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/writer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "district",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "school board",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/accident_site",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/flight_destination",
      "cvt": false,
      "name": "destination",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/aircraft",
      "cvt": true,
      "name": "airplane",
      "kind": "alias"
    },
    {
      "id": "/business/brand/owner_s",
      "cvt": true,
      "name": "owner",
      "kind": "alias"
    },
    {
      "id": "/business/brand/products",
      "cvt": false,
      "name": "toys",
      "kind": "alias"
    },
    {
      "id": "/sports/pro_athlete/sports_played_professionally",
      "cvt": true,
      "name": "sport",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_athlete/demonstration_medals_won",
      "cvt": true,
      "name": "medals",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_athlete/demonstration_medals_won",
      "cvt": true,
      "name": "olympic medals",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_athlete/country",
      "cvt": true,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_athlete/medals_won",
      "cvt": true,
      "name": "medals",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_facility/teams",
      "cvt": false,
      "name": "home team",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_facility/teams",
      "cvt": false,
      "name": "hometeam",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/cause_of_death",
      "cvt": false,
      "name": "reason for dying",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/cause_of_death",
      "cvt": false,
      "name": "terminal ilness",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/cause_of_death",
      "cvt": false,
      "name": "terminal illness",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/place_of_death",
      "cvt": false,
      "name": "death place",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/place_of_burial",
      "cvt": false,
      "name": "resting place",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/place_of_burial",
      "cvt": false,
      "name": "cemetary",
      "kind": "alias"
    },
    {
      "id": "/people/deceased_person/place_of_cremation",
      "cvt": false,
      "name": "crematorium",
      "kind": "alias"
    },
    {
      "id": "/time/calendar/days_of_week",
      "cvt": false,
      "name": "days",
      "kind": "alias"
    },
    {
      "id": "/time/calendar/days_of_year",
      "cvt": false,
      "name": "days in year",
      "kind": "alias"
    },
    {
      "id": "/cvg/game_series/games_in_series",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/projects/project_focus/projects",
      "cvt": false,
      "name": "planning",
      "kind": "alias"
    },
    {
      "id": "/projects/project_focus/projects",
      "cvt": false,
      "name": "planning",
      "kind": "alias"
    },
    {
      "id": "/computer/programming_language_developer/programming_languages_developed",
      "cvt": false,
      "name": "programming languages",
      "kind": "alias"
    },
    {
      "id": "/book/written_work/original_language",
      "cvt": false,
      "name": "language",
      "kind": "alias"
    },
    {
      "id": "/book/written_work/original_language",
      "cvt": false,
      "name": "language",
      "kind": "alias"
    },
    {
      "id": "/book/written_work/author",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/book/written_work/author",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/book/written_work/author",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/book/written_work/author",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/book/written_work/school_or_movement",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/book/written_work/part_of_series",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_character/cover_appearances",
      "cvt": false,
      "name": "covers",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_character/created_by",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_character/created_by",
      "cvt": false,
      "name": "maker",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_character/first_appearance",
      "cvt": false,
      "name": "debut",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_character/first_appearance",
      "cvt": false,
      "name": "birth",
      "kind": "alias"
    },
    {
      "id": "/film/writer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/writer/film",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/writer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/business/company_advisor/companies_advised",
      "cvt": false,
      "name": "companies",
      "kind": "alias"
    },
    {
      "id": "/astronomy/meteor_shower/source_of_meteor_shower",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/astronomy/meteor_shower/source_of_meteor_shower",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/food/candy_bar/manufacturer",
      "cvt": false,
      "name": "creator ",
      "kind": "alias"
    },
    {
      "id": "/food/candy_bar/manufacturer",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/food/candy_bar/sold_in",
      "cvt": false,
      "name": "countries",
      "kind": "alias"
    },
    {
      "id": "/food/candy_bar/sold_in",
      "cvt": false,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/location/uk_region/headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/location/uk_metropolitan_borough/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/governing_body_of_protected_sites/protected_sites_governed",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/comic_books/comic_book_writer/comic_books_written",
      "cvt": false,
      "name": "comics",
      "kind": "alias"
    },
    {
      "id": "/business/employer/employees",
      "cvt": true,
      "name": "workers",
      "kind": "alias"
    },
    {
      "id": "/business/employer/employees",
      "cvt": true,
      "name": "staff",
      "kind": "alias"
    },
    {
      "id": "/business/employer/employees",
      "cvt": true,
      "name": "employees",
      "kind": "alias"
    },
    {
      "id": "/business/employer/number_of_employees",
      "cvt": true,
      "name": "number of workers",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/satellite/launch_vehicle",
      "cvt": false,
      "name": "rocket",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/satellite/launch_vehicle",
      "cvt": false,
      "name": "shuttle",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "landfall",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_league/seasons",
      "cvt": false,
      "name": "years",
      "kind": "alias"
    },
    {
      "id": "/symbols/coat_of_arms/marshalled_coats_of_arms",
      "cvt": false,
      "name": "coats of arms",
      "kind": "alias"
    },
    {
      "id": "/symbols/coat_of_arms/variation_of_the_field",
      "cvt": true,
      "name": "division",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/ship_builder",
      "cvt": false,
      "name": "builder",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/place_built",
      "cvt": false,
      "name": "birthplace",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/place_built",
      "cvt": false,
      "name": "birth place",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/place_built",
      "cvt": false,
      "name": "building location",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/means_of_propulsion",
      "cvt": false,
      "name": "propulsion",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/means_of_propulsion",
      "cvt": false,
      "name": "motor",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/means_of_propulsion",
      "cvt": false,
      "name": "sails",
      "kind": "alias"
    },
    {
      "id": "/computer/computer_processor/processor_family",
      "cvt": false,
      "name": "family",
      "kind": "alias"
    },
    {
      "id": "/computer/computer_processor/variants",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/computer/computer_processor/used_in_computers",
      "cvt": false,
      "name": "computers",
      "kind": "alias"
    },
    {
      "id": "/computer/file_format/read_by",
      "cvt": false,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/computer/file_format/read_by",
      "cvt": false,
      "name": "software",
      "kind": "alias"
    },
    {
      "id": "/computer/file_format/contained_by",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/meteorology/tropical_cyclone/affected_areas",
      "cvt": false,
      "name": "landfall",
      "kind": "alias"
    },
    {
      "id": "/medicine/symptom/symptom_of",
      "cvt": false,
      "name": "diseases",
      "kind": "alias"
    },
    {
      "id": "/medicine/symptom/symptom_of",
      "cvt": false,
      "name": "cause",
      "kind": "alias"
    },
    {
      "id": "/medicine/symptom/side_effect_of",
      "cvt": false,
      "name": "medications",
      "kind": "alias"
    },
    {
      "id": "/medicine/symptom/includes_symptoms",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artists",
      "cvt": false,
      "name": "artists",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "artworks",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/location/us_county/county_seat",
      "cvt": false,
      "name": "seat",
      "kind": "alias"
    },
    {
      "id": "/computer/software_genre/software_in_genre",
      "cvt": false,
      "name": "software",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_choreographer/plays_choreographed",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/boats/ship_builder/ships_built",
      "cvt": false,
      "name": "boats",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_league/seasons",
      "cvt": false,
      "name": "years",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_producer/plays_produced",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/music/composition/includes",
      "cvt": false,
      "name": "parts",
      "kind": "alias"
    },
    {
      "id": "/music/composition/includes",
      "cvt": false,
      "name": "parts",
      "kind": "alias"
    },
    {
      "id": "/music/composition/includes",
      "cvt": false,
      "name": "movements",
      "kind": "alias"
    },
    {
      "id": "/music/composition/recorded_as_album",
      "cvt": false,
      "name": "album",
      "kind": "alias"
    },
    {
      "id": "/music/composition/recorded_as_album",
      "cvt": false,
      "name": "albums",
      "kind": "alias"
    },
    {
      "id": "/music/composition/composer",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/music/composition/composer",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/music/composition/composer",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/music/composition/composer",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/music/composition/recordings",
      "cvt": false,
      "name": "recordings",
      "kind": "alias"
    },
    {
      "id": "/music/composition/recordings",
      "cvt": false,
      "name": "recordings",
      "kind": "alias"
    },
    {
      "id": "/music/composition/arrangements",
      "cvt": false,
      "name": "versions",
      "kind": "alias"
    },
    {
      "id": "/music/composition/place_composed",
      "cvt": false,
      "name": "place composed ",
      "kind": "alias"
    },
    {
      "id": "/music/composition/place_composed",
      "cvt": false,
      "name": "place written",
      "kind": "alias"
    },
    {
      "id": "/music/composition/place_composed",
      "cvt": false,
      "name": "nationality",
      "kind": "alias"
    },
    {
      "id": "/music/composition/form",
      "cvt": false,
      "name": "form",
      "kind": "alias"
    },
    {
      "id": "/music/composition/lyrics_website",
      "cvt": true,
      "name": "lyrics",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "creator ",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "song",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "jingle",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/recurring_writers",
      "cvt": true,
      "name": "writers",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/country",
      "cvt": false,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbols",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbolism",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/country",
      "cvt": false,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbols",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbolism",
      "kind": "alias"
    },
    {
      "id": "/common/image/size",
      "cvt": true,
      "name": "size",
      "kind": "alias"
    },
    {
      "id": "/film/film_crewmember/films_crewed",
      "cvt": true,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/location/uk_non_metropolitan_county/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/people/person/place_of_birth",
      "cvt": false,
      "name": "birthplace",
      "kind": "alias"
    },
    {
      "id": "/people/person/place_of_birth",
      "cvt": false,
      "name": "birth place",
      "kind": "alias"
    },
    {
      "id": "/people/person/place_of_birth",
      "cvt": false,
      "name": "born",
      "kind": "alias"
    },
    {
      "id": "/people/person/place_of_birth",
      "cvt": false,
      "name": "home town",
      "kind": "alias"
    },
    {
      "id": "/people/person/place_of_birth",
      "cvt": false,
      "name": "hometown",
      "kind": "alias"
    },
    {
      "id": "/people/person/nationality",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/people/person/nationality",
      "cvt": false,
      "name": "nationality",
      "kind": "alias"
    },
    {
      "id": "/people/person/nationality",
      "cvt": false,
      "name": "country of citizenship",
      "kind": "alias"
    },
    {
      "id": "/people/person/nationality",
      "cvt": false,
      "name": "citizenship",
      "kind": "alias"
    },
    {
      "id": "/people/person/religion",
      "cvt": false,
      "name": "belief system",
      "kind": "alias"
    },
    {
      "id": "/people/person/religion",
      "cvt": false,
      "name": "beliefs",
      "kind": "alias"
    },
    {
      "id": "/people/person/religion",
      "cvt": false,
      "name": "faith",
      "kind": "alias"
    },
    {
      "id": "/people/person/religion",
      "cvt": false,
      "name": "worships",
      "kind": "alias"
    },
    {
      "id": "/people/person/religion",
      "cvt": false,
      "name": "creed",
      "kind": "alias"
    },
    {
      "id": "/people/person/religion",
      "cvt": false,
      "name": "church",
      "kind": "alias"
    },
    {
      "id": "/people/person/religion",
      "cvt": false,
      "name": "denomination",
      "kind": "alias"
    },
    {
      "id": "/people/person/date_of_birth",
      "cvt": false,
      "name": "birthday",
      "kind": "alias"
    },
    {
      "id": "/people/person/date_of_birth",
      "cvt": false,
      "name": "birth date",
      "kind": "alias"
    },
    {
      "id": "/people/person/date_of_birth",
      "cvt": false,
      "name": "birth day",
      "kind": "alias"
    },
    {
      "id": "/people/person/date_of_birth",
      "cvt": false,
      "name": "date of birth",
      "kind": "alias"
    },
    {
      "id": "/people/person/date_of_birth",
      "cvt": false,
      "name": "birthdate",
      "kind": "alias"
    },
    {
      "id": "/people/person/gender",
      "cvt": false,
      "name": "sex",
      "kind": "alias"
    },
    {
      "id": "/people/person/gender",
      "cvt": false,
      "name": "sex",
      "kind": "alias"
    },
    {
      "id": "/people/person/parents",
      "cvt": false,
      "name": "mom",
      "kind": "alias"
    },
    {
      "id": "/people/person/parents",
      "cvt": false,
      "name": "mother",
      "kind": "alias"
    },
    {
      "id": "/people/person/parents",
      "cvt": false,
      "name": "dad",
      "kind": "alias"
    },
    {
      "id": "/people/person/parents",
      "cvt": false,
      "name": "father",
      "kind": "alias"
    },
    {
      "id": "/people/person/children",
      "cvt": false,
      "name": "kids",
      "kind": "alias"
    },
    {
      "id": "/people/person/children",
      "cvt": false,
      "name": "daughter",
      "kind": "alias"
    },
    {
      "id": "/people/person/children",
      "cvt": false,
      "name": "son",
      "kind": "alias"
    },
    {
      "id": "/people/person/children",
      "cvt": false,
      "name": "child",
      "kind": "alias"
    },
    {
      "id": "/people/person/children",
      "cvt": false,
      "name": "infant",
      "kind": "alias"
    },
    {
      "id": "/people/person/children",
      "cvt": false,
      "name": "baby",
      "kind": "alias"
    },
    {
      "id": "/people/person/children",
      "cvt": false,
      "name": "babies",
      "kind": "alias"
    },
    {
      "id": "/people/person/children",
      "cvt": false,
      "name": "boy",
      "kind": "alias"
    },
    {
      "id": "/people/person/children",
      "cvt": false,
      "name": "girl",
      "kind": "alias"
    },
    {
      "id": "/people/person/employment_history",
      "cvt": true,
      "name": "jobs",
      "kind": "alias"
    },
    {
      "id": "/people/person/employment_history",
      "cvt": true,
      "name": "resume",
      "kind": "alias"
    },
    {
      "id": "/people/person/employment_history",
      "cvt": true,
      "name": "employment",
      "kind": "alias"
    },
    {
      "id": "/people/person/employment_history",
      "cvt": true,
      "name": "resume",
      "kind": "alias"
    },
    {
      "id": "/people/person/employment_history",
      "cvt": true,
      "name": "jobs",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "wife",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "wives",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "husband",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "spouse",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "partner",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "fiance",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "domestic partner",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "partner",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "marriage",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "marriages",
      "kind": "alias"
    },
    {
      "id": "/people/person/spouse_s",
      "cvt": true,
      "name": "married to",
      "kind": "alias"
    },
    {
      "id": "/people/person/sibling_s",
      "cvt": true,
      "name": "sister",
      "kind": "alias"
    },
    {
      "id": "/people/person/sibling_s",
      "cvt": true,
      "name": "brother",
      "kind": "alias"
    },
    {
      "id": "/people/person/education",
      "cvt": true,
      "name": "alma mater",
      "kind": "alias"
    },
    {
      "id": "/people/person/education",
      "cvt": true,
      "name": "schooling",
      "kind": "alias"
    },
    {
      "id": "/people/person/education",
      "cvt": true,
      "name": "university",
      "kind": "alias"
    },
    {
      "id": "/people/person/education",
      "cvt": true,
      "name": "college",
      "kind": "alias"
    },
    {
      "id": "/people/person/education",
      "cvt": true,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/people/person/education",
      "cvt": true,
      "name": "training",
      "kind": "alias"
    },
    {
      "id": "/people/person/education",
      "cvt": true,
      "name": "training",
      "kind": "alias"
    },
    {
      "id": "/people/person/profession",
      "cvt": false,
      "name": "job",
      "kind": "alias"
    },
    {
      "id": "/people/person/profession",
      "cvt": false,
      "name": "job",
      "kind": "alias"
    },
    {
      "id": "/people/person/profession",
      "cvt": false,
      "name": "career",
      "kind": "alias"
    },
    {
      "id": "/people/person/profession",
      "cvt": false,
      "name": "career",
      "kind": "alias"
    },
    {
      "id": "/people/person/profession",
      "cvt": false,
      "name": "occupation",
      "kind": "alias"
    },
    {
      "id": "/people/person/profession",
      "cvt": false,
      "name": "line of work",
      "kind": "alias"
    },
    {
      "id": "/people/person/quotations",
      "cvt": false,
      "name": "quotes",
      "kind": "alias"
    },
    {
      "id": "/people/person/quotations",
      "cvt": false,
      "name": "sayings",
      "kind": "alias"
    },
    {
      "id": "/people/person/ethnicity",
      "cvt": false,
      "name": "race",
      "kind": "alias"
    },
    {
      "id": "/government/government_agency/jurisdiction",
      "cvt": false,
      "name": "constituency",
      "kind": "alias"
    },
    {
      "id": "/government/government_agency/jurisdiction",
      "cvt": false,
      "name": "jurisdiction",
      "kind": "alias"
    },
    {
      "id": "/government/government_agency/successor_agency",
      "cvt": false,
      "name": "successor",
      "kind": "alias"
    },
    {
      "id": "/education/dissertation/institution",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/astronomy/dwarf_planet/star_system",
      "cvt": false,
      "name": "star",
      "kind": "alias"
    },
    {
      "id": "/location/neighborhood/neighborhood_of",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/boats/ship_class/ships_in_class",
      "cvt": false,
      "name": "ships",
      "kind": "alias"
    },
    {
      "id": "/location/id_regency/regency_seat",
      "cvt": false,
      "name": "seat",
      "kind": "alias"
    },
    {
      "id": "/award/award_winner/awards_won",
      "cvt": true,
      "name": "awards",
      "kind": "alias"
    },
    {
      "id": "/award/award_winner/awards_won",
      "cvt": true,
      "name": "prizes",
      "kind": "alias"
    },
    {
      "id": "/award/award_winner/awards_won",
      "cvt": true,
      "name": "honours",
      "kind": "alias"
    },
    {
      "id": "/award/award_winner/awards_won",
      "cvt": true,
      "name": "medals",
      "kind": "alias"
    },
    {
      "id": "/award/award_winner/awards_won",
      "cvt": true,
      "name": "awards",
      "kind": "alias"
    },
    {
      "id": "/award/award_winner/awards_won",
      "cvt": true,
      "name": "medals",
      "kind": "alias"
    },
    {
      "id": "/award/award_winner/awards_won",
      "cvt": true,
      "name": "honours",
      "kind": "alias"
    },
    {
      "id": "/award/award_winner/awards_won",
      "cvt": true,
      "name": "honors",
      "kind": "alias"
    },
    {
      "id": "/award/award_winner/awards_won",
      "cvt": true,
      "name": "trophies",
      "kind": "alias"
    },
    {
      "id": "/book/periodical_publisher/periodicals_published",
      "cvt": true,
      "name": "magazines",
      "kind": "alias"
    },
    {
      "id": "/book/periodical_publisher/periodicals_published",
      "cvt": true,
      "name": "newspapers",
      "kind": "alias"
    },
    {
      "id": "/music/group_member/membership",
      "cvt": true,
      "name": "bands",
      "kind": "alias"
    },
    {
      "id": "/music/group_member/membership",
      "cvt": true,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/music/group_member/membership",
      "cvt": true,
      "name": "projects",
      "kind": "alias"
    },
    {
      "id": "/music/group_member/membership",
      "cvt": true,
      "name": "group",
      "kind": "alias"
    },
    {
      "id": "/music/group_member/instruments_played",
      "cvt": false,
      "name": "instruments",
      "kind": "alias"
    },
    {
      "id": "/music/group_member/instruments_played",
      "cvt": false,
      "name": "musical instruments",
      "kind": "alias"
    },
    {
      "id": "/education/academic_institution/visiting_scholars_fellows_etc",
      "cvt": true,
      "name": "scholars",
      "kind": "alias"
    },
    {
      "id": "/education/academic_institution/visiting_scholars_fellows_etc",
      "cvt": true,
      "name": "fellows",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "neighborhoods",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "neighbourhoods",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "buroughs",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "community",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "communities",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "suburbs",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "subdivisions",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "boroughs",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "administrative divisions",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "townships",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "municipalities",
      "kind": "alias"
    },
    {
      "id": "/geography/body_of_water/bridges",
      "cvt": false,
      "name": "river",
      "kind": "alias"
    },
    {
      "id": "/geography/body_of_water/bridges",
      "cvt": false,
      "name": "stream",
      "kind": "alias"
    },
    {
      "id": "/geography/body_of_water/bridges",
      "cvt": false,
      "name": "lake",
      "kind": "alias"
    },
    {
      "id": "/geography/body_of_water/bridges",
      "cvt": false,
      "name": "bridge",
      "kind": "alias"
    },
    {
      "id": "/education/school_newspaper/school",
      "cvt": false,
      "name": "university",
      "kind": "alias"
    },
    {
      "id": "/opera/opera_genre/operas_in_this_genre",
      "cvt": false,
      "name": "operas",
      "kind": "alias"
    },
    {
      "id": "/games/playing_card_game/play_direction",
      "cvt": false,
      "name": "direction",
      "kind": "alias"
    },
    {
      "id": "/music/composition/includes",
      "cvt": false,
      "name": "parts",
      "kind": "alias"
    },
    {
      "id": "/music/composition/includes",
      "cvt": false,
      "name": "parts",
      "kind": "alias"
    },
    {
      "id": "/music/composition/includes",
      "cvt": false,
      "name": "movements",
      "kind": "alias"
    },
    {
      "id": "/music/composition/recorded_as_album",
      "cvt": false,
      "name": "album",
      "kind": "alias"
    },
    {
      "id": "/music/composition/recorded_as_album",
      "cvt": false,
      "name": "albums",
      "kind": "alias"
    },
    {
      "id": "/music/composition/composer",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/music/composition/composer",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/music/composition/composer",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/music/composition/composer",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/music/composition/recordings",
      "cvt": false,
      "name": "recordings",
      "kind": "alias"
    },
    {
      "id": "/music/composition/recordings",
      "cvt": false,
      "name": "recordings",
      "kind": "alias"
    },
    {
      "id": "/music/composition/arrangements",
      "cvt": false,
      "name": "versions",
      "kind": "alias"
    },
    {
      "id": "/music/composition/place_composed",
      "cvt": false,
      "name": "place composed ",
      "kind": "alias"
    },
    {
      "id": "/music/composition/place_composed",
      "cvt": false,
      "name": "place written",
      "kind": "alias"
    },
    {
      "id": "/music/composition/place_composed",
      "cvt": false,
      "name": "nationality",
      "kind": "alias"
    },
    {
      "id": "/music/composition/form",
      "cvt": false,
      "name": "form",
      "kind": "alias"
    },
    {
      "id": "/music/composition/lyrics_website",
      "cvt": true,
      "name": "lyrics",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_facility/teams",
      "cvt": false,
      "name": "home team",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_facility/teams",
      "cvt": false,
      "name": "hometeam",
      "kind": "alias"
    },
    {
      "id": "/religion/religious_practice/practice_of",
      "cvt": false,
      "name": "religions",
      "kind": "alias"
    },
    {
      "id": "/location/ru_autonomous_okrug/administrative_center",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/chess/chess_player/games_played",
      "cvt": true,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/chess/chess_player/games_played",
      "cvt": true,
      "name": "chess games",
      "kind": "alias"
    },
    {
      "id": "/chess/chess_player/games_played",
      "cvt": true,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/book/book_subject/works",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/book_subject/works",
      "cvt": false,
      "name": "books about",
      "kind": "alias"
    },
    {
      "id": "/book/book_subject/works",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/book/book_subject/musical_compositions_about_this_topic",
      "cvt": false,
      "name": "songs",
      "kind": "alias"
    },
    {
      "id": "/book/book_subject/musical_compositions_about_this_topic",
      "cvt": false,
      "name": "songs about",
      "kind": "alias"
    },
    {
      "id": "/book/book_subject/musical_compositions_about_this_topic",
      "cvt": false,
      "name": "lyrics about",
      "kind": "alias"
    },
    {
      "id": "/book/publishing_company/books_published",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/episodes",
      "cvt": false,
      "name": "episode count",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "cast",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "acting",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "performers",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_personal_appearances",
      "cvt": true,
      "name": "cameos",
      "kind": "alias"
    },
    {
      "id": "/theater/play/composer",
      "cvt": false,
      "name": "music composer",
      "kind": "alias"
    },
    {
      "id": "/theater/play/characters",
      "cvt": false,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/theater/play/country_of_origin",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/theater/play/country_of_origin",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/theater/play/playwright",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/theater/play/playwright",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/royalty/monarch/coronation_event",
      "cvt": false,
      "name": "coronation",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_programs",
      "cvt": true,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_programs",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_programs",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_programs",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_segments_written",
      "cvt": false,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/food/beer_style/alcohol_by_volume_range",
      "cvt": true,
      "name": "alcohol",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_developer/games_developed",
      "cvt": false,
      "name": "video games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_developer/games_developed",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_developer/games_developed",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_developer/games_developed",
      "cvt": false,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/character_species/found_in_fictional_universe",
      "cvt": false,
      "name": "story",
      "kind": "alias"
    },
    {
      "id": "/business/business_location/address",
      "cvt": true,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/business/business_location/in_shopping_center",
      "cvt": false,
      "name": "mall",
      "kind": "alias"
    },
    {
      "id": "/business/business_location/in_shopping_center",
      "cvt": false,
      "name": "plaza",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "district",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "school board",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/country",
      "cvt": false,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbols",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbolism",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_event_competition/venue",
      "cvt": false,
      "name": "stadium",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_event_competition/medalists",
      "cvt": true,
      "name": "athletes",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_event_competition/olympic_games_contested",
      "cvt": false,
      "name": "olympics",
      "kind": "alias"
    },
    {
      "id": "/computer/computer_manufacturer_brand/computer_models",
      "cvt": false,
      "name": "computers",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/rocket_launch_site/operated_by",
      "cvt": false,
      "name": "space agency",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/rocket_launch_site/controlling_country",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "officials",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "public officials",
      "kind": "alias"
    },
    {
      "id": "/government/political_district/representatives",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/computer/programming_language_designer/languages_designed",
      "cvt": false,
      "name": "computer  languages",
      "kind": "alias"
    },
    {
      "id": "/computer/programming_language_designer/languages_designed",
      "cvt": false,
      "name": "programming  languages",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation_source/quotations",
      "cvt": false,
      "name": "quotes",
      "kind": "alias"
    },
    {
      "id": "/book/author/series_written_or_contributed_to",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writing",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/book/author/works_written",
      "cvt": false,
      "name": "writings",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "writing style",
      "kind": "alias"
    },
    {
      "id": "/book/author/school_or_movement",
      "cvt": false,
      "name": "genre",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "burials",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "corpses",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "bodies",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/people/place_of_interment/interred_here",
      "cvt": false,
      "name": "people buried",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/artist",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/period_or_movement",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/art_subject",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/owners",
      "cvt": true,
      "name": "buyers",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_funded_company/venture_investors",
      "cvt": true,
      "name": "investment firms",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_funded_company/venture_investors",
      "cvt": true,
      "name": "investors",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_funded_company/total_venture_investment_raised",
      "cvt": true,
      "name": "investment",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_funded_company/total_venture_investment_raised",
      "cvt": true,
      "name": "fundraising",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_funded_company/total_venture_investment_raised",
      "cvt": true,
      "name": "money",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_team/team_stats",
      "cvt": true,
      "name": "statistics",
      "kind": "alias"
    },
    {
      "id": "/film/film/directed_by",
      "cvt": false,
      "name": "director",
      "kind": "alias"
    },
    {
      "id": "/film/film/directed_by",
      "cvt": false,
      "name": "director",
      "kind": "alias"
    },
    {
      "id": "/film/film/directed_by",
      "cvt": false,
      "name": "auteur",
      "kind": "alias"
    },
    {
      "id": "/film/film/produced_by",
      "cvt": false,
      "name": "prodocer",
      "kind": "alias"
    },
    {
      "id": "/film/film/produced_by",
      "cvt": false,
      "name": "producer",
      "kind": "alias"
    },
    {
      "id": "/film/film/produced_by",
      "cvt": false,
      "name": "producer",
      "kind": "alias"
    },
    {
      "id": "/film/film/written_by",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/film/film/written_by",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/film/film/written_by",
      "cvt": false,
      "name": "screenwriter",
      "kind": "alias"
    },
    {
      "id": "/film/film/cinematography",
      "cvt": false,
      "name": "cinematographer",
      "kind": "alias"
    },
    {
      "id": "/film/film/edited_by",
      "cvt": false,
      "name": "editor",
      "kind": "alias"
    },
    {
      "id": "/film/film/edited_by",
      "cvt": false,
      "name": "editer",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "composer",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "score",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "music",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "musicians",
      "kind": "alias"
    },
    {
      "id": "/film/film/rating",
      "cvt": false,
      "name": "rating",
      "kind": "alias"
    },
    {
      "id": "/film/film/rating",
      "cvt": false,
      "name": "content rating",
      "kind": "alias"
    },
    {
      "id": "/film/film/estimated_budget",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/film/film/estimated_budget",
      "cvt": true,
      "name": "cost",
      "kind": "alias"
    },
    {
      "id": "/film/film/estimated_budget",
      "cvt": true,
      "name": "budget",
      "kind": "alias"
    },
    {
      "id": "/film/film/country",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "stars",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "lead",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "actress",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "acting",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "people in",
      "kind": "alias"
    },
    {
      "id": "/film/film/runtime",
      "cvt": true,
      "name": "length",
      "kind": "alias"
    },
    {
      "id": "/film/film/locations",
      "cvt": false,
      "name": "places in",
      "kind": "alias"
    },
    {
      "id": "/film/film/locations",
      "cvt": false,
      "name": "places",
      "kind": "alias"
    },
    {
      "id": "/film/film/locations",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/film/film/soundtrack",
      "cvt": false,
      "name": "music",
      "kind": "alias"
    },
    {
      "id": "/film/film/soundtrack",
      "cvt": false,
      "name": "score",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "filming locations",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "place filmed",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "set",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "filmset",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "filming location",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_series",
      "cvt": false,
      "name": "trilogy",
      "kind": "alias"
    },
    {
      "id": "/film/film/story_by",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/film/film/personal_appearances",
      "cvt": true,
      "name": "cameos",
      "kind": "alias"
    },
    {
      "id": "/film/film/dubbing_performances",
      "cvt": true,
      "name": "voice actors",
      "kind": "alias"
    },
    {
      "id": "/film/film/dubbing_performances",
      "cvt": true,
      "name": "voices",
      "kind": "alias"
    },
    {
      "id": "/film/film/dubbing_performances",
      "cvt": true,
      "name": "voice actress",
      "kind": "alias"
    },
    {
      "id": "/film/film/costume_design_by",
      "cvt": false,
      "name": "costumes",
      "kind": "alias"
    },
    {
      "id": "/film/film/other_crew",
      "cvt": true,
      "name": "crew",
      "kind": "alias"
    },
    {
      "id": "/film/film/other_crew",
      "cvt": true,
      "name": "film crew",
      "kind": "alias"
    },
    {
      "id": "/film/film/trailers",
      "cvt": true,
      "name": "teaser",
      "kind": "alias"
    },
    {
      "id": "/film/film/distributors",
      "cvt": true,
      "name": "publisher",
      "kind": "alias"
    },
    {
      "id": "/film/film/release_date_s",
      "cvt": true,
      "name": "date",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_festivals",
      "cvt": false,
      "name": "festivals",
      "kind": "alias"
    },
    {
      "id": "/film/film/executive_produced_by",
      "cvt": false,
      "name": "executive producer",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_casting_director",
      "cvt": false,
      "name": "casting director",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_production_design_by",
      "cvt": false,
      "name": "production designer",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_set_decoration_by",
      "cvt": false,
      "name": "set decorator",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/character_species/found_in_fictional_universe",
      "cvt": false,
      "name": "story",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_investor/investments",
      "cvt": true,
      "name": "investments ",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_investor/investments",
      "cvt": true,
      "name": "companies investmented ",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_investor/investments",
      "cvt": true,
      "name": "businesses investmented ",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_investor/investments",
      "cvt": true,
      "name": "businesses invested ",
      "kind": "alias"
    },
    {
      "id": "/venture_capital/venture_investor/investments",
      "cvt": true,
      "name": "companies invested ",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/film/film/directed_by",
      "cvt": false,
      "name": "director",
      "kind": "alias"
    },
    {
      "id": "/film/film/directed_by",
      "cvt": false,
      "name": "director",
      "kind": "alias"
    },
    {
      "id": "/film/film/directed_by",
      "cvt": false,
      "name": "auteur",
      "kind": "alias"
    },
    {
      "id": "/film/film/produced_by",
      "cvt": false,
      "name": "prodocer",
      "kind": "alias"
    },
    {
      "id": "/film/film/produced_by",
      "cvt": false,
      "name": "producer",
      "kind": "alias"
    },
    {
      "id": "/film/film/produced_by",
      "cvt": false,
      "name": "producer",
      "kind": "alias"
    },
    {
      "id": "/film/film/written_by",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/film/film/written_by",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/film/film/written_by",
      "cvt": false,
      "name": "screenwriter",
      "kind": "alias"
    },
    {
      "id": "/film/film/cinematography",
      "cvt": false,
      "name": "cinematographer",
      "kind": "alias"
    },
    {
      "id": "/film/film/edited_by",
      "cvt": false,
      "name": "editor",
      "kind": "alias"
    },
    {
      "id": "/film/film/edited_by",
      "cvt": false,
      "name": "editer",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "composer",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "score",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "music",
      "kind": "alias"
    },
    {
      "id": "/film/film/music",
      "cvt": false,
      "name": "musicians",
      "kind": "alias"
    },
    {
      "id": "/film/film/rating",
      "cvt": false,
      "name": "rating",
      "kind": "alias"
    },
    {
      "id": "/film/film/rating",
      "cvt": false,
      "name": "content rating",
      "kind": "alias"
    },
    {
      "id": "/film/film/estimated_budget",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/film/film/estimated_budget",
      "cvt": true,
      "name": "cost",
      "kind": "alias"
    },
    {
      "id": "/film/film/estimated_budget",
      "cvt": true,
      "name": "budget",
      "kind": "alias"
    },
    {
      "id": "/film/film/country",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "stars",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "lead",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "actress",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "acting",
      "kind": "alias"
    },
    {
      "id": "/film/film/starring",
      "cvt": true,
      "name": "people in",
      "kind": "alias"
    },
    {
      "id": "/film/film/runtime",
      "cvt": true,
      "name": "length",
      "kind": "alias"
    },
    {
      "id": "/film/film/locations",
      "cvt": false,
      "name": "places in",
      "kind": "alias"
    },
    {
      "id": "/film/film/locations",
      "cvt": false,
      "name": "places",
      "kind": "alias"
    },
    {
      "id": "/film/film/locations",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/film/film/soundtrack",
      "cvt": false,
      "name": "music",
      "kind": "alias"
    },
    {
      "id": "/film/film/soundtrack",
      "cvt": false,
      "name": "score",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "filming locations",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "place filmed",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "set",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "filmset",
      "kind": "alias"
    },
    {
      "id": "/film/film/featured_film_locations",
      "cvt": false,
      "name": "filming location",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_series",
      "cvt": false,
      "name": "trilogy",
      "kind": "alias"
    },
    {
      "id": "/film/film/story_by",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/film/film/personal_appearances",
      "cvt": true,
      "name": "cameos",
      "kind": "alias"
    },
    {
      "id": "/film/film/dubbing_performances",
      "cvt": true,
      "name": "voice actors",
      "kind": "alias"
    },
    {
      "id": "/film/film/dubbing_performances",
      "cvt": true,
      "name": "voices",
      "kind": "alias"
    },
    {
      "id": "/film/film/dubbing_performances",
      "cvt": true,
      "name": "voice actress",
      "kind": "alias"
    },
    {
      "id": "/film/film/costume_design_by",
      "cvt": false,
      "name": "costumes",
      "kind": "alias"
    },
    {
      "id": "/film/film/other_crew",
      "cvt": true,
      "name": "crew",
      "kind": "alias"
    },
    {
      "id": "/film/film/other_crew",
      "cvt": true,
      "name": "film crew",
      "kind": "alias"
    },
    {
      "id": "/film/film/trailers",
      "cvt": true,
      "name": "teaser",
      "kind": "alias"
    },
    {
      "id": "/film/film/distributors",
      "cvt": true,
      "name": "publisher",
      "kind": "alias"
    },
    {
      "id": "/film/film/release_date_s",
      "cvt": true,
      "name": "date",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_festivals",
      "cvt": false,
      "name": "festivals",
      "kind": "alias"
    },
    {
      "id": "/film/film/executive_produced_by",
      "cvt": false,
      "name": "executive producer",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_casting_director",
      "cvt": false,
      "name": "casting director",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_production_design_by",
      "cvt": false,
      "name": "production designer",
      "kind": "alias"
    },
    {
      "id": "/film/film/film_set_decoration_by",
      "cvt": false,
      "name": "set decorator",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_producer_type/tv_producers_of_this_type",
      "cvt": true,
      "name": "tv producers",
      "kind": "alias"
    },
    {
      "id": "/common/topic/image",
      "cvt": false,
      "name": "picture",
      "kind": "alias"
    },
    {
      "id": "/common/topic/image",
      "cvt": false,
      "name": "picture",
      "kind": "alias"
    },
    {
      "id": "/common/topic/image",
      "cvt": false,
      "name": "picture",
      "kind": "alias"
    },
    {
      "id": "/common/topic/image",
      "cvt": false,
      "name": "photo",
      "kind": "alias"
    },
    {
      "id": "/common/topic/image",
      "cvt": false,
      "name": "pic",
      "kind": "alias"
    },
    {
      "id": "/common/topic/webpage",
      "cvt": true,
      "name": "webpage",
      "kind": "alias"
    },
    {
      "id": "/business/consumer_product/official_webpage",
      "cvt": true,
      "name": "website",
      "kind": "alias"
    },
    {
      "id": "/business/consumer_product/company",
      "cvt": true,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/book/book_character/appears_in_book",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/book_character/appears_in_book",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/book_character/appears_in_book",
      "cvt": false,
      "name": "novel",
      "kind": "alias"
    },
    {
      "id": "/book/book_character/appears_in_stories",
      "cvt": false,
      "name": "stories",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_league/seasons",
      "cvt": false,
      "name": "years",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/casualties",
      "cvt": true,
      "name": "fatalities",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/commanders",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/military_personnel_involved",
      "cvt": false,
      "name": "soldiers",
      "kind": "alias"
    },
    {
      "id": "/book/periodical/first_issue_date",
      "cvt": true,
      "name": "launch",
      "kind": "alias"
    },
    {
      "id": "/internet/website_category/sites",
      "cvt": false,
      "name": "websites",
      "kind": "alias"
    },
    {
      "id": "/metropolitan_transit/transit_stop/transit_lines",
      "cvt": false,
      "name": "lines",
      "kind": "alias"
    },
    {
      "id": "/metropolitan_transit/transit_stop/transit_lines",
      "cvt": false,
      "name": "trains",
      "kind": "alias"
    },
    {
      "id": "/metropolitan_transit/transit_stop/terminus_for_lines",
      "cvt": false,
      "name": "stops",
      "kind": "alias"
    },
    {
      "id": "/metropolitan_transit/transit_stop/terminus_for_lines",
      "cvt": false,
      "name": "trains",
      "kind": "alias"
    },
    {
      "id": "/organization/club_interest/clubs",
      "cvt": false,
      "name": "clubs",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_platform/games",
      "cvt": false,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_platform/games_on_this_platform",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_platform/games_on_this_platform",
      "cvt": false,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/ship_builder",
      "cvt": false,
      "name": "builder",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/place_built",
      "cvt": false,
      "name": "birthplace",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/place_built",
      "cvt": false,
      "name": "birth place",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/place_built",
      "cvt": false,
      "name": "building location",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/means_of_propulsion",
      "cvt": false,
      "name": "propulsion",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/means_of_propulsion",
      "cvt": false,
      "name": "motor",
      "kind": "alias"
    },
    {
      "id": "/boats/ship/means_of_propulsion",
      "cvt": false,
      "name": "sails",
      "kind": "alias"
    },
    {
      "id": "/comic_strips/comic_strip/creator_of_strip",
      "cvt": true,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/comic_strips/comic_strip/creator_of_strip",
      "cvt": true,
      "name": "artist",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_sport/athletes",
      "cvt": true,
      "name": "olympic athletes",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_organization_type/organizations",
      "cvt": false,
      "name": "clubs",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artists",
      "cvt": false,
      "name": "artists",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "artworks",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_period_movement/associated_artworks",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/business/asset_owner/assets_owned",
      "cvt": true,
      "name": "assets",
      "kind": "alias"
    },
    {
      "id": "/games/playing_card_game_play_direction/card_games",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/location/uk_region/headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/library/public_library/library_system",
      "cvt": false,
      "name": "network",
      "kind": "alias"
    },
    {
      "id": "/ice_hockey/hockey_conference/teams",
      "cvt": false,
      "name": "hockey teams",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/martial_arts/martial_artist/martial_art",
      "cvt": false,
      "name": "fighting style",
      "kind": "alias"
    },
    {
      "id": "/martial_arts/martial_artist/martial_art",
      "cvt": false,
      "name": "martial art",
      "kind": "alias"
    },
    {
      "id": "/martial_arts/martial_artist/instructor",
      "cvt": false,
      "name": "instructor",
      "kind": "alias"
    },
    {
      "id": "/martial_arts/martial_artist/instructor",
      "cvt": false,
      "name": "teacher",
      "kind": "alias"
    },
    {
      "id": "/martial_arts/martial_artist/martial_arts_students",
      "cvt": false,
      "name": "students",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/accident_site",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/flight_destination",
      "cvt": false,
      "name": "destination",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/aircraft",
      "cvt": true,
      "name": "airplane",
      "kind": "alias"
    },
    {
      "id": "/business/consumer_product/official_webpage",
      "cvt": true,
      "name": "website",
      "kind": "alias"
    },
    {
      "id": "/business/consumer_product/company",
      "cvt": true,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/location/uk_principal_area/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/country",
      "cvt": false,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbols",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbolism",
      "kind": "alias"
    },
    {
      "id": "/location/us_county/county_seat",
      "cvt": false,
      "name": "seat",
      "kind": "alias"
    },
    {
      "id": "/location/in_division/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/book/magazine/place_of_publication",
      "cvt": true,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/book/magazine/place_of_publication",
      "cvt": true,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/olympics/olympic_sport/athletes",
      "cvt": true,
      "name": "olympic athletes",
      "kind": "alias"
    },
    {
      "id": "/film/producer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/time/event/locations",
      "cvt": false,
      "name": "place",
      "kind": "alias"
    },
    {
      "id": "/time/event/locations",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/time/event/locations",
      "cvt": false,
      "name": "spot",
      "kind": "alias"
    },
    {
      "id": "/time/event/locations",
      "cvt": false,
      "name": "area",
      "kind": "alias"
    },
    {
      "id": "/time/event/locations",
      "cvt": false,
      "name": "venue",
      "kind": "alias"
    },
    {
      "id": "/time/event/locations",
      "cvt": false,
      "name": "region",
      "kind": "alias"
    },
    {
      "id": "/time/event/people_involved",
      "cvt": false,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/time/event/includes_event",
      "cvt": false,
      "name": "parts",
      "kind": "alias"
    },
    {
      "id": "/time/event/includes_event",
      "cvt": false,
      "name": "segments",
      "kind": "alias"
    },
    {
      "id": "/time/event/includes_event",
      "cvt": false,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/time/event/instance_of_recurring_event",
      "cvt": false,
      "name": "part of event",
      "kind": "alias"
    },
    {
      "id": "/library/public_library/library_system",
      "cvt": false,
      "name": "network",
      "kind": "alias"
    },
    {
      "id": "/film/cinematographer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/cinematographer/film",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/cinematographer/film",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "creator ",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "song",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "jingle",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/recurring_writers",
      "cvt": true,
      "name": "writers",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/subjects",
      "cvt": false,
      "name": "theme",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/source",
      "cvt": false,
      "name": "attribution",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/source",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/author",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/author",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/author",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/author",
      "cvt": false,
      "name": "speaker",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/spoken_by_character",
      "cvt": false,
      "name": "spoken by character",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/spoken_by_character",
      "cvt": false,
      "name": "character",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/addressee",
      "cvt": false,
      "name": "audiance",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/addressee",
      "cvt": false,
      "name": "audiance",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "faculty",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "teachers",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/number_of_staff",
      "cvt": true,
      "name": "staff",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "size",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "enrollment",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/mascot",
      "cvt": false,
      "name": "animal",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student paper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student newspaper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "students",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "graduates",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "alumni",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "satellite schools",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "campuses",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/school_magazines",
      "cvt": false,
      "name": "student magazine",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/sexes_accepted",
      "cvt": true,
      "name": "gender",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/accident_site",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/flight_destination",
      "cvt": false,
      "name": "destination",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/aircraft",
      "cvt": true,
      "name": "airplane",
      "kind": "alias"
    },
    {
      "id": "/library/public_library/library_system",
      "cvt": false,
      "name": "network",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/revenue",
      "cvt": true,
      "name": "income",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/revenue",
      "cvt": true,
      "name": "earnings",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/net_profit",
      "cvt": true,
      "name": "profit",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/assets",
      "cvt": true,
      "name": "assets",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/liabilities",
      "cvt": true,
      "name": "liabilities ",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/competitive_space",
      "cvt": true,
      "name": "competition",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/major_customer",
      "cvt": false,
      "name": "customer",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/major_customer",
      "cvt": false,
      "name": "business partners",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_league/seasons",
      "cvt": false,
      "name": "years",
      "kind": "alias"
    },
    {
      "id": "/medicine/drug_class/drugs",
      "cvt": false,
      "name": "medications",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/episodes",
      "cvt": false,
      "name": "episode count",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "cast",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "actresses",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "acting",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_cast",
      "cvt": true,
      "name": "performers",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_series_season/regular_personal_appearances",
      "cvt": true,
      "name": "cameos",
      "kind": "alias"
    },
    {
      "id": "/film/film_location/featured_in_films",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/film_location/featured_in_films",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/games/game/designer",
      "cvt": false,
      "name": "maker",
      "kind": "alias"
    },
    {
      "id": "/games/game/designer",
      "cvt": false,
      "name": "maker",
      "kind": "alias"
    },
    {
      "id": "/games/game/number_of_players",
      "cvt": true,
      "name": "players",
      "kind": "alias"
    },
    {
      "id": "/location/neighborhood/neighborhood_of",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/programs",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/programs",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/programs",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/areas_served",
      "cvt": false,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/areas_served",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_network/areas_served",
      "cvt": false,
      "name": "area",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/opera/opera_company/operas_produced",
      "cvt": false,
      "name": "operas",
      "kind": "alias"
    },
    {
      "id": "/time/recurring_event/current_frequency",
      "cvt": false,
      "name": "frequency",
      "kind": "alias"
    },
    {
      "id": "/time/recurring_event/instances",
      "cvt": false,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/computer/computer/manufacturer",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/computer/computer/processor",
      "cvt": false,
      "name": "cpu",
      "kind": "alias"
    },
    {
      "id": "/computer/computer/key_designers",
      "cvt": false,
      "name": "designers",
      "kind": "alias"
    },
    {
      "id": "/computer/computer/compatible_oses",
      "cvt": true,
      "name": "os",
      "kind": "alias"
    },
    {
      "id": "/computer/computer/compatible_oses",
      "cvt": true,
      "name": "operating systems",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/platforms",
      "cvt": false,
      "name": "system",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/platforms",
      "cvt": false,
      "name": "systems",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/characters",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/sequel",
      "cvt": false,
      "name": "sequel",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/game_series",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/prequel",
      "cvt": false,
      "name": "prequel",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/processors_supported",
      "cvt": false,
      "name": "processors",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/processors_supported",
      "cvt": false,
      "name": "cpu",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/online_reviews",
      "cvt": true,
      "name": "reviews",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/uses_game_engine",
      "cvt": false,
      "name": "engine",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/uses_game_engine",
      "cvt": false,
      "name": "engine",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/gameplay_modes",
      "cvt": false,
      "name": "modes",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/gameplay_modes",
      "cvt": false,
      "name": "gameplay",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/influenced_by",
      "cvt": false,
      "name": "influences",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/peripherals_supported",
      "cvt": false,
      "name": "contollers",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/peripherals_supported",
      "cvt": false,
      "name": "peripherals",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "neighborhoods",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "neighbourhoods",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "buroughs",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "community",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "communities",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "suburbs",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "subdivisions",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "boroughs",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "administrative divisions",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "townships",
      "kind": "alias"
    },
    {
      "id": "/location/place_with_neighborhoods/neighborhoods",
      "cvt": false,
      "name": "municipalities",
      "kind": "alias"
    },
    {
      "id": "/music/soundtrack/film",
      "cvt": false,
      "name": "movie",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/wine/wine/wine_producer",
      "cvt": false,
      "name": "producer",
      "kind": "alias"
    },
    {
      "id": "/wine/wine/fruit_source",
      "cvt": false,
      "name": "fruit",
      "kind": "alias"
    },
    {
      "id": "/wine/wine/wine_style",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/music/instrument/variation",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/music/instrument/instrumentalists",
      "cvt": false,
      "name": "players",
      "kind": "alias"
    },
    {
      "id": "/music/instrument/instrumentalists",
      "cvt": false,
      "name": "musicians",
      "kind": "alias"
    },
    {
      "id": "/music/instrument/instrumentalists",
      "cvt": false,
      "name": "players",
      "kind": "alias"
    },
    {
      "id": "/music/instrument/instrumentalists",
      "cvt": false,
      "name": "professionals",
      "kind": "alias"
    },
    {
      "id": "/music/instrument/instrumentalists",
      "cvt": false,
      "name": "artists",
      "kind": "alias"
    },
    {
      "id": "/music/record_label/artist",
      "cvt": false,
      "name": "bands",
      "kind": "alias"
    },
    {
      "id": "/music/record_label/artist",
      "cvt": false,
      "name": "artists",
      "kind": "alias"
    },
    {
      "id": "/music/record_label/artist",
      "cvt": false,
      "name": "musicians",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_coach/team",
      "cvt": false,
      "name": "basketball team",
      "kind": "alias"
    },
    {
      "id": "/basketball/basketball_coach/previous_teams",
      "cvt": true,
      "name": "teams",
      "kind": "alias"
    },
    {
      "id": "/cvg/gameplay_mode/games_with_this_mode",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/gameplay_mode/games_with_this_mode",
      "cvt": false,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/cvg/gameplay_mode/games_with_this_mode",
      "cvt": false,
      "name": "computer games",
      "kind": "alias"
    },
    {
      "id": "/ice_hockey/hockey_player/hockey_position",
      "cvt": false,
      "name": "hockey position",
      "kind": "alias"
    },
    {
      "id": "/ice_hockey/hockey_player/hockey_position",
      "cvt": false,
      "name": "position",
      "kind": "alias"
    },
    {
      "id": "/ice_hockey/hockey_player/current_team",
      "cvt": true,
      "name": "team",
      "kind": "alias"
    },
    {
      "id": "/ice_hockey/hockey_player/current_team",
      "cvt": true,
      "name": "hockey team",
      "kind": "alias"
    },
    {
      "id": "/ice_hockey/hockey_player/former_team_s",
      "cvt": true,
      "name": "teams",
      "kind": "alias"
    },
    {
      "id": "/book/poem/verse_form",
      "cvt": false,
      "name": "form",
      "kind": "alias"
    },
    {
      "id": "/book/poem/verse_form",
      "cvt": false,
      "name": "form",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/current_team",
      "cvt": true,
      "name": "team",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/current_team",
      "cvt": true,
      "name": "baseball team",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/current_team",
      "cvt": true,
      "name": "club",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/position_s",
      "cvt": false,
      "name": "position",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/position_s",
      "cvt": false,
      "name": "base",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/bats",
      "cvt": false,
      "name": "batting",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/bats",
      "cvt": false,
      "name": "at bats",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/former_teams",
      "cvt": true,
      "name": "past teams",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/batting_stats",
      "cvt": true,
      "name": "batting stats",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_player/lifetime_batting_statistics",
      "cvt": true,
      "name": "batting stats",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/law/patent_assignee/patents_assigned",
      "cvt": false,
      "name": "patents",
      "kind": "alias"
    },
    {
      "id": "/library/public_library/library_system",
      "cvt": false,
      "name": "network",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_form/artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_form/artworks",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_form/artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_form/artists",
      "cvt": false,
      "name": "creators",
      "kind": "alias"
    },
    {
      "id": "/geography/mountaineer/first_ascents",
      "cvt": false,
      "name": "climbs",
      "kind": "alias"
    },
    {
      "id": "/location/uk_non_metropolitan_district/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/book/newspaper_owner/newspapers_owned",
      "cvt": false,
      "name": "newspapers",
      "kind": "alias"
    },
    {
      "id": "/book/newspaper_owner/newspapers_owned",
      "cvt": false,
      "name": "papers",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_equipment/sport_used_for",
      "cvt": false,
      "name": "sport",
      "kind": "alias"
    },
    {
      "id": "/sports/sports_equipment/sport_used_for",
      "cvt": false,
      "name": "use",
      "kind": "alias"
    },
    {
      "id": "/business/industry/companies",
      "cvt": false,
      "name": "companies",
      "kind": "alias"
    },
    {
      "id": "/business/industry/companies",
      "cvt": false,
      "name": "business",
      "kind": "alias"
    },
    {
      "id": "/business/industry/companies",
      "cvt": false,
      "name": "businesses",
      "kind": "alias"
    },
    {
      "id": "/business/industry/companies",
      "cvt": false,
      "name": "firms",
      "kind": "alias"
    },
    {
      "id": "/business/industry/trade_unions",
      "cvt": false,
      "name": "unions",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_designer/plays_designed",
      "cvt": true,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/location/ca_indian_reserve/aboriginal_groups",
      "cvt": false,
      "name": "tribe",
      "kind": "alias"
    },
    {
      "id": "/location/ca_indian_reserve/aboriginal_groups",
      "cvt": false,
      "name": "aboriginal group",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/park_system/member_parks",
      "cvt": false,
      "name": "parks",
      "kind": "alias"
    },
    {
      "id": "/law/constitution/country",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/law/constitution/constitutional_convention",
      "cvt": false,
      "name": "summit",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_game_engine/used_for_computer_games",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_game_engine/used_for_computer_games",
      "cvt": false,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_game_engine/used_for_computer_games",
      "cvt": false,
      "name": "computer games",
      "kind": "alias"
    },
    {
      "id": "/food/dish/cuisine",
      "cvt": false,
      "name": "nationality",
      "kind": "alias"
    },
    {
      "id": "/food/dish/ingredients",
      "cvt": false,
      "name": "ingredients ",
      "kind": "alias"
    },
    {
      "id": "/food/dish/ingredients",
      "cvt": false,
      "name": "ingredients ",
      "kind": "alias"
    },
    {
      "id": "/sports/boxer/weight_division",
      "cvt": false,
      "name": "weight",
      "kind": "alias"
    },
    {
      "id": "/sports/boxer/weight_division",
      "cvt": false,
      "name": "weight class",
      "kind": "alias"
    },
    {
      "id": "/sports/boxer/weight_division",
      "cvt": false,
      "name": "division",
      "kind": "alias"
    },
    {
      "id": "/broadcast/tv_channel/network",
      "cvt": false,
      "name": "tv network",
      "kind": "alias"
    },
    {
      "id": "/award/award/presented_by",
      "cvt": false,
      "name": "presenter",
      "kind": "alias"
    },
    {
      "id": "/location/ru_raion/administrative_center",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/geography/glacier/terminus",
      "cvt": false,
      "name": "end",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_publisher/games_published",
      "cvt": false,
      "name": "video games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_publisher/games_published",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_publisher/games_published",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_publisher/games_published",
      "cvt": false,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/broadcast/tv_channel/network",
      "cvt": false,
      "name": "tv network",
      "kind": "alias"
    },
    {
      "id": "/music/lyricist/lyrics_written",
      "cvt": false,
      "name": "songs",
      "kind": "alias"
    },
    {
      "id": "/music/lyricist/lyrics_written",
      "cvt": false,
      "name": "tracks",
      "kind": "alias"
    },
    {
      "id": "/music/lyricist/lyrics_written",
      "cvt": false,
      "name": "lyrics",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/author_s",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/author_s",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/author_s",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/works_in_this_series",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/works_in_this_series",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/book/literary_series/works_in_this_series",
      "cvt": false,
      "name": "novels",
      "kind": "alias"
    },
    {
      "id": "/music/track/artist",
      "cvt": false,
      "name": "musician",
      "kind": "alias"
    },
    {
      "id": "/music/track/song",
      "cvt": false,
      "name": "song",
      "kind": "alias"
    },
    {
      "id": "/music/track/place",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/music/track/contributions",
      "cvt": true,
      "name": "contributers",
      "kind": "alias"
    },
    {
      "id": "/music/track/lyrics_website",
      "cvt": true,
      "name": "lyrics",
      "kind": "alias"
    },
    {
      "id": "/music/track/lyrics_website",
      "cvt": true,
      "name": "words",
      "kind": "alias"
    },
    {
      "id": "/music/album/artist",
      "cvt": false,
      "name": "musician",
      "kind": "alias"
    },
    {
      "id": "/music/album/artist",
      "cvt": false,
      "name": "band",
      "kind": "alias"
    },
    {
      "id": "/music/album/artist",
      "cvt": false,
      "name": "band",
      "kind": "alias"
    },
    {
      "id": "/music/album/artist",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/music/album/artist",
      "cvt": false,
      "name": "performer",
      "kind": "alias"
    },
    {
      "id": "/music/album/contributor",
      "cvt": true,
      "name": "guests",
      "kind": "alias"
    },
    {
      "id": "/music/album/contributor",
      "cvt": true,
      "name": "guest musicians",
      "kind": "alias"
    },
    {
      "id": "/music/album/supporting_tours",
      "cvt": false,
      "name": "tour",
      "kind": "alias"
    },
    {
      "id": "/music/album/supporting_tours",
      "cvt": false,
      "name": "music tour",
      "kind": "alias"
    },
    {
      "id": "/music/album/supporting_tours",
      "cvt": false,
      "name": "international tour",
      "kind": "alias"
    },
    {
      "id": "/fictional_universe/fictional_universe/works_set_here",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/business/consumer_company/brands",
      "cvt": true,
      "name": "image",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/internet/top_level_domain_registry/domains",
      "cvt": false,
      "name": "domains",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/city_limits",
      "cvt": false,
      "name": "border",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/casualties",
      "cvt": true,
      "name": "fatalities",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/commanders",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/military_personnel_involved",
      "cvt": false,
      "name": "soldiers",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_genre/games",
      "cvt": false,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/cvg/cvg_genre/games",
      "cvt": false,
      "name": "videogames",
      "kind": "alias"
    },
    {
      "id": "/religion/religious_text/religious_text_of",
      "cvt": false,
      "name": "worshipers",
      "kind": "alias"
    },
    {
      "id": "/religion/religious_text/religious_text_of",
      "cvt": false,
      "name": "followers",
      "kind": "alias"
    },
    {
      "id": "/religion/religious_text/religious_text_of",
      "cvt": false,
      "name": "believers",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_director/plays_directed",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_director/plays_directed",
      "cvt": false,
      "name": "theatre",
      "kind": "alias"
    },
    {
      "id": "/location/uk_district/administrative_headquarters",
      "cvt": false,
      "name": "capital",
      "kind": "alias"
    },
    {
      "id": "/architecture/architectural_structure_owner/structures_owned",
      "cvt": true,
      "name": "structures",
      "kind": "alias"
    },
    {
      "id": "/architecture/architectural_structure_owner/structures_owned",
      "cvt": true,
      "name": "buildings",
      "kind": "alias"
    },
    {
      "id": "/architecture/architectural_structure_owner/structures_owned",
      "cvt": true,
      "name": "buildings owned",
      "kind": "alias"
    },
    {
      "id": "/comic_strips/comic_strip_character/comic_strips_appeared_in",
      "cvt": false,
      "name": "comic strips",
      "kind": "alias"
    },
    {
      "id": "/comic_strips/comic_strip_character/comic_strips_appeared_in",
      "cvt": false,
      "name": "comics",
      "kind": "alias"
    },
    {
      "id": "/computer/web_browser_extension/works_on_web_browser",
      "cvt": false,
      "name": "browser",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/artworks",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/artworks",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/associated_periods_or_movements",
      "cvt": false,
      "name": "movement",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/associated_periods_or_movements",
      "cvt": false,
      "name": "period",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/associated_periods_or_movements",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/associated_periods_or_movements",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/art_forms",
      "cvt": false,
      "name": "medium",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/art_series",
      "cvt": false,
      "name": "collections",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/founders",
      "cvt": false,
      "name": "creators",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/board_members",
      "cvt": true,
      "name": "board",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/headquarters",
      "cvt": true,
      "name": "place",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/headquarters",
      "cvt": true,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/headquarters",
      "cvt": true,
      "name": "site",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "subject",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "research",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/sectors",
      "cvt": false,
      "name": "advocacy",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/committees",
      "cvt": false,
      "name": "groups",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/legal_structure",
      "cvt": false,
      "name": "company type",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/legal_structure",
      "cvt": false,
      "name": "type of company",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/place_founded",
      "cvt": false,
      "name": "founding location",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/place_founded",
      "cvt": false,
      "name": "founding place",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/locations",
      "cvt": false,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/locations",
      "cvt": false,
      "name": "stores",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/acquired_by",
      "cvt": true,
      "name": "bought by",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/companies_acquired",
      "cvt": true,
      "name": "companies bought",
      "kind": "alias"
    },
    {
      "id": "/organization/organization/leadership",
      "cvt": true,
      "name": "leader",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_genre/plays_in_this_genre",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/film/film_distributor/films_distributed",
      "cvt": true,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/film_distributor/films_distributed",
      "cvt": true,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_producer/plays_produced",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/food/brewery_brand_of_beer/beers_produced",
      "cvt": false,
      "name": "beers",
      "kind": "alias"
    },
    {
      "id": "/food/brewery_brand_of_beer/beers_produced",
      "cvt": false,
      "name": "beers",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/starring_roles",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/guest_roles",
      "cvt": true,
      "name": "episodes",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/tv_segment_performances",
      "cvt": true,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_actor/tv_segment_performances",
      "cvt": true,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/natural_or_cultural_preservation_agency/natural_or_cultural_listings_maintained",
      "cvt": false,
      "name": "cultural listings",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "people in",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "bandmembers",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "musicians",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "artists",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "player",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "musician",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "artists",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "band members",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "bandmates",
      "kind": "alias"
    },
    {
      "id": "/music/musical_group/member",
      "cvt": true,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/music/producer/tracks_produced",
      "cvt": false,
      "name": "songs",
      "kind": "alias"
    },
    {
      "id": "/music/producer/tracks_produced",
      "cvt": false,
      "name": "tracks",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_form/artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_form/artworks",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_form/artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_form/artists",
      "cvt": false,
      "name": "creators",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/astronaut/missions",
      "cvt": false,
      "name": "missions",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/astronaut/space_agency",
      "cvt": false,
      "name": "agency",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/city_limits",
      "cvt": false,
      "name": "border",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/location/citytown/postal_codes",
      "cvt": false,
      "name": "zip code",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation_subject/quotations_about_this_subject",
      "cvt": false,
      "name": "quotes",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation_subject/quotations_about_this_subject",
      "cvt": false,
      "name": "quotations",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation_subject/quotations_about_this_subject",
      "cvt": false,
      "name": "sayings",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation_subject/quotations_about_this_subject",
      "cvt": false,
      "name": "quotations",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation_subject/quotations_about_this_subject",
      "cvt": false,
      "name": "quotes",
      "kind": "alias"
    },
    {
      "id": "/games/playing_card_game/play_direction",
      "cvt": false,
      "name": "direction",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/beds",
      "cvt": true,
      "name": "number of beds",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "specialties",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "specialty",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "focuses",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_specialties",
      "cvt": false,
      "name": "research",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_school_affiliation",
      "cvt": false,
      "name": "med school",
      "kind": "alias"
    },
    {
      "id": "/medicine/hospital/medical_school_affiliation",
      "cvt": false,
      "name": "medical school",
      "kind": "alias"
    },
    {
      "id": "/cvg/game_character/games",
      "cvt": true,
      "name": "games",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "artworks",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "artwork",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/art_series_on_the_subject",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/casualties",
      "cvt": true,
      "name": "fatalities",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/commanders",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/military_personnel_involved",
      "cvt": false,
      "name": "soldiers",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/artist",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/period_or_movement",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/art_subject",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/owners",
      "cvt": true,
      "name": "buyers",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_manager/current_team_managed",
      "cvt": false,
      "name": "team",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_manager/current_team_managed",
      "cvt": false,
      "name": "team managed",
      "kind": "alias"
    },
    {
      "id": "/baseball/baseball_manager/current_team_managed",
      "cvt": false,
      "name": "baseball team",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "faculty",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/faculty",
      "cvt": true,
      "name": "teachers",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/number_of_staff",
      "cvt": true,
      "name": "staff",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "size",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/total_enrollment",
      "cvt": true,
      "name": "enrollment",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/mascot",
      "cvt": false,
      "name": "animal",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student paper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/newspaper",
      "cvt": false,
      "name": "student newspaper",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "students",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "graduates",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/students_graduates",
      "cvt": true,
      "name": "alumni",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "satellite schools",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/subsidiary_or_constituent_schools",
      "cvt": false,
      "name": "campuses",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/school_magazines",
      "cvt": false,
      "name": "student magazine",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/radio_station",
      "cvt": false,
      "name": "student radio",
      "kind": "alias"
    },
    {
      "id": "/education/educational_institution/sexes_accepted",
      "cvt": true,
      "name": "gender",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/revenue",
      "cvt": true,
      "name": "income",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/revenue",
      "cvt": true,
      "name": "earnings",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/net_profit",
      "cvt": true,
      "name": "profit",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/assets",
      "cvt": true,
      "name": "assets",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/liabilities",
      "cvt": true,
      "name": "liabilities ",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/competitive_space",
      "cvt": true,
      "name": "competition",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/major_customer",
      "cvt": false,
      "name": "customer",
      "kind": "alias"
    },
    {
      "id": "/business/business_operation/major_customer",
      "cvt": false,
      "name": "business partners",
      "kind": "alias"
    },
    {
      "id": "/film/film_subject/films",
      "cvt": false,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/film/film_subject/films",
      "cvt": false,
      "name": "films",
      "kind": "alias"
    },
    {
      "id": "/film/film_subject/films",
      "cvt": false,
      "name": "documentaries",
      "kind": "alias"
    },
    {
      "id": "/film/film_subject/films",
      "cvt": false,
      "name": "documentary",
      "kind": "alias"
    },
    {
      "id": "/film/film_subject/films",
      "cvt": false,
      "name": "films about",
      "kind": "alias"
    },
    {
      "id": "/film/film_subject/films",
      "cvt": false,
      "name": "movies about",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "district",
      "kind": "alias"
    },
    {
      "id": "/education/school/school_district",
      "cvt": false,
      "name": "school board",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/education/school/class_size",
      "cvt": true,
      "name": "class size",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/casualties",
      "cvt": true,
      "name": "fatalities",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/commanders",
      "cvt": true,
      "name": "leaders",
      "kind": "alias"
    },
    {
      "id": "/military/military_conflict/military_personnel_involved",
      "cvt": false,
      "name": "soldiers",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/accident_site",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/flight_destination",
      "cvt": false,
      "name": "destination",
      "kind": "alias"
    },
    {
      "id": "/aviation/airliner_accident/aircraft",
      "cvt": true,
      "name": "airplane",
      "kind": "alias"
    },
    {
      "id": "/astronomy/meteor_shower/source_of_meteor_shower",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/astronomy/meteor_shower/source_of_meteor_shower",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/broadcast/broadcast/area_served",
      "cvt": false,
      "name": "audiance",
      "kind": "alias"
    },
    {
      "id": "/broadcast/broadcast/distributor",
      "cvt": false,
      "name": "publisher",
      "kind": "alias"
    },
    {
      "id": "/broadcast/broadcast/content",
      "cvt": false,
      "name": "material",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/rocket_manufacturer/rockets_manufactured",
      "cvt": false,
      "name": "rockets",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_programs",
      "cvt": true,
      "name": "programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_programs",
      "cvt": true,
      "name": "tv programs",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_programs",
      "cvt": true,
      "name": "tv shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_programs",
      "cvt": true,
      "name": "shows",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_writer/tv_segments_written",
      "cvt": false,
      "name": "skits",
      "kind": "alias"
    },
    {
      "id": "/medicine/disease_cause/diseases",
      "cvt": false,
      "name": "disease",
      "kind": "alias"
    },
    {
      "id": "/medicine/disease_cause/diseases",
      "cvt": false,
      "name": "condition",
      "kind": "alias"
    },
    {
      "id": "/medicine/disease_cause/diseases",
      "cvt": false,
      "name": "illness",
      "kind": "alias"
    },
    {
      "id": "/education/academic_post_title/people_with_this_title",
      "cvt": true,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/education/academic_post_title/people_with_this_title",
      "cvt": true,
      "name": "academics",
      "kind": "alias"
    },
    {
      "id": "/education/academic_post_title/people_with_this_title",
      "cvt": true,
      "name": "researchers",
      "kind": "alias"
    },
    {
      "id": "/education/dissertation/institution",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/platforms",
      "cvt": false,
      "name": "system",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/platforms",
      "cvt": false,
      "name": "systems",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/characters",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/sequel",
      "cvt": false,
      "name": "sequel",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/game_series",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/prequel",
      "cvt": false,
      "name": "prequel",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/processors_supported",
      "cvt": false,
      "name": "processors",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/processors_supported",
      "cvt": false,
      "name": "cpu",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/online_reviews",
      "cvt": true,
      "name": "reviews",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/uses_game_engine",
      "cvt": false,
      "name": "engine",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/uses_game_engine",
      "cvt": false,
      "name": "engine",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/gameplay_modes",
      "cvt": false,
      "name": "modes",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/gameplay_modes",
      "cvt": false,
      "name": "gameplay",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/influenced_by",
      "cvt": false,
      "name": "influences",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/peripherals_supported",
      "cvt": false,
      "name": "contollers",
      "kind": "alias"
    },
    {
      "id": "/cvg/computer_videogame/peripherals_supported",
      "cvt": false,
      "name": "peripherals",
      "kind": "alias"
    },
    {
      "id": "/military/armed_force/personnel",
      "cvt": true,
      "name": "people",
      "kind": "alias"
    },
    {
      "id": "/military/armed_force/military_posts",
      "cvt": true,
      "name": "posts",
      "kind": "alias"
    },
    {
      "id": "/military/armed_force/military_combatant",
      "cvt": false,
      "name": "members",
      "kind": "alias"
    },
    {
      "id": "/military/armed_force/military_combatant",
      "cvt": false,
      "name": "countries",
      "kind": "alias"
    },
    {
      "id": "/military/armed_force/military_combatant",
      "cvt": false,
      "name": "participants",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/artist",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/period_or_movement",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/art_subject",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/visual_art/artwork/owners",
      "cvt": true,
      "name": "buyers",
      "kind": "alias"
    },
    {
      "id": "/opera/opera_director/operas_directed",
      "cvt": false,
      "name": "operas",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/artworks",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/artworks",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/associated_periods_or_movements",
      "cvt": false,
      "name": "movement",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/associated_periods_or_movements",
      "cvt": false,
      "name": "period",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/associated_periods_or_movements",
      "cvt": false,
      "name": "style",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/associated_periods_or_movements",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/art_forms",
      "cvt": false,
      "name": "medium",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_artist/art_series",
      "cvt": false,
      "name": "collections",
      "kind": "alias"
    },
    {
      "id": "/education/dissertation/institution",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/medicine/physician/medical_specialty",
      "cvt": false,
      "name": "specialty",
      "kind": "alias"
    },
    {
      "id": "/medicine/physician/medical_specialty",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/medicine/physician/medical_specialty",
      "cvt": false,
      "name": "research subject",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/dining/cuisine/region_of_origin",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/dining/cuisine/dishes",
      "cvt": false,
      "name": "food",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_producer_type/tv_producers_of_this_type",
      "cvt": true,
      "name": "tv producers",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/astronaut/missions",
      "cvt": false,
      "name": "missions",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/astronaut/space_agency",
      "cvt": false,
      "name": "agency",
      "kind": "alias"
    },
    {
      "id": "/aviation/airline/accidents",
      "cvt": false,
      "name": "disasters",
      "kind": "alias"
    },
    {
      "id": "/aviation/airline/accidents",
      "cvt": false,
      "name": "crashes",
      "kind": "alias"
    },
    {
      "id": "/geography/lake_type/lakes_of_this_type",
      "cvt": false,
      "name": "lakes",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/annual_visitors",
      "cvt": true,
      "name": "visitors",
      "kind": "alias"
    },
    {
      "id": "/protected_sites/protected_site/governing_body",
      "cvt": false,
      "name": "government",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/visual_art/visual_art_medium/artworks",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/subjects",
      "cvt": false,
      "name": "theme",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/source",
      "cvt": false,
      "name": "attribution",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/source",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/author",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/author",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/author",
      "cvt": false,
      "name": "writer",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/author",
      "cvt": false,
      "name": "speaker",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/spoken_by_character",
      "cvt": false,
      "name": "spoken by character",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/spoken_by_character",
      "cvt": false,
      "name": "character",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/addressee",
      "cvt": false,
      "name": "audiance",
      "kind": "alias"
    },
    {
      "id": "/media_common/quotation/addressee",
      "cvt": false,
      "name": "audiance",
      "kind": "alias"
    },
    {
      "id": "/sports/golf_course/facility",
      "cvt": false,
      "name": "club",
      "kind": "alias"
    },
    {
      "id": "/sports/golf_course/facility",
      "cvt": false,
      "name": "club",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "artworks",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "paintings",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "works",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "artwork",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/artwork_on_the_subject",
      "cvt": false,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_subject/art_series_on_the_subject",
      "cvt": false,
      "name": "series",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_company/plays_produced",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_player/current_team",
      "cvt": true,
      "name": "team",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_player/current_team",
      "cvt": true,
      "name": "club",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_player/position_s",
      "cvt": false,
      "name": "position",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_player/position_s",
      "cvt": false,
      "name": "positions played",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_player/former_teams",
      "cvt": true,
      "name": "earlier teams",
      "kind": "alias"
    },
    {
      "id": "/american_football/football_player/games",
      "cvt": true,
      "name": "matches",
      "kind": "alias"
    },
    {
      "id": "/book/illustrator/books_illustrated",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/country",
      "cvt": false,
      "name": "nation",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbols",
      "kind": "alias"
    },
    {
      "id": "/location/administrative_division/official_symbols",
      "cvt": true,
      "name": "symbolism",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/rocket_engine/designed_by",
      "cvt": false,
      "name": "designer",
      "kind": "alias"
    },
    {
      "id": "/spaceflight/rocket_engine/manufactured_by",
      "cvt": false,
      "name": "manufacturer",
      "kind": "alias"
    },
    {
      "id": "/architecture/landscape_architect/landscape_project",
      "cvt": false,
      "name": "projects",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_owner/artworks_owned",
      "cvt": true,
      "name": "art",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_owner/artworks_owned",
      "cvt": true,
      "name": "artworks",
      "kind": "alias"
    },
    {
      "id": "/visual_art/art_owner/artworks_owned",
      "cvt": true,
      "name": "pieces",
      "kind": "alias"
    },
    {
      "id": "/theater/theater_company/plays_produced",
      "cvt": false,
      "name": "plays",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "creator ",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/program_creator",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "characters",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "roles",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/regular_cast",
      "cvt": true,
      "name": "actors",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "song",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/theme_song",
      "cvt": false,
      "name": "jingle",
      "kind": "alias"
    },
    {
      "id": "/tv/tv_program/recurring_writers",
      "cvt": true,
      "name": "writers",
      "kind": "alias"
    },
    {
      "id": "/digicams/digital_camera/street_price",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/digicams/digital_camera/supported_resolutions",
      "cvt": true,
      "name": "resolutions ",
      "kind": "alias"
    },
    {
      "id": "/digicams/digital_camera/image_ratio",
      "cvt": false,
      "name": "image ratio",
      "kind": "alias"
    },
    {
      "id": "/digicams/digital_camera/manufacturer",
      "cvt": false,
      "name": "creator",
      "kind": "alias"
    },
    {
      "id": "/digicams/digital_camera/manufacturer",
      "cvt": false,
      "name": "maker",
      "kind": "alias"
    },
    {
      "id": "/architecture/building_function/buildings",
      "cvt": false,
      "name": "structures",
      "kind": "alias"
    },
    {
      "id": "/automotive/model/manufactured_at",
      "cvt": true,
      "name": "factory",
      "kind": "alias"
    },
    {
      "id": "/automotive/model/manufactured_at",
      "cvt": true,
      "name": "factories",
      "kind": "alias"
    },
    {
      "id": "/automotive/model/manufactured_at",
      "cvt": true,
      "name": "car plants",
      "kind": "alias"
    },
    {
      "id": "/automotive/model/manufactured_at",
      "cvt": true,
      "name": "plant",
      "kind": "alias"
    },
    {
      "id": "/library/public_library/library_system",
      "cvt": false,
      "name": "network",
      "kind": "alias"
    },
    {
      "id": "/projects/project/project_focus",
      "cvt": false,
      "name": "outcome",
      "kind": "alias"
    },
    {
      "id": "/projects/project/budget",
      "cvt": true,
      "name": "projected budget",
      "kind": "alias"
    },
    {
      "id": "/projects/project/budget",
      "cvt": true,
      "name": "budget",
      "kind": "alias"
    },
    {
      "id": "/projects/project/actual_cost",
      "cvt": true,
      "name": "cost",
      "kind": "alias"
    },
    {
      "id": "/projects/project/actual_cost",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/projects/project/includes_smaller_projects",
      "cvt": false,
      "name": "plans",
      "kind": "alias"
    },
    {
      "id": "/film/film_company/films",
      "cvt": true,
      "name": "movies",
      "kind": "alias"
    },
    {
      "id": "/astronomy/star/planet_s",
      "cvt": false,
      "name": "satellites",
      "kind": "alias"
    },
    {
      "id": "/base/wordnet/word/sense",
      "cvt": false,
      "name": "meaning",
      "kind": "alias"
    },
    {
      "id": "/base/ontologies/ontology_instance/equivalent_instances",
      "cvt": true,
      "name": "sameas",
      "kind": "alias"
    },
    {
      "id": "/user/jg/default_domain/olympic_athlete/medals",
      "cvt": false,
      "name": "olympic medals",
      "kind": "alias"
    },
    {
      "id": "/user/jg/default_domain/olympic_athlete/medals",
      "cvt": false,
      "name": "gold medals",
      "kind": "alias"
    },
    {
      "id": "/base/ontologies/ontology_instance/equivalent_instances",
      "cvt": true,
      "name": "sameas",
      "kind": "alias"
    },
    {
      "id": "/user/skud/names/name_source/namesakes",
      "cvt": false,
      "name": "namesakes",
      "kind": "alias"
    },
    {
      "id": "/user/skud/names/name_source/namesakes",
      "cvt": false,
      "name": "name sakes",
      "kind": "alias"
    },
    {
      "id": "/user/skud/names/name_source/namesakes",
      "cvt": false,
      "name": "tributes",
      "kind": "alias"
    },
    {
      "id": "/base/crime/lawyer/law_firm",
      "cvt": false,
      "name": "firm",
      "kind": "alias"
    },
    {
      "id": "/base/crime/lawyer/specialty",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/base/crime/lawyer/law_firm",
      "cvt": false,
      "name": "firm",
      "kind": "alias"
    },
    {
      "id": "/base/crime/lawyer/specialty",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/user/skud/names/namesake/named_after",
      "cvt": false,
      "name": "name source",
      "kind": "alias"
    },
    {
      "id": "/user/skud/names/namesake/named_after",
      "cvt": false,
      "name": "namesource",
      "kind": "alias"
    },
    {
      "id": "/base/exhibitions/exhibition/venues",
      "cvt": true,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/base/mtgbase/magic_card/cost",
      "cvt": true,
      "name": "price",
      "kind": "alias"
    },
    {
      "id": "/base/crime/lawyer/law_firm",
      "cvt": false,
      "name": "firm",
      "kind": "alias"
    },
    {
      "id": "/base/crime/lawyer/specialty",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "legislator",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "legislator",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "legislator",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/wordnet/word_sense/antonym",
      "cvt": false,
      "name": "opposite",
      "kind": "alias"
    },
    {
      "id": "/base/wordnet/word_sense/participal_adjective",
      "cvt": false,
      "name": "adjective",
      "kind": "alias"
    },
    {
      "id": "/base/wordnet/word_sense/derived",
      "cvt": false,
      "name": "derivation",
      "kind": "alias"
    },
    {
      "id": "/base/wordnet/word_sense/derived",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/base/wordnet/word_sense/derived",
      "cvt": false,
      "name": "etymology",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/horseracing/racehorse/races",
      "cvt": true,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/philosophy/idea/philosopher",
      "cvt": false,
      "name": "philosophers",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/philosophy/idea/philosopher",
      "cvt": false,
      "name": "thinker",
      "kind": "alias"
    },
    {
      "id": "/base/exhibitions/exhibition/venues",
      "cvt": true,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/base/exhibitions/exhibition/venues",
      "cvt": true,
      "name": "locations",
      "kind": "alias"
    },
    {
      "id": "/base/crime/lawyer/law_firm",
      "cvt": false,
      "name": "firm",
      "kind": "alias"
    },
    {
      "id": "/base/crime/lawyer/specialty",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "legislator",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/rugby/rugby_player/played_on_team",
      "cvt": true,
      "name": "teams",
      "kind": "alias"
    },
    {
      "id": "/base/rugby/rugby_player/played_on_team",
      "cvt": true,
      "name": "clubs",
      "kind": "alias"
    },
    {
      "id": "/base/rugby/rugby_player/played_on_team",
      "cvt": true,
      "name": "rugby team",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "author",
      "kind": "alias"
    },
    {
      "id": "/user/sprocketonline/economics/legislation/passed_by",
      "cvt": false,
      "name": "legislator",
      "kind": "alias"
    },
    {
      "id": "/base/thoroughbredracing/thoroughbred_racehorse/sex",
      "cvt": false,
      "name": "gender",
      "kind": "alias"
    },
    {
      "id": "/base/thoroughbredracing/thoroughbred_racehorse/foal_if_this_horse_is_sire",
      "cvt": false,
      "name": "foal",
      "kind": "alias"
    },
    {
      "id": "/base/thoroughbredracing/thoroughbred_racehorse/foal_if_this_horse_is_dam",
      "cvt": false,
      "name": "foal",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/progeny",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/included_in",
      "cvt": false,
      "name": "foundations",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "types",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/idea/includes",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/misc/murdered_person/murdered_by",
      "cvt": false,
      "name": "murderer",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/misc/murdered_person/murdered_by",
      "cvt": false,
      "name": "killer",
      "kind": "alias"
    },
    {
      "id": "/base/infrastructure/power_station/fuel_type",
      "cvt": false,
      "name": "fuel",
      "kind": "alias"
    },
    {
      "id": "/base/infrastructure/power_station/supplies_municipality_most_directly",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/base/bioventurist/science_or_technology_company/area_of_expertise",
      "cvt": false,
      "name": "technology",
      "kind": "alias"
    },
    {
      "id": "/base/crime/law_enforcement_authority/investigated_crimes",
      "cvt": false,
      "name": "crimes",
      "kind": "alias"
    },
    {
      "id": "/base/crime/law_enforcement_authority/investigated_crimes",
      "cvt": false,
      "name": "cases",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "motivation",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "reason for",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "reasoning",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "cause",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motive",
      "cvt": false,
      "name": "history",
      "kind": "alias"
    },
    {
      "id": "/base/activism/activist/area_of_activism",
      "cvt": false,
      "name": "causes",
      "kind": "alias"
    },
    {
      "id": "/base/activism/activist/area_of_activism",
      "cvt": false,
      "name": "activism",
      "kind": "alias"
    },
    {
      "id": "/base/activism/activist/area_of_activism",
      "cvt": false,
      "name": "activist causes",
      "kind": "alias"
    },
    {
      "id": "/base/activism/activist/area_of_activism",
      "cvt": false,
      "name": "protest subjects",
      "kind": "alias"
    },
    {
      "id": "/base/vancouver/location_in_neighborhood/neighborhood",
      "cvt": false,
      "name": "burrough",
      "kind": "alias"
    },
    {
      "id": "/base/infrastructure/power_station/fuel_type",
      "cvt": false,
      "name": "fuel",
      "kind": "alias"
    },
    {
      "id": "/base/infrastructure/power_station/supplies_municipality_most_directly",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "event",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "parties",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/type_of_festival",
      "cvt": false,
      "name": "celebration",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "area",
      "kind": "alias"
    },
    {
      "id": "/user/robert/ranked_lists/ranked_list_item/appears_in_ranked_lists",
      "cvt": false,
      "name": "rank",
      "kind": "alias"
    },
    {
      "id": "/base/marchmadness/ncaa_basketball_tournament_stage/games",
      "cvt": false,
      "name": "matches",
      "kind": "alias"
    },
    {
      "id": "/base/crime/convicted_criminal/convictions",
      "cvt": true,
      "name": "crimes",
      "kind": "alias"
    },
    {
      "id": "/base/crime/convicted_criminal/convictions",
      "cvt": true,
      "name": "prosecutions",
      "kind": "alias"
    },
    {
      "id": "/base/crime/convicted_criminal/convictions",
      "cvt": true,
      "name": "crimes",
      "kind": "alias"
    },
    {
      "id": "/base/famouspets/pet_owner/pets_owned",
      "cvt": true,
      "name": "pets",
      "kind": "alias"
    },
    {
      "id": "/base/famouspets/pet_owner/pets_owned",
      "cvt": true,
      "name": "animals",
      "kind": "alias"
    },
    {
      "id": "/base/saints/saint/feast_day",
      "cvt": false,
      "name": "feast",
      "kind": "alias"
    },
    {
      "id": "/base/marchmadness/ncaa_basketball_tournament_game/winning_team",
      "cvt": false,
      "name": "winner",
      "kind": "alias"
    },
    {
      "id": "/base/animemanga/anime_manga_genre/anime_manga_franchises",
      "cvt": false,
      "name": "franchises ",
      "kind": "alias"
    },
    {
      "id": "/base/animemanga/anime_manga_genre/anime_manga_franchises",
      "cvt": false,
      "name": "anime",
      "kind": "alias"
    },
    {
      "id": "/base/animemanga/anime_manga_genre/anime_manga_franchises",
      "cvt": false,
      "name": "manga",
      "kind": "alias"
    },
    {
      "id": "/user/venkytv/default_domain/mythological_figure/mythology",
      "cvt": false,
      "name": "mythology",
      "kind": "alias"
    },
    {
      "id": "/base/crime/law_enforcement_authority/investigated_crimes",
      "cvt": false,
      "name": "crimes",
      "kind": "alias"
    },
    {
      "id": "/base/crime/law_enforcement_authority/investigated_crimes",
      "cvt": false,
      "name": "cases",
      "kind": "alias"
    },
    {
      "id": "/base/animemanga/manga_author/manga_titles_written",
      "cvt": false,
      "name": "manga",
      "kind": "alias"
    },
    {
      "id": "/base/handball/handball_player/matches_played",
      "cvt": true,
      "name": "matches",
      "kind": "alias"
    },
    {
      "id": "/base/handball/handball_player/disciplinary_action",
      "cvt": true,
      "name": "penalties",
      "kind": "alias"
    },
    {
      "id": "/base/americancomedy/comedian/performed_in_venues",
      "cvt": false,
      "name": "venues",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "event",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "parties",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/type_of_festival",
      "cvt": false,
      "name": "celebration",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "area",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "event",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "parties",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/type_of_festival",
      "cvt": false,
      "name": "celebration",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "area",
      "kind": "alias"
    },
    {
      "id": "/user/skud/boats/vessel/vessel_class",
      "cvt": false,
      "name": "class",
      "kind": "alias"
    },
    {
      "id": "/user/skud/boats/vessel/built_by",
      "cvt": false,
      "name": "builder",
      "kind": "alias"
    },
    {
      "id": "/user/skud/boats/vessel/built_at_shipyard",
      "cvt": false,
      "name": "shipyard",
      "kind": "alias"
    },
    {
      "id": "/user/skud/boats/vessel/vessel_class",
      "cvt": false,
      "name": "class",
      "kind": "alias"
    },
    {
      "id": "/user/skud/boats/vessel/built_by",
      "cvt": false,
      "name": "builder",
      "kind": "alias"
    },
    {
      "id": "/user/skud/boats/vessel/built_at_shipyard",
      "cvt": false,
      "name": "shipyard",
      "kind": "alias"
    },
    {
      "id": "/base/fight/sports_official/sports_association",
      "cvt": true,
      "name": "league",
      "kind": "alias"
    },
    {
      "id": "/user/joehughes/default_domain/transit_service_area/transit_agencies",
      "cvt": false,
      "name": "transit",
      "kind": "alias"
    },
    {
      "id": "/base/fight/sports_official/sports_association",
      "cvt": true,
      "name": "league",
      "kind": "alias"
    },
    {
      "id": "/user/akatenev/weapons/weapon/country_of_origin",
      "cvt": false,
      "name": "country",
      "kind": "alias"
    },
    {
      "id": "/user/akatenev/weapons/weapon/country_of_origin",
      "cvt": false,
      "name": "nationality",
      "kind": "alias"
    },
    {
      "id": "/user/akatenev/weapons/weapon/supply_to",
      "cvt": true,
      "name": "buyers",
      "kind": "alias"
    },
    {
      "id": "/base/crime/law_enforcement_authority/investigated_crimes",
      "cvt": false,
      "name": "crimes",
      "kind": "alias"
    },
    {
      "id": "/base/crime/law_enforcement_authority/investigated_crimes",
      "cvt": false,
      "name": "cases",
      "kind": "alias"
    },
    {
      "id": "/base/folklore/mythical_creature/works_written_about_this_creature",
      "cvt": false,
      "name": "books",
      "kind": "alias"
    },
    {
      "id": "/base/folklore/mythical_creature/works_written_about_this_creature",
      "cvt": false,
      "name": "research",
      "kind": "alias"
    },
    {
      "id": "/base/folklore/mythical_creature/area_of_occurrence",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/base/folklore/mythical_creature/named_creatures_of_this_type",
      "cvt": false,
      "name": "creatures",
      "kind": "alias"
    },
    {
      "id": "/user/rcheramy/default_domain/hockey_team/arena",
      "cvt": false,
      "name": "rink",
      "kind": "alias"
    },
    {
      "id": "/user/rcheramy/default_domain/hockey_team/arena",
      "cvt": false,
      "name": "stadium",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "motivation",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "reason for",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "reasoning",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "cause",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motive",
      "cvt": false,
      "name": "history",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_entertainer/specialises_in_sex_acts",
      "cvt": false,
      "name": "specialties",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_entertainer/specialises_in_sex_acts",
      "cvt": false,
      "name": "specialty ",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_entertainer/specialises_in_sex_acts",
      "cvt": false,
      "name": "specialties",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_entertainer/specialises_in_fetishes",
      "cvt": false,
      "name": "fetishes",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_entertainer/specialises_in_fetishes",
      "cvt": false,
      "name": "fetishes",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_entertainer/sexual_orientation",
      "cvt": false,
      "name": "orientation",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_entertainer/sexual_orientation",
      "cvt": false,
      "name": "orientation",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/first_appears_in_work",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/first_appears_in_work",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/first_appears_in_work",
      "cvt": false,
      "name": "publication",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/discovered_during_event",
      "cvt": false,
      "name": "discovery",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/innovator",
      "cvt": false,
      "name": "inventor",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/innovator",
      "cvt": false,
      "name": "inventer",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/innovator",
      "cvt": false,
      "name": "thinker",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/variations_of_this_idea",
      "cvt": true,
      "name": "forms",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "event",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "parties",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/type_of_festival",
      "cvt": false,
      "name": "celebration",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "area",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "motivation",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "reason for",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "reasoning",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motivation",
      "cvt": true,
      "name": "cause",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/motivated_event/motive",
      "cvt": false,
      "name": "history",
      "kind": "alias"
    },
    {
      "id": "/base/animemanga/anime_director/anime_directing_credits",
      "cvt": false,
      "name": "anime",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "event",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "parties",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/type_of_festival",
      "cvt": false,
      "name": "celebration",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "area",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/dated",
      "cvt": true,
      "name": "boyfriends",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/dated",
      "cvt": true,
      "name": "girlfriends",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/friendship",
      "cvt": true,
      "name": "friends",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/friendship",
      "cvt": true,
      "name": "mates",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/canoodled",
      "cvt": true,
      "name": "sex partners",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/canoodled",
      "cvt": true,
      "name": "slept with",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/infidelity_perpetrator",
      "cvt": true,
      "name": "cheated on",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/lived_with",
      "cvt": true,
      "name": "roomates",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/wears",
      "cvt": true,
      "name": "fashion",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/eats_at",
      "cvt": true,
      "name": "restaurants",
      "kind": "alias"
    },
    {
      "id": "/base/popstra/celebrity/shops_at",
      "cvt": true,
      "name": "stores",
      "kind": "alias"
    },
    {
      "id": "/base/infrastructure/power_station/fuel_type",
      "cvt": false,
      "name": "fuel",
      "kind": "alias"
    },
    {
      "id": "/base/infrastructure/power_station/supplies_municipality_most_directly",
      "cvt": false,
      "name": "city",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p001001",
      "cvt": true,
      "name": "population",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p001001",
      "cvt": true,
      "name": "headcount",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p003003",
      "cvt": true,
      "name": "white population",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p003004",
      "cvt": true,
      "name": "black population",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p003006",
      "cvt": true,
      "name": "asian population",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p004002",
      "cvt": true,
      "name": "latino population",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p005002",
      "cvt": true,
      "name": "adult population",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p012002",
      "cvt": true,
      "name": "male population",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p012026",
      "cvt": true,
      "name": "female population",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p013002",
      "cvt": true,
      "name": "average age",
      "kind": "alias"
    },
    {
      "id": "/user/jonathanwlowe/us_census_2000/statistical_region/p014001",
      "cvt": true,
      "name": "child population",
      "kind": "alias"
    },
    {
      "id": "/user/skud/boats/vessel/vessel_class",
      "cvt": false,
      "name": "class",
      "kind": "alias"
    },
    {
      "id": "/user/skud/boats/vessel/built_by",
      "cvt": false,
      "name": "builder",
      "kind": "alias"
    },
    {
      "id": "/user/skud/boats/vessel/built_at_shipyard",
      "cvt": false,
      "name": "shipyard",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "event",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "parties",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/festivals",
      "cvt": false,
      "name": "events",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/type_of_festival",
      "cvt": false,
      "name": "celebration",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "location",
      "kind": "alias"
    },
    {
      "id": "/base/events/festival_series/geographical_scope",
      "cvt": false,
      "name": "area",
      "kind": "alias"
    },
    {
      "id": "/base/fight/sports_official/sports_association",
      "cvt": true,
      "name": "league",
      "kind": "alias"
    },
    {
      "id": "/base/reviews/review/reviewer",
      "cvt": false,
      "name": "critic",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/first_appears_in_work",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/first_appears_in_work",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/first_appears_in_work",
      "cvt": false,
      "name": "publication",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/discovered_during_event",
      "cvt": false,
      "name": "discovery",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/innovator",
      "cvt": false,
      "name": "inventor",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/innovator",
      "cvt": false,
      "name": "inventer",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/innovator",
      "cvt": false,
      "name": "thinker",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/variations_of_this_idea",
      "cvt": true,
      "name": "forms",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_media/sexual_acts_portrayed",
      "cvt": false,
      "name": "sexual acts",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_media/sexual_acts_portrayed",
      "cvt": false,
      "name": "sex acts",
      "kind": "alias"
    },
    {
      "id": "/base/adultentertainment/adult_media/sexual_fetishes_portrayed",
      "cvt": false,
      "name": "fetishes",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/philosophy/philosopher/schools",
      "cvt": false,
      "name": "school",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/philosophy/philosopher/schools",
      "cvt": false,
      "name": "discipline",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/philosophy/philosopher/notable_ideas",
      "cvt": false,
      "name": "ideas",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/philosophy/philosopher/notable_ideas",
      "cvt": false,
      "name": "thoughts",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/philosophy/philosopher/influenced",
      "cvt": false,
      "name": "readers",
      "kind": "alias"
    },
    {
      "id": "/user/alexander/philosophy/philosopher/interests",
      "cvt": false,
      "name": "focus",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/first_appears_in_work",
      "cvt": false,
      "name": "source",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/first_appears_in_work",
      "cvt": false,
      "name": "origin",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/first_appears_in_work",
      "cvt": false,
      "name": "publication",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/discovered_during_event",
      "cvt": false,
      "name": "discovery",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/innovator",
      "cvt": false,
      "name": "inventor",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/innovator",
      "cvt": false,
      "name": "inventer",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/innovator",
      "cvt": false,
      "name": "thinker",
      "kind": "alias"
    },
    {
      "id": "/base/argumentmaps/original_idea/variations_of_this_idea",
      "cvt": true,
      "name": "forms",
      "kind": "alias"
    }
  ],
  "metaschema": [
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasplaceoforigin",
      "name": "HasPlaceOfOrigin",
      "search_filter_operand": "origin",
      "aliases": [
        "from"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/portrayed",
      "name": "Portrayed",
      "search_filter_operand": "portrayed",
      "aliases": [
        "acted as",
        "played"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/portrayedby",
      "name": "PortrayedBy",
      "search_filter_operand": "portrayed_by",
      "aliases": [
        "acted by"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hascategory",
      "name": "HasCategory",
      "search_filter_operand": "category",
      "aliases": [
        "is",
        "is a",
        "classified as"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/administers",
      "name": "Administers",
      "search_filter_operand": "administers",
      "aliases": [
        "manages",
        "takes care of",
        "controls"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/administeredby",
      "name": "AdministeredBy",
      "search_filter_operand": "administered_by",
      "aliases": [
        "managed by",
        "controled by"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/occursin",
      "name": "OccursIn",
      "search_filter_operand": "occurs_in",
      "aliases": [
        "happened in",
        "happens in",
        "took place"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/produced",
      "name": "Produced",
      "search_filter_operand": "produced",
      "aliases": [
        "made",
        "created",
        "built"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/producedby",
      "name": "ProducedBy",
      "search_filter_operand": "produced_by",
      "aliases": [
        "made by",
        "created by",
        "built by"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/haslocation",
      "name": "HasLocation",
      "search_filter_operand": "location",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hastitle",
      "name": "HasTitle",
      "search_filter_operand": "title",
      "aliases": [
        "called",
        "named",
        "titled"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/haspart",
      "name": "HasPart",
      "search_filter_operand": "part",
      "aliases": [
        "sections",
        "parts",
        "subsections",
        "units"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/partof",
      "name": "PartOf",
      "search_filter_operand": "part_of",
      "aliases": [
        "group"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/composedof",
      "name": "ComposedOf",
      "search_filter_operand": "made_of",
      "aliases": [
        "composed of",
        "built with"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/participatedin",
      "name": "ParticipatedIn",
      "search_filter_operand": "participated_in",
      "aliases": [
        "did",
        "joined"
      ],
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasparticipant",
      "name": "HasParticipant",
      "search_filter_operand": "participant",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/discovered",
      "name": "Discovered",
      "search_filter_operand": "discovered",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/discoveredby",
      "name": "DiscoveredBy",
      "search_filter_operand": "discovered_by",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasstatus",
      "name": "HasStatus",
      "search_filter_operand": "status",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/practitionerof",
      "name": "PractitionerOf",
      "search_filter_operand": "practitioner_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/haspractitioner",
      "name": "HasPractitioner",
      "search_filter_operand": "practitioner",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasservicearea",
      "name": "HasServiceArea",
      "search_filter_operand": "service_area",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/haschild",
      "name": "HasChild",
      "search_filter_operand": "child",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasparent",
      "name": "HasParent",
      "search_filter_operand": "parent",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/haspublication",
      "name": "HasPublication",
      "search_filter_operand": "publication",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/publicationof",
      "name": "PublicationOf",
      "search_filter_operand": "publication_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/memberof",
      "name": "MemberOf",
      "search_filter_operand": "member_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/leaderof",
      "name": "LeaderOf",
      "search_filter_operand": "leader_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasleader",
      "name": "HasLeader",
      "search_filter_operand": "leader",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasowner",
      "name": "HasOwner",
      "search_filter_operand": "owner",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/owns",
      "name": "Owns",
      "search_filter_operand": "owns",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/peerof",
      "name": "PeerOf",
      "search_filter_operand": "peer_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/exhibitedat",
      "name": "ExhibitedAt",
      "search_filter_operand": "exhibited_at",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/exhibited",
      "name": "Exhibited",
      "search_filter_operand": "exhibited",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/distributedby",
      "name": "DistributedBy",
      "search_filter_operand": "distributed_by",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasname",
      "name": "HasName",
      "search_filter_operand": "name",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/superclassof",
      "name": "SuperclassOf",
      "search_filter_operand": "superclass_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/subclassof",
      "name": "SubclassOf",
      "search_filter_operand": "subclass_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/tookplaceat",
      "name": "TookPlaceAt",
      "search_filter_operand": "tookplace_at",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasfictionalrelationship",
      "name": "HasFictionalRelationship",
      "search_filter_operand": "fiction_link",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasgenre",
      "name": "HasGenre",
      "search_filter_operand": "genre",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/succeededby",
      "name": "SucceededBy",
      "search_filter_operand": "succeeded_by",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/succeeds",
      "name": "Succeeds",
      "search_filter_operand": "succeeds",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/usepermittedby",
      "name": "UsePermittedBy",
      "search_filter_operand": "use_permitted_by",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/permitsuseof",
      "name": "PermitsUseOf",
      "search_filter_operand": "permits_use_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/contributedto",
      "name": "ContributedTo",
      "search_filter_operand": "contributed_to",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hascontributor",
      "name": "HasContributor",
      "search_filter_operand": "contributor",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasidentifier",
      "name": "HasIdentifier",
      "search_filter_operand": "name",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/identifies",
      "name": "Identifies",
      "search_filter_operand": "identifies",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hascenter",
      "name": "HasCenter",
      "search_filter_operand": "center",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/centerfor",
      "name": "CenterFor",
      "search_filter_operand": "center_for",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hascharacter",
      "name": "HasCharacter",
      "search_filter_operand": "character",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/appearsin",
      "name": "AppearsIn",
      "search_filter_operand": "appears_in",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/broaderthan",
      "name": "BroaderThan",
      "search_filter_operand": "broader_than",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/narrowerthan",
      "name": "NarrowerThan",
      "search_filter_operand": "narrower_than",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/expressedby",
      "name": "ExpressedBy",
      "search_filter_operand": "expressed_by",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hascertification",
      "name": "HasCertification",
      "search_filter_operand": "certification",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/certificationof",
      "name": "CertificationOf",
      "search_filter_operand": "certification_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/haspreceedingwork",
      "name": "HasPreceedingWork",
      "search_filter_operand": "preceeding",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hassubsequentwork",
      "name": "HasSubsequentWork",
      "search_filter_operand": "subsequent",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/created",
      "name": "Created",
      "search_filter_operand": "created",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/createdby",
      "name": "CreatedBy",
      "search_filter_operand": "created_by",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasadaptation",
      "name": "HasAdaptation",
      "search_filter_operand": "adaptation",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/adaptationof",
      "name": "AdaptationOf",
      "search_filter_operand": "adaptation_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasmeasurement",
      "name": "HasMeasurement",
      "search_filter_operand": "number",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasabstraction",
      "name": "HasAbstraction",
      "search_filter_operand": "abstraction",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/abstractionof",
      "name": "AbstractionOf",
      "search_filter_operand": "abstraction_of",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hasmeansofdemise",
      "name": "HasMeansOfDemise",
      "search_filter_operand": "means_of_demise",
      "type": "/base/fbontology/semantic_predicate"
    },
    {
      "id": "/base/fbontology/metaschema/predicate_id/hassubject",
      "name": "HasSubject",
      "search_filter_operand": "subject",
      "type": "/base/fbontology/semantic_predicate"
    }
  ],
  "is_a": [
    "/amusement_parks/ride/ride_type",
    "/amusement_parks/roller_coaster/propulsion",
    "/amusement_parks/roller_coaster/train_configuration",
    "/architecture/building/building_function",
    "/architecture/museum/type_of_museum",
    "/astronomy/asteroid/spectral_type",
    "/astronomy/celestial_object/category",
    "/astronomy/extraterrestrial_location/type_of_planetographic_feature",
    "/astronomy/galaxy/galaxy_classification_hubble",
    "/astronomy/galaxy_classification_code/galaxy_shape",
    "/astronomy/near_earth_object/near_earth_object_classification",
    "/astronomy/orbital_relationship/orbit_type",
    "/astronomy/star/spectral_type",
    "/astronomy/telescope/type_of_telescope",
    "/automotive/model/automotive_class",
    "/automotive/transmission/classification",
    "/aviation/aircraft_model/aircraft_type",
    "/aviation/airliner_accident/accident_type",
    "/aviation/airport/airport_type",
    "/aviation/aviation_waypoint/waypoint_type",
    "/award/competition/type_of_competition",
    "/bicycles/bicycle_model/bicycle_type",
    "/biology/breed_registration/breed_group",
    "/biology/fossil_specimen/organism",
    "/biology/gene_group_membership/group",
    "/biology/gene_ontology_group/group_type",
    "/biology/organism/organism_type",
    "/biology/organism/sex",
    "/biology/organism_classification/rank",
    "/biology/pedigreed_animal/breed",
    "/boats/ship/ship_class",
    "/boats/ship_class/ship_type",
    "/book/book_edition/binding",
    "/book/periodical_format_period/format",
    "/book/poem/verse_form",
    "/book/short_non_fiction/mode_of_writing",
    "/business/consumer_product/category",
    "/business/issue/type_of_issue",
    "/business/product_line/category",
    "/celebrities/sexual_orientation_phase/sexual_orientation",
    "/chemistry/chemical_compound/classifications",
    "/chemistry/chemical_element/chemical_series",
    "/chemistry/chemical_element/periodic_table_block",
    "/computer/computer_peripheral/peripheral_class",
    "/computer/file_format/genre",
    "/conferences/conference_series/type_of_conference",
    "/cricket/cricket_match/match_type",
    "/cvg/computer_videogame/gameplay_modes",
    "/digicams/digital_camera/format",
    "/distilled_spirits/blended_spirit/style",
    "/distilled_spirits/distilled_spirit/spirit_type",
    "/distilled_spirits/infused_spirit/infusion_style",
    "/education/educational_institution/school_type",
    "/education/fraternity_sorority/fraternity_sorority_type",
    "/engineering/battery/cell_type",
    "/engineering/battery/size",
    "/engineering/battery_size/shape_format",
    "/engineering/engine/category",
    "/engineering/piston_engine/cooling_method",
    "/engineering/piston_engine/fuel_delivery_method",
    "/engineering/piston_engine/piston_configuration",
    "/engineering/piston_engine/valvetrain_configuration",
    "/engineering/power_plug_standard/plug_type",
    "/event/disaster/type_of_disaster",
    "/event/speech_or_presentation/type_or_format_of_presentation",
    "/exhibitions/exhibition/exhibition_types",
    "/fashion/textile/weave",
    "/fictional_universe/fictional_setting/setting_type",
    "/film/film/film_format",
    "/food/beer/beer_style",
    "/food/beer_style/bjcp_style_category",
    "/food/cheese/texture",
    "/food/dish/type_of_dish1",
    "/food/drinking_establishment/drinking_establishment_type",
    "/food/tea/tea_type",
    "/food/wine_style/wine_types",
    "/geography/geographical_feature/category",
    "/geography/glacier/glacier_type",
    "/geography/lake/lake_type",
    "/geography/mountain/listings",
    "/geography/mountain/mountain_type",
    "/geography/waterfall/waterfall_type",
    "/government/government_office_or_title/category",
    "/government/government_position_held/basic_title",
    "/interests/collectable_item/collection_category",
    "/internet/top_level_domain/domain_type",
    "/language/conlang/conlang_type",
    "/language/language_writing_system/type_of_writing",
    "/law/us_patent/international_classification",
    "/law/us_patent/us_classification_category",
    "/law/us_patent/us_patent_type",
    "/location/administrative_division_capital_relationship/capital_type",
    "/location/country/form_of_government",
    "/location/location_symbol_relationship/Kind_of_symbol",
    "/martial_arts/martial_art/category",
    "/medicine/cancer_center/cancer_center_type",
    "/medicine/drug/drug_class",
    "/medicine/drug/mechanism_of_action",
    "/medicine/drug_formulation/dosage_form",
    "/medicine/drug_formulation/drug_category",
    "/medicine/hospital_ownership/ownership_status",
    "/medicine/infectious_disease/infectious_agent_type",
    "/medicine/medical_trial/design",
    "/medicine/medical_trial/phase",
    "/medicine/medical_trial/type_of_trial",
    "/meteorology/cloud/classification",
    "/meteorology/tropical_cyclone/category",
    "/metropolitan_transit/transit_line/service_type",
    "/military/military_unit/unit_size",
    "/music/album/release_type",
    "/music/composition/form",
    "/music/opera_singer/voice_type",
    "/music/release/format",
    "/organization/organization/legal_structure",
    "/organization/organization/organization_type",
    "/people/person/ethnicity",
    "/people/person/gender",
    "/physics/particle/family",
    "/physics/particle/generation",
    "/protected_sites/natural_or_cultural_site_designation/categories",
    "/protected_sites/natural_or_cultural_site_listing/designation",
    "/protected_sites/protected_site/iucn_category",
    "/rail/locomotive_class/gauge",
    "/rail/railway_gauge_relationship/gauge",
    "/rail/railway_type_relationship/railway_type",
    "/rail/steam_locomotive_class/fuel_type",
    "/rail/steam_locomotive_class/wheel_configuration",
    "/religion/place_of_worship/religion",
    "/religion/place_of_worship/type_of_place_of_worship",
    "/religion/place_of_worship_historical_use/religion",
    "/religion/religious_leadership_jurisdiction/size_or_type",
    "/royalty/chivalric_rank/gender",
    "/royalty/noble_rank/gender",
    "/royalty/order_of_chivalry/category",
    "/skiing/lift_tenure/lift_type",
    "/skiing/ski_run/rating",
    "/spaceflight/bipropellant_rocket_engine/engine_cycle",
    "/spaceflight/rocket/rocket_function",
    "/spaceflight/satellite/primary_use",
    "/sports/boxer/weight_division",
    "/time/holiday/type_of_holiday",
    "/transportation/bridge/bridge_type",
    "/travel/accommodation/accommodation_type",
    "/visual_art/artwork/art_form",
    "/wine/wine/color",
    "/wine/wine/wine_style",
    "/wine/wine/wine_type",
    "/zoos/zoo/category",
    "/people/person/profession",
    "/soccer/football_player/position_s",
    "/american_football/football_historical_roster_position/position_s",
    "/american_football/football_player/position_s",
    "/american_football/football_roster_position/position",
    "/baseball/baseball_player/position_s",
    "/baseball/baseball_roster_position/position",
    "/basketball/basketball_player/position_s",
    "/basketball/basketball_roster_position/position",
    "/ice_hockey/hockey_player/hockey_position",
    "/ice_hockey/hockey_roster_position/position",
    "/soccer/football_player/position_s",
    "/soccer/football_roster_position/position"
  ]
}

});

require.define("/freebase.js",function(require,module,exports,__dirname,__filename,process,global){var globals={
  host:'https://www.googleapis.com/freebase/v1/',
  image_host:"https://usercontent.googleapis.com/freebase/v1/image",
  geosearch:'http://api.freebase.com/api/service/geosearch',
  wikipedia_host:'http://en.wikipedia.org/w/api.php'
}

var request = require('request');
var async = require('async');
var _ =require('underscore');

var fns=require('./lib/helpers');
var data=require('./lib/data.js').data;
var freebase={};

//interface to freebase's mql api
freebase.mqlread=function(query, options, callback){
  callback=callback||console.log;
  if(!query){return callback({})}
  options=options||{};
  options.uniqueness_failure=options.uniqueness_failure||"soft";
  options.cursor=options.cursor||"";
    //is it an array of sub-queries?
  if(_.isArray(query) && query.length>1){
    return fns.doit_async(query, freebase.mqlread, options, callback)
  }
  var params=fns.set_params(options)
  var url= globals.host+'mqlread?query='+encodeURIComponent(JSON.stringify(query))+'&'+params;
  fns.http(url, function(result){
    return callback(result)
  })
}

//turn a string into a confident topic id
freebase.lookup=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.lookup, options, callback)
  }
  //if its a freebase-type object
  if(_.isObject(q)){
    if( (q.id!=null||q.mid!=null) && q.name!=null ){
      return callback(q);
    }else{
      q=q.id||q.mid;
    }
   }
  //if its a url
  if(q.match(/^(https?:\/\/|www\.)/)){
      return url_lookup(q, options, function(result){
        if(result && result.result && result.result[0]){
          return callback(result.result[0])
        }
        return callback({})
      })
    }
  options.type=options.type||"/common/topic";
  var url= globals.host+'search?limit=2&lang=en&type='+options.type+'&filter=';
  url+=encodeURIComponent('(any name{full}:"'+q+'" alias{full}:"'+q+'" )'); //id:"'+q+'"
  if(options.type=="/type/type" || options.type=="/type/property"){
    url+="&scoring=schema&stemmed=true"
  }
  if(options.key){
    url+='&key='+options.key;
  }
  fns.http(url, function(result){
    if(!result || !result.result || !result.result[0] ){return callback({})}
    //filter-out shit results
    result=result.result||[]
    result[0]=result[0]||{}
    result[1]=result[1]||{}
    //kill low-relevance
    if( !result[0].score && result[0].score<30){
      return callback({})
    }
    //kill if 2nd result is also notable
    if(! ((result[0].score||0) * 0.7) > (result[1].score||0) ){
      return callback({})
    }
    //kill if types are crap
    var kill=["/music/track","/music/release_track", "/tv/tv_episode", "/music/recording", "/music/composition", "/book/book_edition"]
    if(result[1] && result[0].notable && fns.isin( result[0].notable.id, kill)){
      return callback({})
    }
    result[0].name= result[0].name||result[0].text||'';
    return callback(result[0])
  })
}
 //freebase.lookup(["/m/09jm8", "http://myspace.com/u2"])
//freebase.lookup("toronto")


//like freebase.lookup but only needs an id
freebase.get_id=function(q, options, callback){
  //if its a freebase-type object
  if(_.isObject(q)){
    q=q.id||q.mid||q.name;
   }
  //is an id
  if(!q || (q.match(/\/.{1,12}\/.{3}/) !=null)){return callback({id:q})}
  //is a normal search
  freebase.lookup(q, options, function(result){
    if(options.type="/type/type"){
      return callback(result)
    }
    else if(result && result.mid){
      result.id=result.id || result.mid;
      return callback(result)
    }
    return callback({})
  })
}


//topic api
freebase.topic=function(q, options, callback){
    callback=callback||console.log;
    if(!q){return callback({})}
    options=options||{};
     //is it an array of sub-tasks?
    if(_.isArray(q) && q.length>1){
      return fns.doit_async(q, freebase.topic, options, callback)
    }
    freebase.get_id(q, options, function(topic){
      var id=topic.id;
      if(!id){return callback({})}
      options.filter=options.filter||'all'
      var url= globals.host+'topic'+id+'?'+fns.set_params(options)
      // if(options.filter){url+='&filter='+encodeURIComponent(options.filter)}
      // if(options.key){url+='&key='+options.key}
      fns.http(url, function(result){
        return callback(result)
      })
    })
}
 //freebase.topic("toronto", {filter:"allproperties"})


//regular search api
freebase.search=function(q, options, callback){
      callback=callback||console.log;
      if(!q && !options.filter){return callback([])}
      options=options||{};
       //is it an array of sub-tasks?
      if(_.isArray(q) && q.length>1){
        return fns.doit_async(q, freebase.search, options, callback)
      }
      options.query=q || '';
      if(options.filter){
        options.filter=encodeURIComponent(options.filter)
      }
      if(options.type=="/type/type" || options.type=="/type/property"){
        url+="&scoring=schema&stemmed=true"
      }
      options.query=encodeURIComponent(options.query);
      var params=fns.set_params(options)
      var url= globals.host+'search/?'+params;
      fns.http(url, function(result){
        if(!result || !result.result || !result.result[0] ){return callback([])}
        return callback(result.result)
    })
}
//freebase.search("bill murray")

//get all of the results to your query
freebase.paginate=function(query, options, callback){
  callback=callback||console.log;
  if(!query){return callback([])}
  options=options||{};
  options.max=options.max||500;
  //is it an array of sub-tasks?
  if(_.isArray(query) && query.length>1){
    return fns.doit_async(query, freebase.paginate, options, callback)
  }
 // if(_.isObject(query)){query=[query]}
  var all=[];
  //recursive mqlread until cursor is false, or maximum reached
  iterate('')
  function iterate(cursor){
    options.cursor=cursor
    freebase.mqlread(query, options, function(result){
      if(!result||!result.result){return callback(all);}
      all=all.concat(result.result);
      if(result.cursor && (!options.max || all.length<options.max) ){
        iterate(result.cursor)
      }else{
        return callback(all)
      }
    })
  }
}


//get the proper pronoun to use for a topic eg. he/she/they/it
freebase.grammar=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.pronoun, options, callback)
  }
   freebase.get_id(q, options, function(topic){
     if(!topic || !topic.id){return callback({})}
     var query=[{
        "id":   topic.id,
        "name": null,
        "type": [],
        "/people/person/gender": [{
          "id":       null,
          "optional": true
        }],
        "/fictional_universe/fictional_character/gender": [{
          "id":       null,
          "optional": true
        }]
      }]
    freebase.mqlread(query, options, function(result){
      if(!result || !result.result || !result.result[0]){return callback('')}
      result=result.result[0];
      var grammar={
        plural:false,
        gender:null,
        article:"a",
        pronoun:"it",
        copula:"is"
      }
      //people grammar
      if(fns.isin('/people/person', result.type) || fns.isin('/fictional_universe/fictional_character', result.type) ){
        var gender = result["/people/person/gender"][0] || result["/fictional_universe/fictional_character/gender"][0];
        if(gender) {
          if(gender.id == "/en/male") { //male
            grammar.gender = "male";
            grammar.pronoun = "he";
          } else if(gender.id == "/en/female") { //female
            grammar.gender = "female";
            grammar.pronoun = "she";
          }
        } else { //no gender person
          grammar.gender = "unknown";
          grammar.pronoun = "they";
        }
      }else{ //not a person
        //plural topics
        if(_.intersection(data.plural_types, result.type).length >0){
          grammar.plural=true;
          grammar.pronoun="they";
          grammar.copula="are"
        }
        //categories that need a 'the' instead of 'a'
        if(_.intersection(data.definate_articles, result.type).length >0){
          grammar.article="the";
        }
      }
      return callback(grammar);
    })
  })
}
//freebase.grammar("toronto maple leafs")
//freebase.grammar("wayne gretzky")
//freebase.grammar("ron weasley")

//turns a url into a freebase topic and list its same:as links
freebase.same_as_links=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  options.filter=options.filter||"/common/topic"
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.same_as_links, options, callback)
  }
  var url= globals.host+'search?type=/common/topic&limit=1&query='+encodeURIComponent(q);
  if(options.key){
    url+='&key='+options.key;
  }
  fns.http(url, function(result){
    if(!result || !result.result || !result.result[0]){
      return callback({})
    }
      //get its formatted links from the topic api
    freebase.topic(result.result[0].mid , options, function(all){
      var links=[];
      //same-as ones
      if(all.property['/common/topic/topic_equivalent_webpage']){
       links=all.property['/common/topic/topic_equivalent_webpage'].values.map(function(v){
          return {href:v.value, title: fns.parseurl(v.value).authority}
        })
      }
      //webpage ones
      if(all.property['/common/topic/topical_webpage']){
       links=links.concat(all.property['/common/topic/topical_webpage'].values.map(function(v){
          var host= fns.parseurl(v.value).authority || ''
          return {href:v.value, title:host.replace(/^www\./,'')}
        }))
      }
      var obj={topic:result.result[0], links:links}
      return callback(obj)
    })
  })
}

//return specific language title for a topic
freebase.translate=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.translate, options, callback)
  }
  if(!options.lang){options.lang="/lang/fr"}//defaulting to french is better than an error..?
  if(!options.lang.match(/\/lang\//)){
    options.lang='/lang/'+options.lang
  }
    freebase.get_id(q, options, function(topic){
    if(!topic||!topic.id){return callback("")}
    var query=[{
      "id": topic.id,
      "name": [{
        "lang":  options.lang,
        "value": null
      }]
    }]
    freebase.mqlread(query, {}, function(result){
      if(!result || !result.result || !result.result[0]){return callback('')}
      var name=result.result[0].name||[{}]
      name=name[0].value||'';
      return callback(name)
    })
  })
}



//get a url for image href of on this topic
freebase.image=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  options.maxheight=options.maxheight||250;
  options.maxwidth=options.maxwidth||250;
  options.errorid=options.errorid||"/m/0djw4wd"
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.image, options, callback)
  }
   freebase.get_id(q, options, function(topic){
     if(!topic || !topic.id){return callback("")}
     var query=[{
        "id":   topic.id,
        "name": null,
        "/common/topic/image": [{
          "id":     null
        }]
      }]
    freebase.mqlread(query, options, function(result){
      if(!result || !result.result || !result.result[0] || !result.result[0]["/common/topic/image"][0] ){
        return callback('')
      }
      var url= globals.image_host+result.result[0]["/common/topic/image"][0].id;
      var params=fns.set_params(options);
      url+='?'+params;
      return callback(url)
    })
  })
}


//get a text blurb from freebase
freebase.description=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.description, options, callback)
  }
 freebase.get_id(q, options, function(topic){
  if(!topic || !topic.id){return callback("")}
  var url= globals.host+'text/'+topic.id;
  if(options.key){
    url+='?key='+options.key;
  }
  fns.http(url,function(result){
    if(!result.result){return callback('')}
    return callback(result.result)
  })
 });
}

//get a topics notable type
freebase.notable=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.notable, options, callback)
  }
 freebase.topic(q, {filter:"/common/topic/notable_types"}, function(result){
  if(!result || !result.property || !result.property['/common/topic/notable_types']){return callback({})}
  var notable=result.property['/common/topic/notable_types'] || {values:[]};
  notable.values[0].name=notable.values[0].text;
  return callback(notable.values[0])
 });
}

//get the first sentence of a topic description
freebase.sentence=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.sentence, options, callback)
  }
  freebase.description(q, options, function(desc){
    if(!desc){return callback("")}
    desc=fns.sentenceparser(desc)||[]
    desc=desc[0]||''
    desc=desc.replace(/\(.*?\)/g,'')//remove birthdates
    desc=desc.replace(/  /g,' ')
    return callback(desc)
  })
}

//get a list of topics in a type
freebase.list=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  options.max=options.max || options.limit || 500;
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.list, options, callback)
  }
  //singularize it if it's a search query
  if(!q.match(/\/.{1,12}\/.{3}/)){
    q=fns.singularize(q);
  }
  //get its id
  freebase.get_id(q, {type:"/type/type"}, function(topic){
    if(!topic || !topic.id){return callback([])}
      var query = [{
        "type": topic.id,
        "name": null,
        "id": null,
        "mid": null,
        "limit": 100
      }]
    if(options.extend){
      for(var i in options.extend){
        query[0][i]=options.extend[i]
      }
    }
    freebase.paginate(query, options, callback)
   })
}
//freebase.list("hurricanes",{}, function(r){console.log('========================')})
//freebase.list("/book/author")


function list_category_like(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  q=fns.singularize(q);
  freebase.topic(q, options, function(r){
    if(!r || !r.property || !_.isObject(r.property) ){return callback([])}
    var all=Object.keys(r.property).filter(function(v){
      return fns.isin(v, data.category_like)
    }).map(function(p){
      //add the property
      r.property[p].values=r.property[p].values.map(function(v){
        v.property=p;
        return v;
      })
      return r.property[p].values
    })
    all=_.flatten(all);
    return callback(all)
  })
}
//list_category_like("city")


//from a geo-coordinate, get the town, province, country, and timezone for it
freebase.place_data = function(geo, options, callback) {
  callback = callback || console.log;
  if(!geo) {
    return callback({})
  }
  options = options || {};
  //is it an array of sub-tasks?
  if(_.isArray(geo) && geo.length > 1) {
    return fns.doit_async(q, freebase.place_data, options, callback)
  }
  var location = {"coordinates":[ geo.lng , geo.lat ],"type":"Point"}
  var out = [{
    "mid": null,
    "name": null,
    "type": []
  }]
  var url = globals.geosearch + '?location=' + encodeURIComponent(JSON.stringify(location)) + '&order_by=distance&limit=1&type=/location/citytown&within=15&format=json&mql_output=' + encodeURIComponent(JSON.stringify(out))
  fns.http(url, function(r) {
    var all = {
      city: null,
      country: null,
      province: null,
      timezone: null
    }
    all.city = r.result.features[0].properties;
    var query = [{
      "name": null,
      "id": r.result.features[0].properties.mid,
      "/location/location/containedby": [{
        "id": null,
        "name": null,
        "type": [],
        "optional": true,
        "/location/location/time_zones": [{
          "/time/time_zone/offset_from_uct": null,
          "id": null,
          "name": null,
          "optional": true
        }],
        "/location/location/containedby": [{
          "id": null,
          "name": null,
          "type": [],
          "optional": true,
          "/location/location/time_zones": [{
            "/time/time_zone/offset_from_uct": null,
            "id": null,
            "name": null,
            "optional": true
          }]
        }]
      }]
    }]
    freebase.mqlread(query, {}, function(r) {
      //hunt for the most appropriate topics in 2 layers
      for(var i in r.result[0]['/location/location/containedby']){
        var v=r.result[0]['/location/location/containedby'][i]
        if(v.type.filter(function(t) {return t == "/location/country"})[0]) {
          all.country = {
            id: v.id,
            name: v.name
          }
        } else if(v.type.filter(function(t) {return t == "/location/administrative_division"})[0]) {
          all.province = {
            id: v.id,
            name: v.name
          }
        }
        if(v["/location/location/time_zones"][0] && v["/location/location/time_zones"].length==1) {
          all.timezone = v["/location/location/time_zones"][0];
        }
        if(all.country) {
          return callback(all)
        }
        //second layer looks good too
        v['/location/location/containedby'].map(function(o) {
          if(o.type.filter(function(t) {return t == "/location/country"})[0]) {
            all.country = {
              id: o.id,
              name: o.name
            }
          } else if(!all.province && o.type.filter(function(t) { return t == "/location/administrative_division"})[0]) {
            all.province = {
              id: o.id,
              name: o.name
            }
          }
          if(!all.timezone && o["/location/location/time_zones"][0] && o["/location/location/time_zones"].length==1) {
            all.timezone = o["/location/location/time_zones"][0];
          }
        })
      }
      return callback(all)
    })

  })
}
 // freebase.place_data({lat:51.545414293637286,lng:-0.07589578628540039}, {}, console.log)


//get any incoming data to this topic, //ignoring cvt types
freebase.incoming=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.incoming, options, callback)
  }
  freebase.get_id(q, options, function(topic){
    if(!topic || !topic.id){return callback([])}
    var query=[{
      "id": topic.id,
      "/type/reflect/any_reverse": [{
        "link": null,
        "id":   null,
        "name": null,
        "type": "/common/topic",
        "limit":170
      }]
    }]
    //this technically doesn't paginate.
    freebase.paginate(query, options, function(result){
      if(!result || !result[0] || !result[0]['/type/reflect/any_reverse']){
        return callback([])
      }
      return callback(result[0]['/type/reflect/any_reverse'])
    })
  })
}

//return all outgoing links for a topic, traversing cvt types
freebase.outgoing=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.outgoing, options, callback)
  }
  freebase.lookup(q, options, function(topic){
    if(!topic || !topic.mid){return callback([])}
      freebase.topic(topic.mid, options, function(result){
        var out=[];
          //get rid of permissions and stuff..
        result.property=kill_boring(result.property)
        Object.keys(result.property).forEach(function(key){
          var v=result.property[key];
          //add topics
          if(v.valuetype=="object"){
            v.values=v.values.map(function(s){s.property=key; return s})
            out=out.concat(v.values)
          }
          //add the topics from cvt values in the same manner
          if(v.valuetype=="compound"){
            v.values.forEach(function(c){
              c.property=kill_boring(c.property);
              Object.keys(c.property).forEach(function(key2){
               if(c.property[key2].valuetype=="object"){
                c.property[key2].values=c.property[key2].values.map(function(s){s.property=[key,key2]; return s})
                out=out.concat(c.property[key2].values)
               }
              })
            })
          }
        })
        out=out.map(function(o){return {name:o.text, id:o.id, property:o.property }})
        //add sentence-forms
        out=out.map(function(o){
          var property=o.property ||'';
          if(_.isArray(o.property)){
            property=o.property.join('');
          }
          o.sentence=topic.name +"'s " +_.last(property.split('/')).replace('_',' ') +" is "+ o.name; //ugly fallback
          var grammar=data.sentence_grammars.filter(function(v){return v.property==property})[0]||{}
          if(grammar["sentence form"] && topic.name && o.name){
            o.sentence=grammar["sentence form"].replace(/\bsubj\b/, topic.name).replace(/\bobj\b/, o.name);
          }
          return o
        })
        return callback(out)
      })
    })
}
//freebase.outgoing("vancouver")

//return all outgoing and incoming links for a topic
freebase.graph=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.graph, options, callback)
  }
  freebase.lookup(q, options, function(topic){
      if(!topic){return callback({})}
        delete topic.score;
        delete topic.lang;
      options.filter="allproperties";
      freebase.topic(topic.mid, options, function(r){
        var incoming={};var outgoing ={};
        Object.keys(r.property).forEach(function(k){
          if(k.match(/^\!/)){
            outgoing[k]=r.property[k]
          }else{
            incoming[k]=r.property[k]
          }
        })
        incoming=parse_topic_api(incoming);
        outgoing=parse_topic_api(outgoing);
        var out=incoming.map(function(v){
          return {subject:topic, property:{id:v.property}, object:v}
        })
        out=out.concat(outgoing.map(function(v){
          return {object:topic, property:{id:v.property}, subject:v}
        }))
        //add the sentences
        out=out.map(function(obj){
          obj.property.id=obj.property.id.replace(/^\!/,'')
          delete obj.subject.property
          var grammar=data.sentence_grammars.filter(function(v){return v.property==obj.property.id})[0]||{}
          obj.sentence=obj.subject.name +"'s " +_.last(obj.property.id.split('/')).replace('_',' ') +" is "+ obj.object.name;
          if(grammar["sentence form"] && obj.subject.name && obj.object.name){
            obj.sentence=grammar["sentence form"].replace(/\bsubj\b/, obj.subject.name).replace(/\bobj\b/, obj.object.name);
         }
          return obj
        })
        return callback(out)
      })
  })
}
//freebase.graph("toronto")


function parse_topic_api(properties, options) {
  var out = [];
  properties = kill_boring(properties)
  Object.keys(properties).forEach(function(key) {
    var v = properties[key];
    //add topics
    if(v.valuetype == "object") {
      v.values = v.values.map(function(s) {
        s.property = key;
        return s
      })
      out = out.concat(v.values)
    }
    //add the topics from cvt values in the same manner
    if(v.valuetype == "compound") {
      v.values.forEach(function(c) {
        c.property = kill_boring(c.property);
        Object.keys(c.property).forEach(function(key2) {
          if(c.property[key2].valuetype == "object") {
            c.property[key2].values = c.property[key2].values.map(function(s) {
              s.property = [key, key2];
              return s
            })
            out = out.concat(c.property[key2].values)
          }
        })
      })
    }
  })
  out = out.map(function(o) {
    return {
      name: o.text,
      id: o.id,
      property: o.property
    }
  })
  out = out.map(function(o) {
    if(_.isArray(o.property)) {
      o.property = o.property.join('');
    }
    return o
  })
  return out;
}



//get similar topics to a topic
freebase.related=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback([])}
  options=options||{};
  options.max=options.max||25;
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.related, options, callback)
  }
  var all=[];
  //pluck relevant connected topics from outgoing links
  freebase.outgoing(q, options, function(result){
    all=result.filter(function(v){
      return fns.isin(v.property, data.related_properties)
    })
    //randomize the results
    all=all.sort(function(a,b){return (Math.round(Math.random())-0.5);})
    all=all.map(function(v){
      if(!v.sentence){
        v.sentence=v.name +" is related to "+result.name
      }
      return v
    })
    all=fns.json_unique(all, "id")
    if(all.length >= options.max){
      return callback(all)
    }
    //else, append topics that share the notable type
    freebase.notable(q, options, function(result){
      if(result && result.id){
        return freebase.list(result.id, {max:options.max}, function(r){
          if(!r){return callback(all)}
          r=r.map(function(v){
            v.sentence=v.name + " is also a " +result.name;
            return v
          })
          all=all.concat(r)
          all=fns.json_unique(all, "id")
          all=all.sort(function(a,b){return (Math.round(Math.random())-0.5);})
          return callback(all)
        })
      }else{
        return callback(all)
      }
    })
  })
}
// freebase.related("toronto", {key:"AIzaSyD5GmnQC7oW9GJIWPGsJUojspMMuPusAxI"}, function(r){
//   console.log(JSON.stringify(r, null, 2));
// })

//get a list of identifiers for a topic
freebase.is_a=function(q, property, options, callback){
  callback=callback||console.log;
  if(!q){return callback([])}
  options=options||{};
  options.max=options.max||25;
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.is_a, options, callback)
  }
  freebase.topic(q, options, function(r){
    var types=r.property["/type/object/type"] || {}
    types=types.values || []
    types=types.filter(function(v){return !v.text.match(/Topic/)})
    types=types.map(function(v){
      return {name:v.text, id:v.id, property:"/type/object/type"}
    })
    r=parse_topic_api(r.property)
    r=r.filter(function(v){return fns.isin(v.property, data.is_a)})
    r=r.concat(types)
    return callback(r)
  })
}
//freebase.is_a("toronto")


freebase.question=function(q, options, callback){
  callback=callback||console.log;
  if(!q || !options.property){return callback([])}
  options=options||{};
  options.max=options.max||25;
  var property=options.property;
  var type=property.match(/\/.*?\/.*?\//)
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.question, options, callback)
  }
  //straight-up id search
  if(property.match(/^\/.{1,12}\/.{3}/)){
    return freebase.topic(q, {}, function(r){
      if(!r || !r.property[property]){return callback([])}
      return callback(r.property[property].values)
    })
  }
  var candidate_metaschema=metaschema_lookup(property);
  if(candidate_metaschema){
    options.filter='(all '+candidate_metaschema+':"'+q+'")'
    freebase.search('', options, function(result){
      return callback(result)
    })
  }else{
    freebase.property_lookup(property, {}, function(candidate_properties){
      var candidate_properties=property_lookup(property);
      if(candidate_properties.length==0){return callback([])}
      options.filter=type;
       //look for these properties in the topic api
      freebase.topic(q, options, function(result){
        var all=[];
        candidate_properties.forEach(function(p){
          if(result.property[p.id]){
           all=all.concat(result.property[p.id].values)
          }
        })
        all=fns.json_unique(all, "id")
        return callback(all)
      })
    })
  }
}
// freebase.question("keanu reeves", {property:"children"})
 //freebase.question("thom yorke", "produced")
 //freebase.question("pulp fiction", {property:"/film/film/initial_release_date"})

// console.log(data.properties.filter(function(v){return v.cvt}))
//freebase.question("keanu reeves","films")


//transitive query on a specific property, maximum 3-ply
freebase.dig=function(q, options, callback){
  callback=callback||console.log;
  if(!q || !options.property){return callback([])}
  options=options||{};
  options.max=options.max||25;
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return freebase.dig(q[0], options, callback)
  }
  var all=[];
  freebase.question(q, options, function(r){
    if(!r || !_.isArray(r) || r.length==0){return callback(all)}
      all=all.concat(r);
      r=r.slice(0, options.max).map(function(v){return v.id})
      return fns.doit_async(r, freebase.question, options, function(big){
        if(!big || !_.isArray(big) || big.length==0){return callback(all)}
        all=all.concat(_.flatten(big,'shallow'))
        all=fns.json_unique(all, "id")
        fns.doit_async(r, freebase.question, options, function(big){
          if(!big || !_.isArray(big) || big.length==0){return callback(all)}
          all=all.concat(_.flatten(big,'shallow'))
          all=fns.json_unique(all, "id")
          return callback(all)
        })
      })
  })
}
// freebase.dig('/en/bovid', {property:'/biology/organism_classification/lower_classifications'}, function(r){
//   console.log(r.length)
// })
// freebase.dig('/en/toronto', {property:'/location/location/contains'}, function(r){
//   console.log(r)
// })

//list of topics with images
freebase.gallery=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback([])}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.gallery, options, callback)
  }
  options.extend = {
  "/common/topic/image": [{
    "id": null,
    "optional": "required"
    }]
   }
  freebase.list(q, options, function(result){
    result=result.map(function(obj){
      obj.href=globals.image_host+_.last(obj["/common/topic/image"]).id;
      obj.thumbnail=globals.image_host+_.last(obj["/common/topic/image"]).id
      +'?mode=fillcropmid&maxwidth=150&maxheight=150&errorid=/m/0djw4wd';
      obj=freebase.add_widget(obj)
      return obj;
    })
    return callback(result)
  })
}
// freebase.gallery('hurricanes')


//query wordnet via freebase
freebase.wordnet=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback([])}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.wordnet, options, callback)
  }
  var query=[{
    "id":            null,
    "type":          "/base/wordnet/synset",
    "gloss":         null,
    "syntactic_category": null,
    "sort": [
      "syntactic_category",
      "word.sense_number",
      "a:word.word_number"
    ],
    "word": {
      "sense_number": null,
      "derivationally_related_forms": [{
        "sense":{"name":null, "id":null},
          "optional": true
        }],
        "word": {
          "word": q
        }
      },
      "a:word": [{
        "word_number": null,
        "word": {
          "word": null
        }
      }]
    }]
    freebase.paginate(query, options, function(r){
      return callback(r)
    })
}
// freebase.wordnet(["bat","wood"])


//do a transitive-query, like all rivers in canada, using freebase metaschema
freebase.transitive=function transitive(q, property, options, callback){
  callback=callback||console.log;
  if(!q || !property){return callback([])}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, property, freebase.transitive, options, callback)
  }
  freebase.get_id(q, options, function(topic){
    if(!topic || !topic.id){return callback({})}
     var candidate_metaschema=metaschema_lookup(property);
      if(candidate_metaschema){
        options.filter='(all '+candidate_metaschema+':"'+topic.id+'")'
        freebase.search('', options, function(result){
          return callback(result)
        })
      }else{
        return callback([])
      }

    })
}


//lat/long for a topic
freebase.geolocation=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.geolocation, options, callback)
  }
  options.type=options.type||"/location/location";
  freebase.get_id(q, options, function(topic){
    if(!topic || !topic.id){return callback({})}
    var query=[{
      "id":topic.id,
      "name":null,
      "/location/location/geolocation": [{
          "latitude": null,
          "longitude": null,
          "type": "/location/geocode",
          "optional": true
        }]
      }]
     freebase.mqlread(query, options, function(result){
          if(result.result && result.result[0] && result.result[0]['/location/location/geolocation'][0]){
            var geo=result.result[0]['/location/location/geolocation'][0];
            delete geo.type
            delete geo.optional
            return callback(geo)
          }
          return callback({})
        })
   })
}
//freebase.geolocation("cn tower")

//list of topics nearby a location
freebase.nearby=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback([])}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.nearby, options, callback)
  }
  freebase.geolocation(q, {}, function(geo){
    if(!geo || !geo.latitude || !geo.longitude){return callback([])}
         //use the *old* freebase api for this, as there's no alternative in the new one
          var location='{"coordinates":['+geo.longitude+','+geo.latitude+'],"type":"Point"}'
          options.within=options.within||5;
          options.type=options.type||"/location/location";
          var url=globals.geosearch+'?location='+encodeURIComponent(location)+'&order_by=distance&type='+options.type+'&within='+options.within+'&limit=200&format=json'
          fns.http(url, function(r){
            return callback(r.result.features)
          })
    })
}
//freebase.nearby("cn tower", {type:"/food/restaurant"}, console.log)


//list of topics inside a location
freebase.inside=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback([])}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.inside, options, callback)
  }
  //handy to have their geocoordinates too
  options.mql_output=options.mql_output || [{
    "name": null,
    "id": null,
    "type":"/location/location",
    "/location/location/geolocation": [{
      "latitude": null,
      "longitude": null,
      "type": "/location/geocode",
      "optional": true
    }]
  }]
  freebase.transitive(q, "part_of", options, function(r){
    return callback(r)
  })
}



//get a url for dbpedia based on this topic
freebase.dbpedia_page=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.dbpedia_page, options, callback)
  }
   freebase.get_id(q, options, function(topic){
     if(!topic || !topic.id){return callback("")}
     var query=[{
        "id":   topic.id,
        "name": null,
        "key": {
          "namespace": "/wikipedia/en_title",
          "value":     null
        }
      }]
    freebase.mqlread(query, options, function(result){
      if(!result || !result.result || !result.result[0] || !result.result[0].key.value){
        return callback('')
      }
      return callback('http://dbpedia.org/resource/'+encodeURIComponent(result.result[0].key.value))
    })
  })
}
//freebase.dbpedia_page("Köppen climate classification ")
//http://dbpedia.org/resource/K%2400F6ppen_climate_classification


//get all data from dbpedia for this topic
freebase.dbpedia_data=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.dbpedia_data, options, callback)
  }
   freebase.get_id(q, options, function(topic){
     if(!topic || !topic.id){return callback("")}
     var query=[{
        "id":   topic.id,
        "name": null,
        "key": {
          "namespace": "/wikipedia/en_title",
          "value":     null
        }
      }]
    freebase.mqlread(query, options, function(result){
      if(!result || !result.result || !result.result[0] || !result.result[0].key.value){return callback('')}
      var subj='http://dbpedia.org/resource/'+fns.mql_unencode(result.result[0].key.value);
      var url='http://dbpedia.org/data/'+encodeURIComponent(fns.mql_unencode(result.result[0].key.value))+'.json'
      fns.http(url, function(result){
        var all=Object.keys(result).map(function(i){
          return {
            subject:{dbpedia:subj, id:dbpedia_to_freebase(subj)},
            property:{dbpedia:Object.keys(result[i])[0]},
            object:{dbpedia:i, id:dbpedia_to_freebase(i)}
          }
        })
        return callback(all)
      })
    })
  })
}
//freebase.dbpedia_data("Köppen climate classification", {}, console.log)
// freebase.dbpedia_data("Toronto", console.log)

function dbpedia_to_freebase(url){
  if(!url || !url.match(/https?:\/\/dbpedia\.org\/(page|data|resource)\//i) ){return ''}
  url=url.replace(/https?:\/\/dbpedia\.org\/(page|data|resource)\//i,'') ||''
  url=decodeURI(url)
  return "/wikipedia/en/"+freebase.mql_encode(url.replace(/ /g,'_'));
}

//get a url for wikipedia based on this topic
freebase.wikipedia_page=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.wikipedia_page, options, callback)
  }
   freebase.get_id(q, options, function(topic){
     if(!topic || !topic.id){return callback("")}
     var query=[{
        "id":   topic.id,
        "name": null,
        "key": {
          "namespace": "/wikipedia/en_title",
          "value":     null
        }
      }]
    freebase.mqlread(query, options, function(result){
      if(!result || !result.result || !result.result[0]){return callback('')}
      return callback(fns.mql_unencode(result.result[0].key.value))//'http://en.wikipedia.org/wiki/'
    })
  })
}
// freebase.wikipedia_page('toronto')

freebase.wikipedia_categories=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback([])}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.wikipedia_categories, options, callback)
  }
  //if its not a wikipedia title, reuse get-topic logic for searches/ids
  if(q.match(/ /) || q.substr(0,1)==q.substr(0,1).toLowerCase() || q.match(/^\//)){
    return freebase.wikipedia_page(q, options, function(r){
      freebase.wikipedia_categories(r, options, callback)
    })
  }
  var url=globals.wikipedia_host+'?action=query&prop=categories&format=json&clshow=!hidden&cllimit=200&titles='+encodeURIComponent(q);
  fns.http(url, function(r){
    if(!r || !r.query || !r.query.pages || !r.query.pages[Object.keys(r.query.pages)[0]]){return callback([])}
    var cats=r.query.pages[Object.keys(r.query.pages)[0]].categories ||[]
    cats=cats.map(function(v){return v.title})
    return callback(cats)
  })
}
//freebase.wikipedia_categories(["Thom Yorke","Toronto"], {}, console.log)
//freebase.wikipedia_categories("Thom Yorke", {}, console.log)

//outgoing links from this wikipedia page, converted to freebase ids
freebase.wikipedia_links=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.wikipedia_links, options, callback)
  }
  //if its not a wikipedia title, reuse get-topic logic for searches/ids
  if(q.match(/ /) || q.substr(0,1)==q.substr(0,1).toLowerCase() || q.match(/^\//)){
    return freebase.wikipedia_page(q, options, function(r){
      freebase.wikipedia_links(r, options, callback)
    })
  }
  var url=globals.wikipedia_host+'?action=query&prop=links&format=json&plnamespace=0&pllimit=500&titles='+encodeURIComponent(q);
  fns.http(url, function(r){
    if(!r || !r.query || !r.query.pages || !r.query.pages[Object.keys(r.query.pages)[0]]){return callback([])}
    var links=r.query.pages[Object.keys(r.query.pages)[0]].links ||[]
    //filter-out non-freebase topics
    links=links.filter(function(v){return v.title.match(/^List of /i)==null})
    links=links.map(function(o){
      o.id="/wikipedia/en/"+freebase.mql_encode(o.title.replace(/ /g,'_'));
      o.name=o.title
      delete o.title
      delete o.ns
      return o
    })
    return callback(links)
  })
}
//freebase.wikipedia_links("Toronto", {}, console.log)

//outgoing links from this wikipedia page, converted to freebase ids
freebase.wikipedia_external_links=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.wikipedia_external_links, options, callback)
  }
  //if its not a wikipedia title, reuse get-topic logic for searches/ids
  if(q.match(/ /) || q.substr(0,1)==q.substr(0,1).toLowerCase() || q.match(/^\//)){
    return freebase.wikipedia_page(q, options, function(r){
      freebase.wikipedia_external_links(r, options, callback)
    })
  }
  var url=globals.wikipedia_host+'?action=query&prop=extlinks&format=json&plnamespace=0&pllimit=500&titles='+encodeURIComponent(q);
  fns.http(url, function(r){
    if(!r || !r.query || !r.query.pages || !r.query.pages[Object.keys(r.query.pages)[0]]){
      return callback([])
    }
    var links=r.query.pages[Object.keys(r.query.pages)[0]].extlinks ||[]
    links=links.filter(function(v){return v["*"].match(/^http/)})
    links=links.map(function(v){
      var box=fns.parseurl(v["*"]);
      return {url:v["*"], domain:box.host}
    })
    return callback(links)
  })
}
//freebase.wikipedia_external_links("/en/toronto", {}, console.log)


//common lookups for types and properties
freebase.schema_introspection=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.schema_introspection, options, callback)
  }
  //see if its a type
  freebase.search(q, {type:"/type/type"}, function(r){
    if(r && r[0] && r[0].id){
     r=r[0]
     var query=[{
        "id": r.id,
        "mid": null,
        "name":null,
        "properties": [{
          "id": null,
          "name": null,
          "/type/property/reverse_property":[{
            "id": null,
            "name": null,
            "optional":true
          }]
        }],
        "/freebase/type_hints/mediator": null,
        "/freebase/type_hints/included_types": [{
          "id": null,
          "name": null
        }],
        "/freebase/type_profile/published":null,
        "/type/type/expected_by": [{
          "id": null,
          "name": null
        }],
        "/freebase/type_profile/instance_count": null,
        "/freebase/type_profile/property_count": null,
        "domain": {
          "id": null,
          "name": null
        },
        "/freebase/type_profile/equivalent_topic": {
          "id": null,
          "name": null
        },
        "type": "/type/type"
      }]
      freebase.mqlread(query, {}, function(r){
        if(!r || !r.result || !r.result[0]){return callback({})}
        r=r.result[0]
        var obj={}
        obj.domain=r.domain
        obj.id=r.id
        obj.included_types=r["/freebase/type_hints/included_types"]
        obj.incoming_properties=r["/type/type/expected_by"]
        obj.is_compound_value=r["/freebase/type_hints/mediator"]||false
        obj.is_commons=r["/freebase/type_profile/published"]||false
        obj.equivalent_topic=r["/freebase/type_profile/equivalent_topic"]
        obj.topic_count=r["/freebase/type_profile/instance_count"]||0
        obj.property_count=r["/freebase/type_profile/property_count"]||0;
        //types that include this one
        var query=[{
          "id": null,
          "name": null,
          "s:name": {
            "value": null,
            "lang": "/lang/en",
            "optional": "required"
          },
          "/freebase/type_hints/included_types": [{
            "id": obj.id
          }]
        }]
        freebase.mqlread(query,{},function(r){
          if(!r || !r.result){return callback(obj)}
          obj.included_by=r.result.map(function(v){return {id:v.id, name:v.name}})
          return callback(obj)
        })
      })

    }
    else{
      freebase.property_lookup(q,{},function(r){
        if(!r || !r[0] || !r[0].id){
          return callback({})
        }
        return freebase.property_inspection(r[0].id, {}, callback)
      })
    }
  })
}
//freebase.schema_introspection("politician")
//freebase.schema_introspection("/type/property/master_property")


//common lookups for freebase property data
freebase.property_introspection=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.property_introspection, options, callback)
  }
  var query=[{
      "id": q,
      "mid": null,
      "name": null,
      "type": "/type/property",
      "reverse_property": [{
        "id": null,
        "name": null,
        "optional": true
      }],
      "expected_type": [{
        "id": null,
        "name": null,
        "optional": true,
      }],
      "unique": null,
      "schema": {
        "id":null,
        "name":null,
        "/freebase/type_profile/instance_count": null
      },
      "/common/topic/description": null
    }]
    freebase.mqlread(query,{},function(r){
      var obj={}
      if(!r || !r.result || !r.result[0]){return callback(obj)}
      r=r.result[0]
      obj.name=r.name
      obj.id=r.id
      obj.type=r.schema
      obj.description=r["/common/topic/description"]
      obj.unique=r.unique||false;
      obj.reverse_property=r.reverse_property
      obj.expected_type=r.expected_type

      //get its metaschema
      var query=[{
        "name": null,
        "type": "/base/fbontology/semantic_predicate",
        "paths": {
          "a:properties": q,
          "b:properties":[{"id":null}]
        }
      }]
      freebase.mqlread(query,{},function(r){
        obj.meta=r.result
        return callback(obj)
      })
    })
  //   //get its property aliases
  // var query=[{type:"/base/natlang/property_alias",
  //   property:property,
  //   alias:[]
  //   }]
}
//freebase.property_introspection("/government/politician/party")


//lookup soft property matches, like 'birthday' vs 'date of birth'
freebase.property_lookup=function(q, options, callback){
  callback=callback||console.log;
  if(!q){return callback({})}
  options=options||{};
  //is it an array of sub-tasks?
  if(_.isArray(q) && q.length>1){
    return fns.doit_async(q, freebase.property_lookup, options, callback)
  }
  freebase.search(q, {type:"/type/property"}, function(candidate_properties){
      //look up offline for property aliases
    if(!q.match(/\/.*?\/.*?\//)){
      q=q.toLowerCase();
      q=q.replace(/  /,' ');
      q=q.replace(/^\s+|\s+$/, '');
      var property_singular=fns.singularize(q);
      candidate_properties=candidate_properties.concat(data.properties.filter(function(v){
        return v.name==q || v.name==property_singular
      }))
    }
    return callback(candidate_properties)
  })
}
// freebase.property_lookup.description="lookup soft property matches, like 'birthday' vs 'date of birth'"
//freebase.property_lookup("albums")

//lookup metaschema predicate matches offline..
function metaschema_lookup(property){
  property=property.toLowerCase();
  property=property.replace(/\W(is|was|are|will be|has been)\W/,' ')
  property=property.replace(/  /g,' ');
  property=property.replace(/_/g,' ');
  property=property.replace(/^\s+|\s+$/, '');
  var candidate_properties=data.metaschema.filter(function(v){
    v.aliases=v.aliases||[]
    return v.id==property || v.name.toLowerCase()==property || fns.isin(property, v.aliases) || v.search_filter_operand.replace(/_/g,' ')==property
  })[0]
  candidate_properties=candidate_properties||{}
  return candidate_properties.search_filter_operand;
}
//console.log(metaschema_lookup('built with'))


//slightly different lookup when its a url
function url_lookup(q, options, callback){
  var url= globals.host+'search?type=/common/topic&limit=1&query='+encodeURIComponent(q);
  if(options.key){
    url+='&key='+options.key;
  }
  fns.http(url, function(result){
    return callback(result)
  })
}


//kill the freebase internal-properties that don't feel graphy
function kill_boring(obj){
  if(!obj){return {}}
  data.boring.forEach(function(v){delete obj[v]})
  return obj
}


  //  quote a unicode string to turn it into a valid mql /type/key/value
  freebase.mql_encode= function(s) {
    if(!s) {
      return ''
    }
    s = s.replace(/  /, ' ');
    s = s.replace(/^\s+|\s+$/, '');
    s = s.replace(/ /g, '_');
    var mqlkey_start = 'A-Za-z0-9';
    var mqlkey_char = 'A-Za-z0-9_-';
    var MQLKEY_VALID = new RegExp('^[' + mqlkey_start + '][' + mqlkey_char + ']*$');
    var MQLKEY_CHAR_MUSTQUOTE = new RegExp('([^' + mqlkey_char + '])', 'g');
    if(MQLKEY_VALID.exec(s)) // fastpath
      return s;
    var convert = function(a, b) {
      var hex = b.charCodeAt(0).toString(16).toUpperCase();
      if(hex.length == 2) hex = '00' + hex;
      if(hex.length == 3) hex = '0' + hex;
      return '$' + hex;
    };
    x = s.replace(MQLKEY_CHAR_MUSTQUOTE, convert);
    if(x.charAt(0) == '-' || x.charAt(0) == '_') {
      x = convert(x, x.charAt(0)) + x.substr(1);
    }
    return x;
  }


freebase.add_widget=function(obj){
  var id=obj.mid|| obj.id;
  if(!obj || !id){return obj}
  var html='<a href="#" class="imagewrap" data-id="'+id+'" style="position:relative; width:200px; height:200px;">'
    +'<img style="border-radius:5px;" src="'+globals.image_host
    +id
    +'?maxwidth=200&maxheight=200&errorid=/m/0djw4wd"/>'
      if(obj.name){
      html+='<div class="caption" style="position:absolute; opacity:0.5; background:black; bottom:10px; color:white; left:10px; border-radius: 5px; min-width:100px; padding:5px;">'
         +obj.name
      +'</div>'
    }
  html+='</a>'
  obj.widget=html;
  return obj;
}


//soften up the api so it will take these methods alternatively..
var aliases={
  mqlread:["query", "mql_read"],
  topic:["topic_api","all_data","data","everything","get_data"],
  paginate:["continue","all","each"],
  same_as_links:["sameas","sameAs","sameaslinks","links","sameas_links","external_links","weblinks"],
  translate:["translate_to","multilingual","i8n", "get_translation"],
  image:["pic","photo","picture","get_image","image_url","image_src"],
  description:["get_description","blurb","get_blurb","blurb_api","text","get_text"],
  notable:["notable_type","notabletype","notable_for","notable_as","main_type","type"],
  place_data:["city","country","province","place_info","location_info","location","whereis"],
  incoming:["incoming_links", "incoming_nodes","inlinks"],
  outgoing:["outgoing_links", "outgoing_nodes","outlinks"],
  related:["related_topics","similar","related_to","get_related"],
  gallery:["images","get_images"],
  geolocation:["geo","geocoordinates","geo_location","lat_lng","location"],
  nearby:["near", "close_to"],
  inside:["inside_of","within","contained_by","contains"],
  mql_encode:["encode","escape"]
}
for(var i in aliases){
  aliases[i].map(function(v){
    freebase[v]=freebase[i]
   // freebase[v].is_alias=true
  })
}





//
freebase.documentation=function(f,options,callback){
  callback=callback||console.log;
  options=options||{};
  var str=[];
  var descriptions={
    mqlread:["query freebase using the MQL"],
    topic:["get all of a topic's data using the freebase topic api"],
    paginate:["continue a query until it's done or hits your options.max "],
    same_as_links:["get all of a topics weblinks"],
    translate:["get translated names for a topic"],
    image:["get a image href for a topic"],
    description:["get a paragraph of text about a topic"],
    notable:["get the main type for a topic"],
    place_data:["get city, country, province, and timezone data for a geoco-ordinate"],
    incoming:["all incoming nodes to a topic"],
    outgoing:["all outgoing nodes to a topic"],
    related:["list some similar or neighbouring topics for a topic"],
    gallery:["list topics with images"],
    geolocation:["get a topics lat_lng data"],
    nearby:["topics geographicaly close to another topic"],
    inside:["list topics inside_of this topic"],
    mql_encode:["escape text to fit MQL queries and keys"]
  }
    str.push('Freebase.com nodejs-library')
    str.push('--https://github.com/spencermountain/Freebase-nodejs--');
    if(f){
      if(freebase[f]){
        str.push(" * "+f)
        str.push(descriptions[f])
      return
      }else{
        str.push("Couldn't find the function "+f+". Here are the available functions:")
      }
    }
    Object.keys(freebase).map(function(f){
      if(!freebase[f].is_alias){
        str.push(" * "+f)
        if(freebase[f].description){
          str.push("   -"+descriptions[f])
        }
      }
    })
    if(options.html){
      str=str.join('<br/>')
    }
    else{
      str=str.join('\n')
    }
    callback(str)
}
//freebase.documentation()

// console.log(Object.keys(freebase))
module.exports =freebase;

});
require("/freebase.js");

